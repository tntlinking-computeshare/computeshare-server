// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
)

// NetworkMapping is the model entity for the NetworkMapping schema.
type NetworkMapping struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Protocol holds the value of the "protocol" field.
	Protocol string `json:"protocol,omitempty"`
	// gateway id
	FkGatewayID uuid.UUID `json:"fk_gateway_id,omitempty"`
	// 映射到网关的端口号
	GatewayPort int32 `json:"gateway_port,omitempty"`
	// 网关ip
	GatewayIP string `json:"gateway_ip,omitempty"`
	// 需要映射的虚拟机端口号
	ComputerPort int32 `json:"computer_port,omitempty"`
	//  0 待开始 1 进行中 2 已完成, 3 失败
	Status int `json:"status,omitempty"`
	// 虚拟机实例ID
	FkComputerID uuid.UUID `json:"fk_computer_id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// 删除状态
	DeleteState bool `json:"delete_state,omitempty"`
	// 创建时间
	CreateTime   time.Time `json:"create_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetworkMapping) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case networkmapping.FieldDeleteState:
			values[i] = new(sql.NullBool)
		case networkmapping.FieldGatewayPort, networkmapping.FieldComputerPort, networkmapping.FieldStatus:
			values[i] = new(sql.NullInt64)
		case networkmapping.FieldName, networkmapping.FieldProtocol, networkmapping.FieldGatewayIP:
			values[i] = new(sql.NullString)
		case networkmapping.FieldCreateTime:
			values[i] = new(sql.NullTime)
		case networkmapping.FieldID, networkmapping.FieldFkGatewayID, networkmapping.FieldFkComputerID, networkmapping.FieldFkUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetworkMapping fields.
func (nm *NetworkMapping) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case networkmapping.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				nm.ID = *value
			}
		case networkmapping.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				nm.Name = value.String
			}
		case networkmapping.FieldProtocol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				nm.Protocol = value.String
			}
		case networkmapping.FieldFkGatewayID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_gateway_id", values[i])
			} else if value != nil {
				nm.FkGatewayID = *value
			}
		case networkmapping.FieldGatewayPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_port", values[i])
			} else if value.Valid {
				nm.GatewayPort = int32(value.Int64)
			}
		case networkmapping.FieldGatewayIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gateway_ip", values[i])
			} else if value.Valid {
				nm.GatewayIP = value.String
			}
		case networkmapping.FieldComputerPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field computer_port", values[i])
			} else if value.Valid {
				nm.ComputerPort = int32(value.Int64)
			}
		case networkmapping.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				nm.Status = int(value.Int64)
			}
		case networkmapping.FieldFkComputerID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_computer_id", values[i])
			} else if value != nil {
				nm.FkComputerID = *value
			}
		case networkmapping.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				nm.FkUserID = *value
			}
		case networkmapping.FieldDeleteState:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field delete_state", values[i])
			} else if value.Valid {
				nm.DeleteState = value.Bool
			}
		case networkmapping.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				nm.CreateTime = value.Time
			}
		default:
			nm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NetworkMapping.
// This includes values selected through modifiers, order, etc.
func (nm *NetworkMapping) Value(name string) (ent.Value, error) {
	return nm.selectValues.Get(name)
}

// Update returns a builder for updating this NetworkMapping.
// Note that you need to call NetworkMapping.Unwrap() before calling this method if this NetworkMapping
// was returned from a transaction, and the transaction was committed or rolled back.
func (nm *NetworkMapping) Update() *NetworkMappingUpdateOne {
	return NewNetworkMappingClient(nm.config).UpdateOne(nm)
}

// Unwrap unwraps the NetworkMapping entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nm *NetworkMapping) Unwrap() *NetworkMapping {
	_tx, ok := nm.config.driver.(*txDriver)
	if !ok {
		panic("ent: NetworkMapping is not a transactional entity")
	}
	nm.config.driver = _tx.drv
	return nm
}

// String implements the fmt.Stringer.
func (nm *NetworkMapping) String() string {
	var builder strings.Builder
	builder.WriteString("NetworkMapping(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nm.ID))
	builder.WriteString("name=")
	builder.WriteString(nm.Name)
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(nm.Protocol)
	builder.WriteString(", ")
	builder.WriteString("fk_gateway_id=")
	builder.WriteString(fmt.Sprintf("%v", nm.FkGatewayID))
	builder.WriteString(", ")
	builder.WriteString("gateway_port=")
	builder.WriteString(fmt.Sprintf("%v", nm.GatewayPort))
	builder.WriteString(", ")
	builder.WriteString("gateway_ip=")
	builder.WriteString(nm.GatewayIP)
	builder.WriteString(", ")
	builder.WriteString("computer_port=")
	builder.WriteString(fmt.Sprintf("%v", nm.ComputerPort))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", nm.Status))
	builder.WriteString(", ")
	builder.WriteString("fk_computer_id=")
	builder.WriteString(fmt.Sprintf("%v", nm.FkComputerID))
	builder.WriteString(", ")
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", nm.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("delete_state=")
	builder.WriteString(fmt.Sprintf("%v", nm.DeleteState))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(nm.CreateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NetworkMappings is a parsable slice of NetworkMapping.
type NetworkMappings []*NetworkMapping
