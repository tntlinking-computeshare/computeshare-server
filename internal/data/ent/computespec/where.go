// Code generated by ent, DO NOT EDIT.

package computespec

import (
	"entgo.io/ent/dialect/sql"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int32) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLTE(FieldID, id))
}

// Core applies equality check predicate on the "core" field. It's identical to CoreEQ.
func Core(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldCore, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldMemory, v))
}

// CoreEQ applies the EQ predicate on the "core" field.
func CoreEQ(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldCore, v))
}

// CoreNEQ applies the NEQ predicate on the "core" field.
func CoreNEQ(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNEQ(FieldCore, v))
}

// CoreIn applies the In predicate on the "core" field.
func CoreIn(vs ...int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldIn(FieldCore, vs...))
}

// CoreNotIn applies the NotIn predicate on the "core" field.
func CoreNotIn(vs ...int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNotIn(FieldCore, vs...))
}

// CoreGT applies the GT predicate on the "core" field.
func CoreGT(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGT(FieldCore, v))
}

// CoreGTE applies the GTE predicate on the "core" field.
func CoreGTE(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGTE(FieldCore, v))
}

// CoreLT applies the LT predicate on the "core" field.
func CoreLT(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLT(FieldCore, v))
}

// CoreLTE applies the LTE predicate on the "core" field.
func CoreLTE(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLTE(FieldCore, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int) predicate.ComputeSpec {
	return predicate.ComputeSpec(sql.FieldLTE(FieldMemory, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ComputeSpec) predicate.ComputeSpec {
	return predicate.ComputeSpec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ComputeSpec) predicate.ComputeSpec {
	return predicate.ComputeSpec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ComputeSpec) predicate.ComputeSpec {
	return predicate.ComputeSpec(func(s *sql.Selector) {
		p(s.Not())
	})
}
