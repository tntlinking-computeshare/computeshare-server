// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleorder"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// CycleOrderUpdate is the builder for updating CycleOrder entities.
type CycleOrderUpdate struct {
	config
	hooks    []Hook
	mutation *CycleOrderMutation
}

// Where appends a list predicates to the CycleOrderUpdate builder.
func (cou *CycleOrderUpdate) Where(ps ...predicate.CycleOrder) *CycleOrderUpdate {
	cou.mutation.Where(ps...)
	return cou
}

// SetFkUserID sets the "fk_user_id" field.
func (cou *CycleOrderUpdate) SetFkUserID(u uuid.UUID) *CycleOrderUpdate {
	cou.mutation.SetFkUserID(u)
	return cou
}

// SetOrderNo sets the "order_no" field.
func (cou *CycleOrderUpdate) SetOrderNo(s string) *CycleOrderUpdate {
	cou.mutation.SetOrderNo(s)
	return cou
}

// SetProductName sets the "product_name" field.
func (cou *CycleOrderUpdate) SetProductName(s string) *CycleOrderUpdate {
	cou.mutation.SetProductName(s)
	return cou
}

// SetProductDesc sets the "product_desc" field.
func (cou *CycleOrderUpdate) SetProductDesc(s string) *CycleOrderUpdate {
	cou.mutation.SetProductDesc(s)
	return cou
}

// SetSymbol sets the "symbol" field.
func (cou *CycleOrderUpdate) SetSymbol(s string) *CycleOrderUpdate {
	cou.mutation.SetSymbol(s)
	return cou
}

// SetCycle sets the "cycle" field.
func (cou *CycleOrderUpdate) SetCycle(f float64) *CycleOrderUpdate {
	cou.mutation.ResetCycle()
	cou.mutation.SetCycle(f)
	return cou
}

// AddCycle adds f to the "cycle" field.
func (cou *CycleOrderUpdate) AddCycle(f float64) *CycleOrderUpdate {
	cou.mutation.AddCycle(f)
	return cou
}

// SetResourceID sets the "resource_id" field.
func (cou *CycleOrderUpdate) SetResourceID(s string) *CycleOrderUpdate {
	cou.mutation.SetResourceID(s)
	return cou
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (cou *CycleOrderUpdate) SetNillableResourceID(s *string) *CycleOrderUpdate {
	if s != nil {
		cou.SetResourceID(*s)
	}
	return cou
}

// ClearResourceID clears the value of the "resource_id" field.
func (cou *CycleOrderUpdate) ClearResourceID() *CycleOrderUpdate {
	cou.mutation.ClearResourceID()
	return cou
}

// SetCreateTime sets the "create_time" field.
func (cou *CycleOrderUpdate) SetCreateTime(t time.Time) *CycleOrderUpdate {
	cou.mutation.SetCreateTime(t)
	return cou
}

// Mutation returns the CycleOrderMutation object of the builder.
func (cou *CycleOrderUpdate) Mutation() *CycleOrderMutation {
	return cou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cou *CycleOrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cou.sqlSave, cou.mutation, cou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cou *CycleOrderUpdate) SaveX(ctx context.Context) int {
	affected, err := cou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cou *CycleOrderUpdate) Exec(ctx context.Context) error {
	_, err := cou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cou *CycleOrderUpdate) ExecX(ctx context.Context) {
	if err := cou.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cou *CycleOrderUpdate) check() error {
	if v, ok := cou.mutation.OrderNo(); ok {
		if err := cycleorder.OrderNoValidator(v); err != nil {
			return &ValidationError{Name: "order_no", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.order_no": %w`, err)}
		}
	}
	if v, ok := cou.mutation.ProductName(); ok {
		if err := cycleorder.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_name": %w`, err)}
		}
	}
	if v, ok := cou.mutation.ProductDesc(); ok {
		if err := cycleorder.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "product_desc", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_desc": %w`, err)}
		}
	}
	if v, ok := cou.mutation.Symbol(); ok {
		if err := cycleorder.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.symbol": %w`, err)}
		}
	}
	if v, ok := cou.mutation.ResourceID(); ok {
		if err := cycleorder.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.resource_id": %w`, err)}
		}
	}
	return nil
}

func (cou *CycleOrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cycleorder.Table, cycleorder.Columns, sqlgraph.NewFieldSpec(cycleorder.FieldID, field.TypeUUID))
	if ps := cou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cou.mutation.FkUserID(); ok {
		_spec.SetField(cycleorder.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := cou.mutation.OrderNo(); ok {
		_spec.SetField(cycleorder.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := cou.mutation.ProductName(); ok {
		_spec.SetField(cycleorder.FieldProductName, field.TypeString, value)
	}
	if value, ok := cou.mutation.ProductDesc(); ok {
		_spec.SetField(cycleorder.FieldProductDesc, field.TypeString, value)
	}
	if value, ok := cou.mutation.Symbol(); ok {
		_spec.SetField(cycleorder.FieldSymbol, field.TypeString, value)
	}
	if value, ok := cou.mutation.Cycle(); ok {
		_spec.SetField(cycleorder.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := cou.mutation.AddedCycle(); ok {
		_spec.AddField(cycleorder.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := cou.mutation.ResourceID(); ok {
		_spec.SetField(cycleorder.FieldResourceID, field.TypeString, value)
	}
	if cou.mutation.ResourceIDCleared() {
		_spec.ClearField(cycleorder.FieldResourceID, field.TypeString)
	}
	if value, ok := cou.mutation.CreateTime(); ok {
		_spec.SetField(cycleorder.FieldCreateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycleorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cou.mutation.done = true
	return n, nil
}

// CycleOrderUpdateOne is the builder for updating a single CycleOrder entity.
type CycleOrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CycleOrderMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (couo *CycleOrderUpdateOne) SetFkUserID(u uuid.UUID) *CycleOrderUpdateOne {
	couo.mutation.SetFkUserID(u)
	return couo
}

// SetOrderNo sets the "order_no" field.
func (couo *CycleOrderUpdateOne) SetOrderNo(s string) *CycleOrderUpdateOne {
	couo.mutation.SetOrderNo(s)
	return couo
}

// SetProductName sets the "product_name" field.
func (couo *CycleOrderUpdateOne) SetProductName(s string) *CycleOrderUpdateOne {
	couo.mutation.SetProductName(s)
	return couo
}

// SetProductDesc sets the "product_desc" field.
func (couo *CycleOrderUpdateOne) SetProductDesc(s string) *CycleOrderUpdateOne {
	couo.mutation.SetProductDesc(s)
	return couo
}

// SetSymbol sets the "symbol" field.
func (couo *CycleOrderUpdateOne) SetSymbol(s string) *CycleOrderUpdateOne {
	couo.mutation.SetSymbol(s)
	return couo
}

// SetCycle sets the "cycle" field.
func (couo *CycleOrderUpdateOne) SetCycle(f float64) *CycleOrderUpdateOne {
	couo.mutation.ResetCycle()
	couo.mutation.SetCycle(f)
	return couo
}

// AddCycle adds f to the "cycle" field.
func (couo *CycleOrderUpdateOne) AddCycle(f float64) *CycleOrderUpdateOne {
	couo.mutation.AddCycle(f)
	return couo
}

// SetResourceID sets the "resource_id" field.
func (couo *CycleOrderUpdateOne) SetResourceID(s string) *CycleOrderUpdateOne {
	couo.mutation.SetResourceID(s)
	return couo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (couo *CycleOrderUpdateOne) SetNillableResourceID(s *string) *CycleOrderUpdateOne {
	if s != nil {
		couo.SetResourceID(*s)
	}
	return couo
}

// ClearResourceID clears the value of the "resource_id" field.
func (couo *CycleOrderUpdateOne) ClearResourceID() *CycleOrderUpdateOne {
	couo.mutation.ClearResourceID()
	return couo
}

// SetCreateTime sets the "create_time" field.
func (couo *CycleOrderUpdateOne) SetCreateTime(t time.Time) *CycleOrderUpdateOne {
	couo.mutation.SetCreateTime(t)
	return couo
}

// Mutation returns the CycleOrderMutation object of the builder.
func (couo *CycleOrderUpdateOne) Mutation() *CycleOrderMutation {
	return couo.mutation
}

// Where appends a list predicates to the CycleOrderUpdate builder.
func (couo *CycleOrderUpdateOne) Where(ps ...predicate.CycleOrder) *CycleOrderUpdateOne {
	couo.mutation.Where(ps...)
	return couo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (couo *CycleOrderUpdateOne) Select(field string, fields ...string) *CycleOrderUpdateOne {
	couo.fields = append([]string{field}, fields...)
	return couo
}

// Save executes the query and returns the updated CycleOrder entity.
func (couo *CycleOrderUpdateOne) Save(ctx context.Context) (*CycleOrder, error) {
	return withHooks(ctx, couo.sqlSave, couo.mutation, couo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (couo *CycleOrderUpdateOne) SaveX(ctx context.Context) *CycleOrder {
	node, err := couo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (couo *CycleOrderUpdateOne) Exec(ctx context.Context) error {
	_, err := couo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (couo *CycleOrderUpdateOne) ExecX(ctx context.Context) {
	if err := couo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (couo *CycleOrderUpdateOne) check() error {
	if v, ok := couo.mutation.OrderNo(); ok {
		if err := cycleorder.OrderNoValidator(v); err != nil {
			return &ValidationError{Name: "order_no", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.order_no": %w`, err)}
		}
	}
	if v, ok := couo.mutation.ProductName(); ok {
		if err := cycleorder.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_name": %w`, err)}
		}
	}
	if v, ok := couo.mutation.ProductDesc(); ok {
		if err := cycleorder.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "product_desc", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_desc": %w`, err)}
		}
	}
	if v, ok := couo.mutation.Symbol(); ok {
		if err := cycleorder.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.symbol": %w`, err)}
		}
	}
	if v, ok := couo.mutation.ResourceID(); ok {
		if err := cycleorder.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.resource_id": %w`, err)}
		}
	}
	return nil
}

func (couo *CycleOrderUpdateOne) sqlSave(ctx context.Context) (_node *CycleOrder, err error) {
	if err := couo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cycleorder.Table, cycleorder.Columns, sqlgraph.NewFieldSpec(cycleorder.FieldID, field.TypeUUID))
	id, ok := couo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CycleOrder.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := couo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cycleorder.FieldID)
		for _, f := range fields {
			if !cycleorder.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cycleorder.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := couo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := couo.mutation.FkUserID(); ok {
		_spec.SetField(cycleorder.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := couo.mutation.OrderNo(); ok {
		_spec.SetField(cycleorder.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := couo.mutation.ProductName(); ok {
		_spec.SetField(cycleorder.FieldProductName, field.TypeString, value)
	}
	if value, ok := couo.mutation.ProductDesc(); ok {
		_spec.SetField(cycleorder.FieldProductDesc, field.TypeString, value)
	}
	if value, ok := couo.mutation.Symbol(); ok {
		_spec.SetField(cycleorder.FieldSymbol, field.TypeString, value)
	}
	if value, ok := couo.mutation.Cycle(); ok {
		_spec.SetField(cycleorder.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := couo.mutation.AddedCycle(); ok {
		_spec.AddField(cycleorder.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := couo.mutation.ResourceID(); ok {
		_spec.SetField(cycleorder.FieldResourceID, field.TypeString, value)
	}
	if couo.mutation.ResourceIDCleared() {
		_spec.ClearField(cycleorder.FieldResourceID, field.TypeString)
	}
	if value, ok := couo.mutation.CreateTime(); ok {
		_spec.SetField(cycleorder.FieldCreateTime, field.TypeTime, value)
	}
	_node = &CycleOrder{config: couo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, couo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycleorder.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	couo.mutation.done = true
	return _node, nil
}
