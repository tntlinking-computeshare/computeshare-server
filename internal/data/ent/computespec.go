// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
)

// ComputeSpec is the model entity for the ComputeSpec schema.
type ComputeSpec struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// cpu核数
	Core int `json:"core,omitempty"`
	// 服务器内存G
	Memory       int `json:"memory,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ComputeSpec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case computespec.FieldID, computespec.FieldCore, computespec.FieldMemory:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ComputeSpec fields.
func (cs *ComputeSpec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case computespec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int32(value.Int64)
		case computespec.FieldCore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field core", values[i])
			} else if value.Valid {
				cs.Core = int(value.Int64)
			}
		case computespec.FieldMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory", values[i])
			} else if value.Valid {
				cs.Memory = int(value.Int64)
			}
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ComputeSpec.
// This includes values selected through modifiers, order, etc.
func (cs *ComputeSpec) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// Update returns a builder for updating this ComputeSpec.
// Note that you need to call ComputeSpec.Unwrap() before calling this method if this ComputeSpec
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *ComputeSpec) Update() *ComputeSpecUpdateOne {
	return NewComputeSpecClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the ComputeSpec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *ComputeSpec) Unwrap() *ComputeSpec {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: ComputeSpec is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *ComputeSpec) String() string {
	var builder strings.Builder
	builder.WriteString("ComputeSpec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cs.ID))
	builder.WriteString("core=")
	builder.WriteString(fmt.Sprintf("%v", cs.Core))
	builder.WriteString(", ")
	builder.WriteString("memory=")
	builder.WriteString(fmt.Sprintf("%v", cs.Memory))
	builder.WriteByte(')')
	return builder.String()
}

// ComputeSpecs is a parsable slice of ComputeSpec.
type ComputeSpecs []*ComputeSpec
