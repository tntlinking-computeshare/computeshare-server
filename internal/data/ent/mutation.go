// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/alipayorderrollback"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeimage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycle"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleorder"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerecharge"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleredeemcode"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerenewal"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycletransaction"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/employee"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gateway"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3bucket"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3user"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storageprovider"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/task"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/user"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/userresourcelimit"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAgent                 = "Agent"
	TypeAlipayOrderRollback   = "AlipayOrderRollback"
	TypeComputeImage          = "ComputeImage"
	TypeComputeInstance       = "ComputeInstance"
	TypeComputeSpec           = "ComputeSpec"
	TypeComputeSpecPrice      = "ComputeSpecPrice"
	TypeCycle                 = "Cycle"
	TypeCycleOrder            = "CycleOrder"
	TypeCycleRecharge         = "CycleRecharge"
	TypeCycleRedeemCode       = "CycleRedeemCode"
	TypeCycleRenewal          = "CycleRenewal"
	TypeCycleTransaction      = "CycleTransaction"
	TypeDomainBinding         = "DomainBinding"
	TypeEmployee              = "Employee"
	TypeGateway               = "Gateway"
	TypeGatewayPort           = "GatewayPort"
	TypeNetworkMapping        = "NetworkMapping"
	TypeS3Bucket              = "S3Bucket"
	TypeS3User                = "S3User"
	TypeScript                = "Script"
	TypeScriptExecutionRecord = "ScriptExecutionRecord"
	TypeStorage               = "Storage"
	TypeStorageProvider       = "StorageProvider"
	TypeTask                  = "Task"
	TypeUser                  = "User"
	TypeUserResourceLimit     = "UserResourceLimit"
)

// AgentMutation represents an operation that mutates the Agent nodes in the graph.
type AgentMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	mac                *string
	active             *bool
	last_update_time   *time.Time
	hostname           *string
	total_cpu          *int32
	addtotal_cpu       *int32
	total_memory       *int32
	addtotal_memory    *int32
	occupied_cpu       *int32
	addoccupied_cpu    *int32
	occupied_memory    *int32
	addoccupied_memory *int32
	ip                 *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Agent, error)
	predicates         []predicate.Agent
}

var _ ent.Mutation = (*AgentMutation)(nil)

// agentOption allows management of the mutation configuration using functional options.
type agentOption func(*AgentMutation)

// newAgentMutation creates new mutation for the Agent entity.
func newAgentMutation(c config, op Op, opts ...agentOption) *AgentMutation {
	m := &AgentMutation{
		config:        c,
		op:            op,
		typ:           TypeAgent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAgentID sets the ID field of the mutation.
func withAgentID(id uuid.UUID) agentOption {
	return func(m *AgentMutation) {
		var (
			err   error
			once  sync.Once
			value *Agent
		)
		m.oldValue = func(ctx context.Context) (*Agent, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Agent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAgent sets the old Agent of the mutation.
func withAgent(node *Agent) agentOption {
	return func(m *AgentMutation) {
		m.oldValue = func(context.Context) (*Agent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AgentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AgentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Agent entities.
func (m *AgentMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AgentMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AgentMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Agent.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMAC sets the "mac" field.
func (m *AgentMutation) SetMAC(s string) {
	m.mac = &s
}

// MAC returns the value of the "mac" field in the mutation.
func (m *AgentMutation) MAC() (r string, exists bool) {
	v := m.mac
	if v == nil {
		return
	}
	return *v, true
}

// OldMAC returns the old "mac" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldMAC(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMAC is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMAC requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMAC: %w", err)
	}
	return oldValue.MAC, nil
}

// ResetMAC resets all changes to the "mac" field.
func (m *AgentMutation) ResetMAC() {
	m.mac = nil
}

// SetActive sets the "active" field.
func (m *AgentMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *AgentMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *AgentMutation) ResetActive() {
	m.active = nil
}

// SetLastUpdateTime sets the "last_update_time" field.
func (m *AgentMutation) SetLastUpdateTime(t time.Time) {
	m.last_update_time = &t
}

// LastUpdateTime returns the value of the "last_update_time" field in the mutation.
func (m *AgentMutation) LastUpdateTime() (r time.Time, exists bool) {
	v := m.last_update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUpdateTime returns the old "last_update_time" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldLastUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUpdateTime: %w", err)
	}
	return oldValue.LastUpdateTime, nil
}

// ResetLastUpdateTime resets all changes to the "last_update_time" field.
func (m *AgentMutation) ResetLastUpdateTime() {
	m.last_update_time = nil
}

// SetHostname sets the "hostname" field.
func (m *AgentMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *AgentMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldHostname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ResetHostname resets all changes to the "hostname" field.
func (m *AgentMutation) ResetHostname() {
	m.hostname = nil
}

// SetTotalCPU sets the "total_cpu" field.
func (m *AgentMutation) SetTotalCPU(i int32) {
	m.total_cpu = &i
	m.addtotal_cpu = nil
}

// TotalCPU returns the value of the "total_cpu" field in the mutation.
func (m *AgentMutation) TotalCPU() (r int32, exists bool) {
	v := m.total_cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalCPU returns the old "total_cpu" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldTotalCPU(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalCPU: %w", err)
	}
	return oldValue.TotalCPU, nil
}

// AddTotalCPU adds i to the "total_cpu" field.
func (m *AgentMutation) AddTotalCPU(i int32) {
	if m.addtotal_cpu != nil {
		*m.addtotal_cpu += i
	} else {
		m.addtotal_cpu = &i
	}
}

// AddedTotalCPU returns the value that was added to the "total_cpu" field in this mutation.
func (m *AgentMutation) AddedTotalCPU() (r int32, exists bool) {
	v := m.addtotal_cpu
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalCPU resets all changes to the "total_cpu" field.
func (m *AgentMutation) ResetTotalCPU() {
	m.total_cpu = nil
	m.addtotal_cpu = nil
}

// SetTotalMemory sets the "total_memory" field.
func (m *AgentMutation) SetTotalMemory(i int32) {
	m.total_memory = &i
	m.addtotal_memory = nil
}

// TotalMemory returns the value of the "total_memory" field in the mutation.
func (m *AgentMutation) TotalMemory() (r int32, exists bool) {
	v := m.total_memory
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalMemory returns the old "total_memory" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldTotalMemory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalMemory: %w", err)
	}
	return oldValue.TotalMemory, nil
}

// AddTotalMemory adds i to the "total_memory" field.
func (m *AgentMutation) AddTotalMemory(i int32) {
	if m.addtotal_memory != nil {
		*m.addtotal_memory += i
	} else {
		m.addtotal_memory = &i
	}
}

// AddedTotalMemory returns the value that was added to the "total_memory" field in this mutation.
func (m *AgentMutation) AddedTotalMemory() (r int32, exists bool) {
	v := m.addtotal_memory
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalMemory resets all changes to the "total_memory" field.
func (m *AgentMutation) ResetTotalMemory() {
	m.total_memory = nil
	m.addtotal_memory = nil
}

// SetOccupiedCPU sets the "occupied_cpu" field.
func (m *AgentMutation) SetOccupiedCPU(i int32) {
	m.occupied_cpu = &i
	m.addoccupied_cpu = nil
}

// OccupiedCPU returns the value of the "occupied_cpu" field in the mutation.
func (m *AgentMutation) OccupiedCPU() (r int32, exists bool) {
	v := m.occupied_cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupiedCPU returns the old "occupied_cpu" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldOccupiedCPU(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupiedCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupiedCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupiedCPU: %w", err)
	}
	return oldValue.OccupiedCPU, nil
}

// AddOccupiedCPU adds i to the "occupied_cpu" field.
func (m *AgentMutation) AddOccupiedCPU(i int32) {
	if m.addoccupied_cpu != nil {
		*m.addoccupied_cpu += i
	} else {
		m.addoccupied_cpu = &i
	}
}

// AddedOccupiedCPU returns the value that was added to the "occupied_cpu" field in this mutation.
func (m *AgentMutation) AddedOccupiedCPU() (r int32, exists bool) {
	v := m.addoccupied_cpu
	if v == nil {
		return
	}
	return *v, true
}

// ResetOccupiedCPU resets all changes to the "occupied_cpu" field.
func (m *AgentMutation) ResetOccupiedCPU() {
	m.occupied_cpu = nil
	m.addoccupied_cpu = nil
}

// SetOccupiedMemory sets the "occupied_memory" field.
func (m *AgentMutation) SetOccupiedMemory(i int32) {
	m.occupied_memory = &i
	m.addoccupied_memory = nil
}

// OccupiedMemory returns the value of the "occupied_memory" field in the mutation.
func (m *AgentMutation) OccupiedMemory() (r int32, exists bool) {
	v := m.occupied_memory
	if v == nil {
		return
	}
	return *v, true
}

// OldOccupiedMemory returns the old "occupied_memory" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldOccupiedMemory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOccupiedMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOccupiedMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOccupiedMemory: %w", err)
	}
	return oldValue.OccupiedMemory, nil
}

// AddOccupiedMemory adds i to the "occupied_memory" field.
func (m *AgentMutation) AddOccupiedMemory(i int32) {
	if m.addoccupied_memory != nil {
		*m.addoccupied_memory += i
	} else {
		m.addoccupied_memory = &i
	}
}

// AddedOccupiedMemory returns the value that was added to the "occupied_memory" field in this mutation.
func (m *AgentMutation) AddedOccupiedMemory() (r int32, exists bool) {
	v := m.addoccupied_memory
	if v == nil {
		return
	}
	return *v, true
}

// ResetOccupiedMemory resets all changes to the "occupied_memory" field.
func (m *AgentMutation) ResetOccupiedMemory() {
	m.occupied_memory = nil
	m.addoccupied_memory = nil
}

// SetIP sets the "ip" field.
func (m *AgentMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *AgentMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Agent entity.
// If the Agent object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AgentMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *AgentMutation) ResetIP() {
	m.ip = nil
}

// Where appends a list predicates to the AgentMutation builder.
func (m *AgentMutation) Where(ps ...predicate.Agent) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AgentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AgentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Agent, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AgentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AgentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Agent).
func (m *AgentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AgentMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.mac != nil {
		fields = append(fields, agent.FieldMAC)
	}
	if m.active != nil {
		fields = append(fields, agent.FieldActive)
	}
	if m.last_update_time != nil {
		fields = append(fields, agent.FieldLastUpdateTime)
	}
	if m.hostname != nil {
		fields = append(fields, agent.FieldHostname)
	}
	if m.total_cpu != nil {
		fields = append(fields, agent.FieldTotalCPU)
	}
	if m.total_memory != nil {
		fields = append(fields, agent.FieldTotalMemory)
	}
	if m.occupied_cpu != nil {
		fields = append(fields, agent.FieldOccupiedCPU)
	}
	if m.occupied_memory != nil {
		fields = append(fields, agent.FieldOccupiedMemory)
	}
	if m.ip != nil {
		fields = append(fields, agent.FieldIP)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AgentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case agent.FieldMAC:
		return m.MAC()
	case agent.FieldActive:
		return m.Active()
	case agent.FieldLastUpdateTime:
		return m.LastUpdateTime()
	case agent.FieldHostname:
		return m.Hostname()
	case agent.FieldTotalCPU:
		return m.TotalCPU()
	case agent.FieldTotalMemory:
		return m.TotalMemory()
	case agent.FieldOccupiedCPU:
		return m.OccupiedCPU()
	case agent.FieldOccupiedMemory:
		return m.OccupiedMemory()
	case agent.FieldIP:
		return m.IP()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AgentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case agent.FieldMAC:
		return m.OldMAC(ctx)
	case agent.FieldActive:
		return m.OldActive(ctx)
	case agent.FieldLastUpdateTime:
		return m.OldLastUpdateTime(ctx)
	case agent.FieldHostname:
		return m.OldHostname(ctx)
	case agent.FieldTotalCPU:
		return m.OldTotalCPU(ctx)
	case agent.FieldTotalMemory:
		return m.OldTotalMemory(ctx)
	case agent.FieldOccupiedCPU:
		return m.OldOccupiedCPU(ctx)
	case agent.FieldOccupiedMemory:
		return m.OldOccupiedMemory(ctx)
	case agent.FieldIP:
		return m.OldIP(ctx)
	}
	return nil, fmt.Errorf("unknown Agent field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case agent.FieldMAC:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMAC(v)
		return nil
	case agent.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case agent.FieldLastUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUpdateTime(v)
		return nil
	case agent.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case agent.FieldTotalCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalCPU(v)
		return nil
	case agent.FieldTotalMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalMemory(v)
		return nil
	case agent.FieldOccupiedCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupiedCPU(v)
		return nil
	case agent.FieldOccupiedMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOccupiedMemory(v)
		return nil
	case agent.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AgentMutation) AddedFields() []string {
	var fields []string
	if m.addtotal_cpu != nil {
		fields = append(fields, agent.FieldTotalCPU)
	}
	if m.addtotal_memory != nil {
		fields = append(fields, agent.FieldTotalMemory)
	}
	if m.addoccupied_cpu != nil {
		fields = append(fields, agent.FieldOccupiedCPU)
	}
	if m.addoccupied_memory != nil {
		fields = append(fields, agent.FieldOccupiedMemory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AgentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case agent.FieldTotalCPU:
		return m.AddedTotalCPU()
	case agent.FieldTotalMemory:
		return m.AddedTotalMemory()
	case agent.FieldOccupiedCPU:
		return m.AddedOccupiedCPU()
	case agent.FieldOccupiedMemory:
		return m.AddedOccupiedMemory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AgentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case agent.FieldTotalCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalCPU(v)
		return nil
	case agent.FieldTotalMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalMemory(v)
		return nil
	case agent.FieldOccupiedCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOccupiedCPU(v)
		return nil
	case agent.FieldOccupiedMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOccupiedMemory(v)
		return nil
	}
	return fmt.Errorf("unknown Agent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AgentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AgentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AgentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Agent nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AgentMutation) ResetField(name string) error {
	switch name {
	case agent.FieldMAC:
		m.ResetMAC()
		return nil
	case agent.FieldActive:
		m.ResetActive()
		return nil
	case agent.FieldLastUpdateTime:
		m.ResetLastUpdateTime()
		return nil
	case agent.FieldHostname:
		m.ResetHostname()
		return nil
	case agent.FieldTotalCPU:
		m.ResetTotalCPU()
		return nil
	case agent.FieldTotalMemory:
		m.ResetTotalMemory()
		return nil
	case agent.FieldOccupiedCPU:
		m.ResetOccupiedCPU()
		return nil
	case agent.FieldOccupiedMemory:
		m.ResetOccupiedMemory()
		return nil
	case agent.FieldIP:
		m.ResetIP()
		return nil
	}
	return fmt.Errorf("unknown Agent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AgentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AgentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AgentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AgentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AgentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AgentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AgentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Agent unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AgentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Agent edge %s", name)
}

// AlipayOrderRollbackMutation represents an operation that mutates the AlipayOrderRollback nodes in the graph.
type AlipayOrderRollbackMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	notify_id           *string
	notify_type         *string
	notify_time         *string
	charset             *string
	version             *string
	sign_type           *string
	sign                *string
	fund_bill_list      *string
	receipt_amount      *string
	invoice_amount      *string
	buyer_pay_amount    *string
	point_amount        *string
	voucher_detail_list *string
	passback_params     *string
	trade_no            *string
	app_id              *string
	out_trade_no        *string
	out_biz_no          *string
	buyer_id            *string
	seller_id           *string
	trade_status        *string
	total_amount        *string
	refund_fee          *string
	subject             *string
	body                *string
	gmt_create          *string
	gmt_payment         *string
	gmt_close           *string
	create_time         *time.Time
	update_time         *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*AlipayOrderRollback, error)
	predicates          []predicate.AlipayOrderRollback
}

var _ ent.Mutation = (*AlipayOrderRollbackMutation)(nil)

// alipayorderrollbackOption allows management of the mutation configuration using functional options.
type alipayorderrollbackOption func(*AlipayOrderRollbackMutation)

// newAlipayOrderRollbackMutation creates new mutation for the AlipayOrderRollback entity.
func newAlipayOrderRollbackMutation(c config, op Op, opts ...alipayorderrollbackOption) *AlipayOrderRollbackMutation {
	m := &AlipayOrderRollbackMutation{
		config:        c,
		op:            op,
		typ:           TypeAlipayOrderRollback,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAlipayOrderRollbackID sets the ID field of the mutation.
func withAlipayOrderRollbackID(id int) alipayorderrollbackOption {
	return func(m *AlipayOrderRollbackMutation) {
		var (
			err   error
			once  sync.Once
			value *AlipayOrderRollback
		)
		m.oldValue = func(ctx context.Context) (*AlipayOrderRollback, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AlipayOrderRollback.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAlipayOrderRollback sets the old AlipayOrderRollback of the mutation.
func withAlipayOrderRollback(node *AlipayOrderRollback) alipayorderrollbackOption {
	return func(m *AlipayOrderRollbackMutation) {
		m.oldValue = func(context.Context) (*AlipayOrderRollback, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AlipayOrderRollbackMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AlipayOrderRollbackMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AlipayOrderRollbackMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AlipayOrderRollbackMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().AlipayOrderRollback.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNotifyID sets the "notify_id" field.
func (m *AlipayOrderRollbackMutation) SetNotifyID(s string) {
	m.notify_id = &s
}

// NotifyID returns the value of the "notify_id" field in the mutation.
func (m *AlipayOrderRollbackMutation) NotifyID() (r string, exists bool) {
	v := m.notify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifyID returns the old "notify_id" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldNotifyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifyID: %w", err)
	}
	return oldValue.NotifyID, nil
}

// ResetNotifyID resets all changes to the "notify_id" field.
func (m *AlipayOrderRollbackMutation) ResetNotifyID() {
	m.notify_id = nil
}

// SetNotifyType sets the "notify_type" field.
func (m *AlipayOrderRollbackMutation) SetNotifyType(s string) {
	m.notify_type = &s
}

// NotifyType returns the value of the "notify_type" field in the mutation.
func (m *AlipayOrderRollbackMutation) NotifyType() (r string, exists bool) {
	v := m.notify_type
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifyType returns the old "notify_type" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldNotifyType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifyType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifyType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifyType: %w", err)
	}
	return oldValue.NotifyType, nil
}

// ResetNotifyType resets all changes to the "notify_type" field.
func (m *AlipayOrderRollbackMutation) ResetNotifyType() {
	m.notify_type = nil
}

// SetNotifyTime sets the "notify_time" field.
func (m *AlipayOrderRollbackMutation) SetNotifyTime(s string) {
	m.notify_time = &s
}

// NotifyTime returns the value of the "notify_time" field in the mutation.
func (m *AlipayOrderRollbackMutation) NotifyTime() (r string, exists bool) {
	v := m.notify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldNotifyTime returns the old "notify_time" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldNotifyTime(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotifyTime: %w", err)
	}
	return oldValue.NotifyTime, nil
}

// ResetNotifyTime resets all changes to the "notify_time" field.
func (m *AlipayOrderRollbackMutation) ResetNotifyTime() {
	m.notify_time = nil
}

// SetCharset sets the "charset" field.
func (m *AlipayOrderRollbackMutation) SetCharset(s string) {
	m.charset = &s
}

// Charset returns the value of the "charset" field in the mutation.
func (m *AlipayOrderRollbackMutation) Charset() (r string, exists bool) {
	v := m.charset
	if v == nil {
		return
	}
	return *v, true
}

// OldCharset returns the old "charset" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldCharset(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCharset is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCharset requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCharset: %w", err)
	}
	return oldValue.Charset, nil
}

// ResetCharset resets all changes to the "charset" field.
func (m *AlipayOrderRollbackMutation) ResetCharset() {
	m.charset = nil
}

// SetVersion sets the "version" field.
func (m *AlipayOrderRollbackMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *AlipayOrderRollbackMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *AlipayOrderRollbackMutation) ResetVersion() {
	m.version = nil
}

// SetSignType sets the "sign_type" field.
func (m *AlipayOrderRollbackMutation) SetSignType(s string) {
	m.sign_type = &s
}

// SignType returns the value of the "sign_type" field in the mutation.
func (m *AlipayOrderRollbackMutation) SignType() (r string, exists bool) {
	v := m.sign_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSignType returns the old "sign_type" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldSignType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignType: %w", err)
	}
	return oldValue.SignType, nil
}

// ResetSignType resets all changes to the "sign_type" field.
func (m *AlipayOrderRollbackMutation) ResetSignType() {
	m.sign_type = nil
}

// SetSign sets the "sign" field.
func (m *AlipayOrderRollbackMutation) SetSign(s string) {
	m.sign = &s
}

// Sign returns the value of the "sign" field in the mutation.
func (m *AlipayOrderRollbackMutation) Sign() (r string, exists bool) {
	v := m.sign
	if v == nil {
		return
	}
	return *v, true
}

// OldSign returns the old "sign" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldSign(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSign is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSign requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSign: %w", err)
	}
	return oldValue.Sign, nil
}

// ResetSign resets all changes to the "sign" field.
func (m *AlipayOrderRollbackMutation) ResetSign() {
	m.sign = nil
}

// SetFundBillList sets the "fund_bill_list" field.
func (m *AlipayOrderRollbackMutation) SetFundBillList(s string) {
	m.fund_bill_list = &s
}

// FundBillList returns the value of the "fund_bill_list" field in the mutation.
func (m *AlipayOrderRollbackMutation) FundBillList() (r string, exists bool) {
	v := m.fund_bill_list
	if v == nil {
		return
	}
	return *v, true
}

// OldFundBillList returns the old "fund_bill_list" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldFundBillList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFundBillList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFundBillList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFundBillList: %w", err)
	}
	return oldValue.FundBillList, nil
}

// ResetFundBillList resets all changes to the "fund_bill_list" field.
func (m *AlipayOrderRollbackMutation) ResetFundBillList() {
	m.fund_bill_list = nil
}

// SetReceiptAmount sets the "receipt_amount" field.
func (m *AlipayOrderRollbackMutation) SetReceiptAmount(s string) {
	m.receipt_amount = &s
}

// ReceiptAmount returns the value of the "receipt_amount" field in the mutation.
func (m *AlipayOrderRollbackMutation) ReceiptAmount() (r string, exists bool) {
	v := m.receipt_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldReceiptAmount returns the old "receipt_amount" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldReceiptAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReceiptAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReceiptAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReceiptAmount: %w", err)
	}
	return oldValue.ReceiptAmount, nil
}

// ResetReceiptAmount resets all changes to the "receipt_amount" field.
func (m *AlipayOrderRollbackMutation) ResetReceiptAmount() {
	m.receipt_amount = nil
}

// SetInvoiceAmount sets the "invoice_amount" field.
func (m *AlipayOrderRollbackMutation) SetInvoiceAmount(s string) {
	m.invoice_amount = &s
}

// InvoiceAmount returns the value of the "invoice_amount" field in the mutation.
func (m *AlipayOrderRollbackMutation) InvoiceAmount() (r string, exists bool) {
	v := m.invoice_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldInvoiceAmount returns the old "invoice_amount" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldInvoiceAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvoiceAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvoiceAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvoiceAmount: %w", err)
	}
	return oldValue.InvoiceAmount, nil
}

// ResetInvoiceAmount resets all changes to the "invoice_amount" field.
func (m *AlipayOrderRollbackMutation) ResetInvoiceAmount() {
	m.invoice_amount = nil
}

// SetBuyerPayAmount sets the "buyer_pay_amount" field.
func (m *AlipayOrderRollbackMutation) SetBuyerPayAmount(s string) {
	m.buyer_pay_amount = &s
}

// BuyerPayAmount returns the value of the "buyer_pay_amount" field in the mutation.
func (m *AlipayOrderRollbackMutation) BuyerPayAmount() (r string, exists bool) {
	v := m.buyer_pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyerPayAmount returns the old "buyer_pay_amount" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldBuyerPayAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuyerPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuyerPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyerPayAmount: %w", err)
	}
	return oldValue.BuyerPayAmount, nil
}

// ResetBuyerPayAmount resets all changes to the "buyer_pay_amount" field.
func (m *AlipayOrderRollbackMutation) ResetBuyerPayAmount() {
	m.buyer_pay_amount = nil
}

// SetPointAmount sets the "point_amount" field.
func (m *AlipayOrderRollbackMutation) SetPointAmount(s string) {
	m.point_amount = &s
}

// PointAmount returns the value of the "point_amount" field in the mutation.
func (m *AlipayOrderRollbackMutation) PointAmount() (r string, exists bool) {
	v := m.point_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPointAmount returns the old "point_amount" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldPointAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointAmount: %w", err)
	}
	return oldValue.PointAmount, nil
}

// ResetPointAmount resets all changes to the "point_amount" field.
func (m *AlipayOrderRollbackMutation) ResetPointAmount() {
	m.point_amount = nil
}

// SetVoucherDetailList sets the "voucher_detail_list" field.
func (m *AlipayOrderRollbackMutation) SetVoucherDetailList(s string) {
	m.voucher_detail_list = &s
}

// VoucherDetailList returns the value of the "voucher_detail_list" field in the mutation.
func (m *AlipayOrderRollbackMutation) VoucherDetailList() (r string, exists bool) {
	v := m.voucher_detail_list
	if v == nil {
		return
	}
	return *v, true
}

// OldVoucherDetailList returns the old "voucher_detail_list" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldVoucherDetailList(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoucherDetailList is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoucherDetailList requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoucherDetailList: %w", err)
	}
	return oldValue.VoucherDetailList, nil
}

// ResetVoucherDetailList resets all changes to the "voucher_detail_list" field.
func (m *AlipayOrderRollbackMutation) ResetVoucherDetailList() {
	m.voucher_detail_list = nil
}

// SetPassbackParams sets the "passback_params" field.
func (m *AlipayOrderRollbackMutation) SetPassbackParams(s string) {
	m.passback_params = &s
}

// PassbackParams returns the value of the "passback_params" field in the mutation.
func (m *AlipayOrderRollbackMutation) PassbackParams() (r string, exists bool) {
	v := m.passback_params
	if v == nil {
		return
	}
	return *v, true
}

// OldPassbackParams returns the old "passback_params" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldPassbackParams(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassbackParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassbackParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassbackParams: %w", err)
	}
	return oldValue.PassbackParams, nil
}

// ResetPassbackParams resets all changes to the "passback_params" field.
func (m *AlipayOrderRollbackMutation) ResetPassbackParams() {
	m.passback_params = nil
}

// SetTradeNo sets the "trade_no" field.
func (m *AlipayOrderRollbackMutation) SetTradeNo(s string) {
	m.trade_no = &s
}

// TradeNo returns the value of the "trade_no" field in the mutation.
func (m *AlipayOrderRollbackMutation) TradeNo() (r string, exists bool) {
	v := m.trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeNo returns the old "trade_no" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeNo: %w", err)
	}
	return oldValue.TradeNo, nil
}

// ResetTradeNo resets all changes to the "trade_no" field.
func (m *AlipayOrderRollbackMutation) ResetTradeNo() {
	m.trade_no = nil
}

// SetAppID sets the "app_id" field.
func (m *AlipayOrderRollbackMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *AlipayOrderRollbackMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *AlipayOrderRollbackMutation) ResetAppID() {
	m.app_id = nil
}

// SetOutTradeNo sets the "out_trade_no" field.
func (m *AlipayOrderRollbackMutation) SetOutTradeNo(s string) {
	m.out_trade_no = &s
}

// OutTradeNo returns the value of the "out_trade_no" field in the mutation.
func (m *AlipayOrderRollbackMutation) OutTradeNo() (r string, exists bool) {
	v := m.out_trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOutTradeNo returns the old "out_trade_no" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldOutTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutTradeNo: %w", err)
	}
	return oldValue.OutTradeNo, nil
}

// ResetOutTradeNo resets all changes to the "out_trade_no" field.
func (m *AlipayOrderRollbackMutation) ResetOutTradeNo() {
	m.out_trade_no = nil
}

// SetOutBizNo sets the "out_biz_no" field.
func (m *AlipayOrderRollbackMutation) SetOutBizNo(s string) {
	m.out_biz_no = &s
}

// OutBizNo returns the value of the "out_biz_no" field in the mutation.
func (m *AlipayOrderRollbackMutation) OutBizNo() (r string, exists bool) {
	v := m.out_biz_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOutBizNo returns the old "out_biz_no" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldOutBizNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutBizNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutBizNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutBizNo: %w", err)
	}
	return oldValue.OutBizNo, nil
}

// ResetOutBizNo resets all changes to the "out_biz_no" field.
func (m *AlipayOrderRollbackMutation) ResetOutBizNo() {
	m.out_biz_no = nil
}

// SetBuyerID sets the "buyer_id" field.
func (m *AlipayOrderRollbackMutation) SetBuyerID(s string) {
	m.buyer_id = &s
}

// BuyerID returns the value of the "buyer_id" field in the mutation.
func (m *AlipayOrderRollbackMutation) BuyerID() (r string, exists bool) {
	v := m.buyer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyerID returns the old "buyer_id" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldBuyerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuyerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuyerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyerID: %w", err)
	}
	return oldValue.BuyerID, nil
}

// ResetBuyerID resets all changes to the "buyer_id" field.
func (m *AlipayOrderRollbackMutation) ResetBuyerID() {
	m.buyer_id = nil
}

// SetSellerID sets the "seller_id" field.
func (m *AlipayOrderRollbackMutation) SetSellerID(s string) {
	m.seller_id = &s
}

// SellerID returns the value of the "seller_id" field in the mutation.
func (m *AlipayOrderRollbackMutation) SellerID() (r string, exists bool) {
	v := m.seller_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSellerID returns the old "seller_id" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldSellerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSellerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSellerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSellerID: %w", err)
	}
	return oldValue.SellerID, nil
}

// ResetSellerID resets all changes to the "seller_id" field.
func (m *AlipayOrderRollbackMutation) ResetSellerID() {
	m.seller_id = nil
}

// SetTradeStatus sets the "trade_status" field.
func (m *AlipayOrderRollbackMutation) SetTradeStatus(s string) {
	m.trade_status = &s
}

// TradeStatus returns the value of the "trade_status" field in the mutation.
func (m *AlipayOrderRollbackMutation) TradeStatus() (r string, exists bool) {
	v := m.trade_status
	if v == nil {
		return
	}
	return *v, true
}

// OldTradeStatus returns the old "trade_status" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldTradeStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTradeStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTradeStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTradeStatus: %w", err)
	}
	return oldValue.TradeStatus, nil
}

// ResetTradeStatus resets all changes to the "trade_status" field.
func (m *AlipayOrderRollbackMutation) ResetTradeStatus() {
	m.trade_status = nil
}

// SetTotalAmount sets the "total_amount" field.
func (m *AlipayOrderRollbackMutation) SetTotalAmount(s string) {
	m.total_amount = &s
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *AlipayOrderRollbackMutation) TotalAmount() (r string, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldTotalAmount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *AlipayOrderRollbackMutation) ResetTotalAmount() {
	m.total_amount = nil
}

// SetRefundFee sets the "refund_fee" field.
func (m *AlipayOrderRollbackMutation) SetRefundFee(s string) {
	m.refund_fee = &s
}

// RefundFee returns the value of the "refund_fee" field in the mutation.
func (m *AlipayOrderRollbackMutation) RefundFee() (r string, exists bool) {
	v := m.refund_fee
	if v == nil {
		return
	}
	return *v, true
}

// OldRefundFee returns the old "refund_fee" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldRefundFee(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefundFee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefundFee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRefundFee: %w", err)
	}
	return oldValue.RefundFee, nil
}

// ResetRefundFee resets all changes to the "refund_fee" field.
func (m *AlipayOrderRollbackMutation) ResetRefundFee() {
	m.refund_fee = nil
}

// SetSubject sets the "subject" field.
func (m *AlipayOrderRollbackMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the value of the "subject" field in the mutation.
func (m *AlipayOrderRollbackMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old "subject" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubject is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject resets all changes to the "subject" field.
func (m *AlipayOrderRollbackMutation) ResetSubject() {
	m.subject = nil
}

// SetBody sets the "body" field.
func (m *AlipayOrderRollbackMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *AlipayOrderRollbackMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *AlipayOrderRollbackMutation) ResetBody() {
	m.body = nil
}

// SetGmtCreate sets the "gmt_create" field.
func (m *AlipayOrderRollbackMutation) SetGmtCreate(s string) {
	m.gmt_create = &s
}

// GmtCreate returns the value of the "gmt_create" field in the mutation.
func (m *AlipayOrderRollbackMutation) GmtCreate() (r string, exists bool) {
	v := m.gmt_create
	if v == nil {
		return
	}
	return *v, true
}

// OldGmtCreate returns the old "gmt_create" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldGmtCreate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGmtCreate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGmtCreate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGmtCreate: %w", err)
	}
	return oldValue.GmtCreate, nil
}

// ResetGmtCreate resets all changes to the "gmt_create" field.
func (m *AlipayOrderRollbackMutation) ResetGmtCreate() {
	m.gmt_create = nil
}

// SetGmtPayment sets the "gmt_payment" field.
func (m *AlipayOrderRollbackMutation) SetGmtPayment(s string) {
	m.gmt_payment = &s
}

// GmtPayment returns the value of the "gmt_payment" field in the mutation.
func (m *AlipayOrderRollbackMutation) GmtPayment() (r string, exists bool) {
	v := m.gmt_payment
	if v == nil {
		return
	}
	return *v, true
}

// OldGmtPayment returns the old "gmt_payment" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldGmtPayment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGmtPayment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGmtPayment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGmtPayment: %w", err)
	}
	return oldValue.GmtPayment, nil
}

// ResetGmtPayment resets all changes to the "gmt_payment" field.
func (m *AlipayOrderRollbackMutation) ResetGmtPayment() {
	m.gmt_payment = nil
}

// SetGmtClose sets the "gmt_close" field.
func (m *AlipayOrderRollbackMutation) SetGmtClose(s string) {
	m.gmt_close = &s
}

// GmtClose returns the value of the "gmt_close" field in the mutation.
func (m *AlipayOrderRollbackMutation) GmtClose() (r string, exists bool) {
	v := m.gmt_close
	if v == nil {
		return
	}
	return *v, true
}

// OldGmtClose returns the old "gmt_close" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldGmtClose(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGmtClose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGmtClose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGmtClose: %w", err)
	}
	return oldValue.GmtClose, nil
}

// ResetGmtClose resets all changes to the "gmt_close" field.
func (m *AlipayOrderRollbackMutation) ResetGmtClose() {
	m.gmt_close = nil
}

// SetCreateTime sets the "create_time" field.
func (m *AlipayOrderRollbackMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *AlipayOrderRollbackMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *AlipayOrderRollbackMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *AlipayOrderRollbackMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *AlipayOrderRollbackMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the AlipayOrderRollback entity.
// If the AlipayOrderRollback object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AlipayOrderRollbackMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *AlipayOrderRollbackMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the AlipayOrderRollbackMutation builder.
func (m *AlipayOrderRollbackMutation) Where(ps ...predicate.AlipayOrderRollback) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AlipayOrderRollbackMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AlipayOrderRollbackMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.AlipayOrderRollback, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AlipayOrderRollbackMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AlipayOrderRollbackMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (AlipayOrderRollback).
func (m *AlipayOrderRollbackMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AlipayOrderRollbackMutation) Fields() []string {
	fields := make([]string, 0, 30)
	if m.notify_id != nil {
		fields = append(fields, alipayorderrollback.FieldNotifyID)
	}
	if m.notify_type != nil {
		fields = append(fields, alipayorderrollback.FieldNotifyType)
	}
	if m.notify_time != nil {
		fields = append(fields, alipayorderrollback.FieldNotifyTime)
	}
	if m.charset != nil {
		fields = append(fields, alipayorderrollback.FieldCharset)
	}
	if m.version != nil {
		fields = append(fields, alipayorderrollback.FieldVersion)
	}
	if m.sign_type != nil {
		fields = append(fields, alipayorderrollback.FieldSignType)
	}
	if m.sign != nil {
		fields = append(fields, alipayorderrollback.FieldSign)
	}
	if m.fund_bill_list != nil {
		fields = append(fields, alipayorderrollback.FieldFundBillList)
	}
	if m.receipt_amount != nil {
		fields = append(fields, alipayorderrollback.FieldReceiptAmount)
	}
	if m.invoice_amount != nil {
		fields = append(fields, alipayorderrollback.FieldInvoiceAmount)
	}
	if m.buyer_pay_amount != nil {
		fields = append(fields, alipayorderrollback.FieldBuyerPayAmount)
	}
	if m.point_amount != nil {
		fields = append(fields, alipayorderrollback.FieldPointAmount)
	}
	if m.voucher_detail_list != nil {
		fields = append(fields, alipayorderrollback.FieldVoucherDetailList)
	}
	if m.passback_params != nil {
		fields = append(fields, alipayorderrollback.FieldPassbackParams)
	}
	if m.trade_no != nil {
		fields = append(fields, alipayorderrollback.FieldTradeNo)
	}
	if m.app_id != nil {
		fields = append(fields, alipayorderrollback.FieldAppID)
	}
	if m.out_trade_no != nil {
		fields = append(fields, alipayorderrollback.FieldOutTradeNo)
	}
	if m.out_biz_no != nil {
		fields = append(fields, alipayorderrollback.FieldOutBizNo)
	}
	if m.buyer_id != nil {
		fields = append(fields, alipayorderrollback.FieldBuyerID)
	}
	if m.seller_id != nil {
		fields = append(fields, alipayorderrollback.FieldSellerID)
	}
	if m.trade_status != nil {
		fields = append(fields, alipayorderrollback.FieldTradeStatus)
	}
	if m.total_amount != nil {
		fields = append(fields, alipayorderrollback.FieldTotalAmount)
	}
	if m.refund_fee != nil {
		fields = append(fields, alipayorderrollback.FieldRefundFee)
	}
	if m.subject != nil {
		fields = append(fields, alipayorderrollback.FieldSubject)
	}
	if m.body != nil {
		fields = append(fields, alipayorderrollback.FieldBody)
	}
	if m.gmt_create != nil {
		fields = append(fields, alipayorderrollback.FieldGmtCreate)
	}
	if m.gmt_payment != nil {
		fields = append(fields, alipayorderrollback.FieldGmtPayment)
	}
	if m.gmt_close != nil {
		fields = append(fields, alipayorderrollback.FieldGmtClose)
	}
	if m.create_time != nil {
		fields = append(fields, alipayorderrollback.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, alipayorderrollback.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AlipayOrderRollbackMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case alipayorderrollback.FieldNotifyID:
		return m.NotifyID()
	case alipayorderrollback.FieldNotifyType:
		return m.NotifyType()
	case alipayorderrollback.FieldNotifyTime:
		return m.NotifyTime()
	case alipayorderrollback.FieldCharset:
		return m.Charset()
	case alipayorderrollback.FieldVersion:
		return m.Version()
	case alipayorderrollback.FieldSignType:
		return m.SignType()
	case alipayorderrollback.FieldSign:
		return m.Sign()
	case alipayorderrollback.FieldFundBillList:
		return m.FundBillList()
	case alipayorderrollback.FieldReceiptAmount:
		return m.ReceiptAmount()
	case alipayorderrollback.FieldInvoiceAmount:
		return m.InvoiceAmount()
	case alipayorderrollback.FieldBuyerPayAmount:
		return m.BuyerPayAmount()
	case alipayorderrollback.FieldPointAmount:
		return m.PointAmount()
	case alipayorderrollback.FieldVoucherDetailList:
		return m.VoucherDetailList()
	case alipayorderrollback.FieldPassbackParams:
		return m.PassbackParams()
	case alipayorderrollback.FieldTradeNo:
		return m.TradeNo()
	case alipayorderrollback.FieldAppID:
		return m.AppID()
	case alipayorderrollback.FieldOutTradeNo:
		return m.OutTradeNo()
	case alipayorderrollback.FieldOutBizNo:
		return m.OutBizNo()
	case alipayorderrollback.FieldBuyerID:
		return m.BuyerID()
	case alipayorderrollback.FieldSellerID:
		return m.SellerID()
	case alipayorderrollback.FieldTradeStatus:
		return m.TradeStatus()
	case alipayorderrollback.FieldTotalAmount:
		return m.TotalAmount()
	case alipayorderrollback.FieldRefundFee:
		return m.RefundFee()
	case alipayorderrollback.FieldSubject:
		return m.Subject()
	case alipayorderrollback.FieldBody:
		return m.Body()
	case alipayorderrollback.FieldGmtCreate:
		return m.GmtCreate()
	case alipayorderrollback.FieldGmtPayment:
		return m.GmtPayment()
	case alipayorderrollback.FieldGmtClose:
		return m.GmtClose()
	case alipayorderrollback.FieldCreateTime:
		return m.CreateTime()
	case alipayorderrollback.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AlipayOrderRollbackMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case alipayorderrollback.FieldNotifyID:
		return m.OldNotifyID(ctx)
	case alipayorderrollback.FieldNotifyType:
		return m.OldNotifyType(ctx)
	case alipayorderrollback.FieldNotifyTime:
		return m.OldNotifyTime(ctx)
	case alipayorderrollback.FieldCharset:
		return m.OldCharset(ctx)
	case alipayorderrollback.FieldVersion:
		return m.OldVersion(ctx)
	case alipayorderrollback.FieldSignType:
		return m.OldSignType(ctx)
	case alipayorderrollback.FieldSign:
		return m.OldSign(ctx)
	case alipayorderrollback.FieldFundBillList:
		return m.OldFundBillList(ctx)
	case alipayorderrollback.FieldReceiptAmount:
		return m.OldReceiptAmount(ctx)
	case alipayorderrollback.FieldInvoiceAmount:
		return m.OldInvoiceAmount(ctx)
	case alipayorderrollback.FieldBuyerPayAmount:
		return m.OldBuyerPayAmount(ctx)
	case alipayorderrollback.FieldPointAmount:
		return m.OldPointAmount(ctx)
	case alipayorderrollback.FieldVoucherDetailList:
		return m.OldVoucherDetailList(ctx)
	case alipayorderrollback.FieldPassbackParams:
		return m.OldPassbackParams(ctx)
	case alipayorderrollback.FieldTradeNo:
		return m.OldTradeNo(ctx)
	case alipayorderrollback.FieldAppID:
		return m.OldAppID(ctx)
	case alipayorderrollback.FieldOutTradeNo:
		return m.OldOutTradeNo(ctx)
	case alipayorderrollback.FieldOutBizNo:
		return m.OldOutBizNo(ctx)
	case alipayorderrollback.FieldBuyerID:
		return m.OldBuyerID(ctx)
	case alipayorderrollback.FieldSellerID:
		return m.OldSellerID(ctx)
	case alipayorderrollback.FieldTradeStatus:
		return m.OldTradeStatus(ctx)
	case alipayorderrollback.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case alipayorderrollback.FieldRefundFee:
		return m.OldRefundFee(ctx)
	case alipayorderrollback.FieldSubject:
		return m.OldSubject(ctx)
	case alipayorderrollback.FieldBody:
		return m.OldBody(ctx)
	case alipayorderrollback.FieldGmtCreate:
		return m.OldGmtCreate(ctx)
	case alipayorderrollback.FieldGmtPayment:
		return m.OldGmtPayment(ctx)
	case alipayorderrollback.FieldGmtClose:
		return m.OldGmtClose(ctx)
	case alipayorderrollback.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case alipayorderrollback.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown AlipayOrderRollback field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlipayOrderRollbackMutation) SetField(name string, value ent.Value) error {
	switch name {
	case alipayorderrollback.FieldNotifyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifyID(v)
		return nil
	case alipayorderrollback.FieldNotifyType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifyType(v)
		return nil
	case alipayorderrollback.FieldNotifyTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotifyTime(v)
		return nil
	case alipayorderrollback.FieldCharset:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCharset(v)
		return nil
	case alipayorderrollback.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case alipayorderrollback.FieldSignType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignType(v)
		return nil
	case alipayorderrollback.FieldSign:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSign(v)
		return nil
	case alipayorderrollback.FieldFundBillList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFundBillList(v)
		return nil
	case alipayorderrollback.FieldReceiptAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReceiptAmount(v)
		return nil
	case alipayorderrollback.FieldInvoiceAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvoiceAmount(v)
		return nil
	case alipayorderrollback.FieldBuyerPayAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyerPayAmount(v)
		return nil
	case alipayorderrollback.FieldPointAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointAmount(v)
		return nil
	case alipayorderrollback.FieldVoucherDetailList:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoucherDetailList(v)
		return nil
	case alipayorderrollback.FieldPassbackParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassbackParams(v)
		return nil
	case alipayorderrollback.FieldTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeNo(v)
		return nil
	case alipayorderrollback.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case alipayorderrollback.FieldOutTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutTradeNo(v)
		return nil
	case alipayorderrollback.FieldOutBizNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutBizNo(v)
		return nil
	case alipayorderrollback.FieldBuyerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyerID(v)
		return nil
	case alipayorderrollback.FieldSellerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSellerID(v)
		return nil
	case alipayorderrollback.FieldTradeStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTradeStatus(v)
		return nil
	case alipayorderrollback.FieldTotalAmount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case alipayorderrollback.FieldRefundFee:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRefundFee(v)
		return nil
	case alipayorderrollback.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case alipayorderrollback.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case alipayorderrollback.FieldGmtCreate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGmtCreate(v)
		return nil
	case alipayorderrollback.FieldGmtPayment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGmtPayment(v)
		return nil
	case alipayorderrollback.FieldGmtClose:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGmtClose(v)
		return nil
	case alipayorderrollback.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case alipayorderrollback.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown AlipayOrderRollback field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AlipayOrderRollbackMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AlipayOrderRollbackMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AlipayOrderRollbackMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AlipayOrderRollback numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AlipayOrderRollbackMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AlipayOrderRollbackMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AlipayOrderRollbackMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AlipayOrderRollback nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AlipayOrderRollbackMutation) ResetField(name string) error {
	switch name {
	case alipayorderrollback.FieldNotifyID:
		m.ResetNotifyID()
		return nil
	case alipayorderrollback.FieldNotifyType:
		m.ResetNotifyType()
		return nil
	case alipayorderrollback.FieldNotifyTime:
		m.ResetNotifyTime()
		return nil
	case alipayorderrollback.FieldCharset:
		m.ResetCharset()
		return nil
	case alipayorderrollback.FieldVersion:
		m.ResetVersion()
		return nil
	case alipayorderrollback.FieldSignType:
		m.ResetSignType()
		return nil
	case alipayorderrollback.FieldSign:
		m.ResetSign()
		return nil
	case alipayorderrollback.FieldFundBillList:
		m.ResetFundBillList()
		return nil
	case alipayorderrollback.FieldReceiptAmount:
		m.ResetReceiptAmount()
		return nil
	case alipayorderrollback.FieldInvoiceAmount:
		m.ResetInvoiceAmount()
		return nil
	case alipayorderrollback.FieldBuyerPayAmount:
		m.ResetBuyerPayAmount()
		return nil
	case alipayorderrollback.FieldPointAmount:
		m.ResetPointAmount()
		return nil
	case alipayorderrollback.FieldVoucherDetailList:
		m.ResetVoucherDetailList()
		return nil
	case alipayorderrollback.FieldPassbackParams:
		m.ResetPassbackParams()
		return nil
	case alipayorderrollback.FieldTradeNo:
		m.ResetTradeNo()
		return nil
	case alipayorderrollback.FieldAppID:
		m.ResetAppID()
		return nil
	case alipayorderrollback.FieldOutTradeNo:
		m.ResetOutTradeNo()
		return nil
	case alipayorderrollback.FieldOutBizNo:
		m.ResetOutBizNo()
		return nil
	case alipayorderrollback.FieldBuyerID:
		m.ResetBuyerID()
		return nil
	case alipayorderrollback.FieldSellerID:
		m.ResetSellerID()
		return nil
	case alipayorderrollback.FieldTradeStatus:
		m.ResetTradeStatus()
		return nil
	case alipayorderrollback.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case alipayorderrollback.FieldRefundFee:
		m.ResetRefundFee()
		return nil
	case alipayorderrollback.FieldSubject:
		m.ResetSubject()
		return nil
	case alipayorderrollback.FieldBody:
		m.ResetBody()
		return nil
	case alipayorderrollback.FieldGmtCreate:
		m.ResetGmtCreate()
		return nil
	case alipayorderrollback.FieldGmtPayment:
		m.ResetGmtPayment()
		return nil
	case alipayorderrollback.FieldGmtClose:
		m.ResetGmtClose()
		return nil
	case alipayorderrollback.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case alipayorderrollback.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown AlipayOrderRollback field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AlipayOrderRollbackMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AlipayOrderRollbackMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AlipayOrderRollbackMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AlipayOrderRollbackMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AlipayOrderRollbackMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AlipayOrderRollbackMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AlipayOrderRollbackMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown AlipayOrderRollback unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AlipayOrderRollbackMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown AlipayOrderRollback edge %s", name)
}

// ComputeImageMutation represents an operation that mutates the ComputeImage nodes in the graph.
type ComputeImageMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	name          *string
	image         *string
	tag           *string
	port          *int32
	addport       *int32
	command       *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ComputeImage, error)
	predicates    []predicate.ComputeImage
}

var _ ent.Mutation = (*ComputeImageMutation)(nil)

// computeimageOption allows management of the mutation configuration using functional options.
type computeimageOption func(*ComputeImageMutation)

// newComputeImageMutation creates new mutation for the ComputeImage entity.
func newComputeImageMutation(c config, op Op, opts ...computeimageOption) *ComputeImageMutation {
	m := &ComputeImageMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeImage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeImageID sets the ID field of the mutation.
func withComputeImageID(id int32) computeimageOption {
	return func(m *ComputeImageMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeImage
		)
		m.oldValue = func(ctx context.Context) (*ComputeImage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeImage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeImage sets the old ComputeImage of the mutation.
func withComputeImage(node *ComputeImage) computeimageOption {
	return func(m *ComputeImageMutation) {
		m.oldValue = func(context.Context) (*ComputeImage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeImageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeImageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeImage entities.
func (m *ComputeImageMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeImageMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeImageMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeImage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ComputeImageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComputeImageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComputeImageMutation) ResetName() {
	m.name = nil
}

// SetImage sets the "image" field.
func (m *ComputeImageMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ComputeImageMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ComputeImageMutation) ResetImage() {
	m.image = nil
}

// SetTag sets the "tag" field.
func (m *ComputeImageMutation) SetTag(s string) {
	m.tag = &s
}

// Tag returns the value of the "tag" field in the mutation.
func (m *ComputeImageMutation) Tag() (r string, exists bool) {
	v := m.tag
	if v == nil {
		return
	}
	return *v, true
}

// OldTag returns the old "tag" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldTag(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTag is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTag requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTag: %w", err)
	}
	return oldValue.Tag, nil
}

// ResetTag resets all changes to the "tag" field.
func (m *ComputeImageMutation) ResetTag() {
	m.tag = nil
}

// SetPort sets the "port" field.
func (m *ComputeImageMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *ComputeImageMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *ComputeImageMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *ComputeImageMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *ComputeImageMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetCommand sets the "command" field.
func (m *ComputeImageMutation) SetCommand(s string) {
	m.command = &s
}

// Command returns the value of the "command" field in the mutation.
func (m *ComputeImageMutation) Command() (r string, exists bool) {
	v := m.command
	if v == nil {
		return
	}
	return *v, true
}

// OldCommand returns the old "command" field's value of the ComputeImage entity.
// If the ComputeImage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeImageMutation) OldCommand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCommand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCommand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCommand: %w", err)
	}
	return oldValue.Command, nil
}

// ResetCommand resets all changes to the "command" field.
func (m *ComputeImageMutation) ResetCommand() {
	m.command = nil
}

// Where appends a list predicates to the ComputeImageMutation builder.
func (m *ComputeImageMutation) Where(ps ...predicate.ComputeImage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeImageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeImageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeImage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeImageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeImageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeImage).
func (m *ComputeImageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeImageMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, computeimage.FieldName)
	}
	if m.image != nil {
		fields = append(fields, computeimage.FieldImage)
	}
	if m.tag != nil {
		fields = append(fields, computeimage.FieldTag)
	}
	if m.port != nil {
		fields = append(fields, computeimage.FieldPort)
	}
	if m.command != nil {
		fields = append(fields, computeimage.FieldCommand)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeImageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computeimage.FieldName:
		return m.Name()
	case computeimage.FieldImage:
		return m.Image()
	case computeimage.FieldTag:
		return m.Tag()
	case computeimage.FieldPort:
		return m.Port()
	case computeimage.FieldCommand:
		return m.Command()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeImageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computeimage.FieldName:
		return m.OldName(ctx)
	case computeimage.FieldImage:
		return m.OldImage(ctx)
	case computeimage.FieldTag:
		return m.OldTag(ctx)
	case computeimage.FieldPort:
		return m.OldPort(ctx)
	case computeimage.FieldCommand:
		return m.OldCommand(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeImage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeImageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computeimage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case computeimage.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case computeimage.FieldTag:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTag(v)
		return nil
	case computeimage.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case computeimage.FieldCommand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCommand(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeImage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeImageMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, computeimage.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeImageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computeimage.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeImageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computeimage.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeImage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeImageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeImageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeImageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComputeImage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeImageMutation) ResetField(name string) error {
	switch name {
	case computeimage.FieldName:
		m.ResetName()
		return nil
	case computeimage.FieldImage:
		m.ResetImage()
		return nil
	case computeimage.FieldTag:
		m.ResetTag()
		return nil
	case computeimage.FieldPort:
		m.ResetPort()
		return nil
	case computeimage.FieldCommand:
		m.ResetCommand()
		return nil
	}
	return fmt.Errorf("unknown ComputeImage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeImageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeImageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeImageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeImageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeImageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeImageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeImageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeImage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeImageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeImage edge %s", name)
}

// ComputeInstanceMutation represents an operation that mutates the ComputeInstance nodes in the graph.
type ComputeInstanceMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	owner           *string
	name            *string
	core            *int
	addcore         *int
	memory          *int
	addmemory       *int
	image           *string
	image_id        *int32
	addimage_id     *int32
	port            *string
	expiration_time *time.Time
	status          *consts.InstanceStatus
	addstatus       *consts.InstanceStatus
	container_id    *string
	agent_id        *string
	vnc_ip          *string
	vnc_port        *int32
	addvnc_port     *int32
	docker_compose  *string
	create_time     *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*ComputeInstance, error)
	predicates      []predicate.ComputeInstance
}

var _ ent.Mutation = (*ComputeInstanceMutation)(nil)

// computeinstanceOption allows management of the mutation configuration using functional options.
type computeinstanceOption func(*ComputeInstanceMutation)

// newComputeInstanceMutation creates new mutation for the ComputeInstance entity.
func newComputeInstanceMutation(c config, op Op, opts ...computeinstanceOption) *ComputeInstanceMutation {
	m := &ComputeInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeInstanceID sets the ID field of the mutation.
func withComputeInstanceID(id uuid.UUID) computeinstanceOption {
	return func(m *ComputeInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeInstance
		)
		m.oldValue = func(ctx context.Context) (*ComputeInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeInstance sets the old ComputeInstance of the mutation.
func withComputeInstance(node *ComputeInstance) computeinstanceOption {
	return func(m *ComputeInstanceMutation) {
		m.oldValue = func(context.Context) (*ComputeInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeInstance entities.
func (m *ComputeInstanceMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeInstanceMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeInstanceMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *ComputeInstanceMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *ComputeInstanceMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *ComputeInstanceMutation) ResetOwner() {
	m.owner = nil
}

// SetName sets the "name" field.
func (m *ComputeInstanceMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ComputeInstanceMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ComputeInstanceMutation) ResetName() {
	m.name = nil
}

// SetCore sets the "core" field.
func (m *ComputeInstanceMutation) SetCore(i int) {
	m.core = &i
	m.addcore = nil
}

// Core returns the value of the "core" field in the mutation.
func (m *ComputeInstanceMutation) Core() (r int, exists bool) {
	v := m.core
	if v == nil {
		return
	}
	return *v, true
}

// OldCore returns the old "core" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldCore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCore: %w", err)
	}
	return oldValue.Core, nil
}

// AddCore adds i to the "core" field.
func (m *ComputeInstanceMutation) AddCore(i int) {
	if m.addcore != nil {
		*m.addcore += i
	} else {
		m.addcore = &i
	}
}

// AddedCore returns the value that was added to the "core" field in this mutation.
func (m *ComputeInstanceMutation) AddedCore() (r int, exists bool) {
	v := m.addcore
	if v == nil {
		return
	}
	return *v, true
}

// ResetCore resets all changes to the "core" field.
func (m *ComputeInstanceMutation) ResetCore() {
	m.core = nil
	m.addcore = nil
}

// SetMemory sets the "memory" field.
func (m *ComputeInstanceMutation) SetMemory(i int) {
	m.memory = &i
	m.addmemory = nil
}

// Memory returns the value of the "memory" field in the mutation.
func (m *ComputeInstanceMutation) Memory() (r int, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldMemory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// AddMemory adds i to the "memory" field.
func (m *ComputeInstanceMutation) AddMemory(i int) {
	if m.addmemory != nil {
		*m.addmemory += i
	} else {
		m.addmemory = &i
	}
}

// AddedMemory returns the value that was added to the "memory" field in this mutation.
func (m *ComputeInstanceMutation) AddedMemory() (r int, exists bool) {
	v := m.addmemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetMemory resets all changes to the "memory" field.
func (m *ComputeInstanceMutation) ResetMemory() {
	m.memory = nil
	m.addmemory = nil
}

// SetImage sets the "image" field.
func (m *ComputeInstanceMutation) SetImage(s string) {
	m.image = &s
}

// Image returns the value of the "image" field in the mutation.
func (m *ComputeInstanceMutation) Image() (r string, exists bool) {
	v := m.image
	if v == nil {
		return
	}
	return *v, true
}

// OldImage returns the old "image" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldImage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImage: %w", err)
	}
	return oldValue.Image, nil
}

// ResetImage resets all changes to the "image" field.
func (m *ComputeInstanceMutation) ResetImage() {
	m.image = nil
}

// SetImageID sets the "image_id" field.
func (m *ComputeInstanceMutation) SetImageID(i int32) {
	m.image_id = &i
	m.addimage_id = nil
}

// ImageID returns the value of the "image_id" field in the mutation.
func (m *ComputeInstanceMutation) ImageID() (r int32, exists bool) {
	v := m.image_id
	if v == nil {
		return
	}
	return *v, true
}

// OldImageID returns the old "image_id" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldImageID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageID: %w", err)
	}
	return oldValue.ImageID, nil
}

// AddImageID adds i to the "image_id" field.
func (m *ComputeInstanceMutation) AddImageID(i int32) {
	if m.addimage_id != nil {
		*m.addimage_id += i
	} else {
		m.addimage_id = &i
	}
}

// AddedImageID returns the value that was added to the "image_id" field in this mutation.
func (m *ComputeInstanceMutation) AddedImageID() (r int32, exists bool) {
	v := m.addimage_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetImageID resets all changes to the "image_id" field.
func (m *ComputeInstanceMutation) ResetImageID() {
	m.image_id = nil
	m.addimage_id = nil
}

// SetPort sets the "port" field.
func (m *ComputeInstanceMutation) SetPort(s string) {
	m.port = &s
}

// Port returns the value of the "port" field in the mutation.
func (m *ComputeInstanceMutation) Port() (r string, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldPort(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// ClearPort clears the value of the "port" field.
func (m *ComputeInstanceMutation) ClearPort() {
	m.port = nil
	m.clearedFields[computeinstance.FieldPort] = struct{}{}
}

// PortCleared returns if the "port" field was cleared in this mutation.
func (m *ComputeInstanceMutation) PortCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldPort]
	return ok
}

// ResetPort resets all changes to the "port" field.
func (m *ComputeInstanceMutation) ResetPort() {
	m.port = nil
	delete(m.clearedFields, computeinstance.FieldPort)
}

// SetExpirationTime sets the "expiration_time" field.
func (m *ComputeInstanceMutation) SetExpirationTime(t time.Time) {
	m.expiration_time = &t
}

// ExpirationTime returns the value of the "expiration_time" field in the mutation.
func (m *ComputeInstanceMutation) ExpirationTime() (r time.Time, exists bool) {
	v := m.expiration_time
	if v == nil {
		return
	}
	return *v, true
}

// OldExpirationTime returns the old "expiration_time" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldExpirationTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpirationTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpirationTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpirationTime: %w", err)
	}
	return oldValue.ExpirationTime, nil
}

// ResetExpirationTime resets all changes to the "expiration_time" field.
func (m *ComputeInstanceMutation) ResetExpirationTime() {
	m.expiration_time = nil
}

// SetStatus sets the "status" field.
func (m *ComputeInstanceMutation) SetStatus(cs consts.InstanceStatus) {
	m.status = &cs
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *ComputeInstanceMutation) Status() (r consts.InstanceStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldStatus(ctx context.Context) (v consts.InstanceStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds cs to the "status" field.
func (m *ComputeInstanceMutation) AddStatus(cs consts.InstanceStatus) {
	if m.addstatus != nil {
		*m.addstatus += cs
	} else {
		m.addstatus = &cs
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *ComputeInstanceMutation) AddedStatus() (r consts.InstanceStatus, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *ComputeInstanceMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetContainerID sets the "container_id" field.
func (m *ComputeInstanceMutation) SetContainerID(s string) {
	m.container_id = &s
}

// ContainerID returns the value of the "container_id" field in the mutation.
func (m *ComputeInstanceMutation) ContainerID() (r string, exists bool) {
	v := m.container_id
	if v == nil {
		return
	}
	return *v, true
}

// OldContainerID returns the old "container_id" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldContainerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContainerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContainerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContainerID: %w", err)
	}
	return oldValue.ContainerID, nil
}

// ClearContainerID clears the value of the "container_id" field.
func (m *ComputeInstanceMutation) ClearContainerID() {
	m.container_id = nil
	m.clearedFields[computeinstance.FieldContainerID] = struct{}{}
}

// ContainerIDCleared returns if the "container_id" field was cleared in this mutation.
func (m *ComputeInstanceMutation) ContainerIDCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldContainerID]
	return ok
}

// ResetContainerID resets all changes to the "container_id" field.
func (m *ComputeInstanceMutation) ResetContainerID() {
	m.container_id = nil
	delete(m.clearedFields, computeinstance.FieldContainerID)
}

// SetAgentID sets the "agent_id" field.
func (m *ComputeInstanceMutation) SetAgentID(s string) {
	m.agent_id = &s
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *ComputeInstanceMutation) AgentID() (r string, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldAgentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ClearAgentID clears the value of the "agent_id" field.
func (m *ComputeInstanceMutation) ClearAgentID() {
	m.agent_id = nil
	m.clearedFields[computeinstance.FieldAgentID] = struct{}{}
}

// AgentIDCleared returns if the "agent_id" field was cleared in this mutation.
func (m *ComputeInstanceMutation) AgentIDCleared() bool {
	_, ok := m.clearedFields[computeinstance.FieldAgentID]
	return ok
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *ComputeInstanceMutation) ResetAgentID() {
	m.agent_id = nil
	delete(m.clearedFields, computeinstance.FieldAgentID)
}

// SetVncIP sets the "vnc_ip" field.
func (m *ComputeInstanceMutation) SetVncIP(s string) {
	m.vnc_ip = &s
}

// VncIP returns the value of the "vnc_ip" field in the mutation.
func (m *ComputeInstanceMutation) VncIP() (r string, exists bool) {
	v := m.vnc_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldVncIP returns the old "vnc_ip" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldVncIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVncIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVncIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVncIP: %w", err)
	}
	return oldValue.VncIP, nil
}

// ResetVncIP resets all changes to the "vnc_ip" field.
func (m *ComputeInstanceMutation) ResetVncIP() {
	m.vnc_ip = nil
}

// SetVncPort sets the "vnc_port" field.
func (m *ComputeInstanceMutation) SetVncPort(i int32) {
	m.vnc_port = &i
	m.addvnc_port = nil
}

// VncPort returns the value of the "vnc_port" field in the mutation.
func (m *ComputeInstanceMutation) VncPort() (r int32, exists bool) {
	v := m.vnc_port
	if v == nil {
		return
	}
	return *v, true
}

// OldVncPort returns the old "vnc_port" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldVncPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVncPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVncPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVncPort: %w", err)
	}
	return oldValue.VncPort, nil
}

// AddVncPort adds i to the "vnc_port" field.
func (m *ComputeInstanceMutation) AddVncPort(i int32) {
	if m.addvnc_port != nil {
		*m.addvnc_port += i
	} else {
		m.addvnc_port = &i
	}
}

// AddedVncPort returns the value that was added to the "vnc_port" field in this mutation.
func (m *ComputeInstanceMutation) AddedVncPort() (r int32, exists bool) {
	v := m.addvnc_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetVncPort resets all changes to the "vnc_port" field.
func (m *ComputeInstanceMutation) ResetVncPort() {
	m.vnc_port = nil
	m.addvnc_port = nil
}

// SetDockerCompose sets the "docker_compose" field.
func (m *ComputeInstanceMutation) SetDockerCompose(s string) {
	m.docker_compose = &s
}

// DockerCompose returns the value of the "docker_compose" field in the mutation.
func (m *ComputeInstanceMutation) DockerCompose() (r string, exists bool) {
	v := m.docker_compose
	if v == nil {
		return
	}
	return *v, true
}

// OldDockerCompose returns the old "docker_compose" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldDockerCompose(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDockerCompose is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDockerCompose requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDockerCompose: %w", err)
	}
	return oldValue.DockerCompose, nil
}

// ResetDockerCompose resets all changes to the "docker_compose" field.
func (m *ComputeInstanceMutation) ResetDockerCompose() {
	m.docker_compose = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ComputeInstanceMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ComputeInstanceMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ComputeInstance entity.
// If the ComputeInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeInstanceMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ComputeInstanceMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the ComputeInstanceMutation builder.
func (m *ComputeInstanceMutation) Where(ps ...predicate.ComputeInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeInstance).
func (m *ComputeInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeInstanceMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.owner != nil {
		fields = append(fields, computeinstance.FieldOwner)
	}
	if m.name != nil {
		fields = append(fields, computeinstance.FieldName)
	}
	if m.core != nil {
		fields = append(fields, computeinstance.FieldCore)
	}
	if m.memory != nil {
		fields = append(fields, computeinstance.FieldMemory)
	}
	if m.image != nil {
		fields = append(fields, computeinstance.FieldImage)
	}
	if m.image_id != nil {
		fields = append(fields, computeinstance.FieldImageID)
	}
	if m.port != nil {
		fields = append(fields, computeinstance.FieldPort)
	}
	if m.expiration_time != nil {
		fields = append(fields, computeinstance.FieldExpirationTime)
	}
	if m.status != nil {
		fields = append(fields, computeinstance.FieldStatus)
	}
	if m.container_id != nil {
		fields = append(fields, computeinstance.FieldContainerID)
	}
	if m.agent_id != nil {
		fields = append(fields, computeinstance.FieldAgentID)
	}
	if m.vnc_ip != nil {
		fields = append(fields, computeinstance.FieldVncIP)
	}
	if m.vnc_port != nil {
		fields = append(fields, computeinstance.FieldVncPort)
	}
	if m.docker_compose != nil {
		fields = append(fields, computeinstance.FieldDockerCompose)
	}
	if m.create_time != nil {
		fields = append(fields, computeinstance.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computeinstance.FieldOwner:
		return m.Owner()
	case computeinstance.FieldName:
		return m.Name()
	case computeinstance.FieldCore:
		return m.Core()
	case computeinstance.FieldMemory:
		return m.Memory()
	case computeinstance.FieldImage:
		return m.Image()
	case computeinstance.FieldImageID:
		return m.ImageID()
	case computeinstance.FieldPort:
		return m.Port()
	case computeinstance.FieldExpirationTime:
		return m.ExpirationTime()
	case computeinstance.FieldStatus:
		return m.Status()
	case computeinstance.FieldContainerID:
		return m.ContainerID()
	case computeinstance.FieldAgentID:
		return m.AgentID()
	case computeinstance.FieldVncIP:
		return m.VncIP()
	case computeinstance.FieldVncPort:
		return m.VncPort()
	case computeinstance.FieldDockerCompose:
		return m.DockerCompose()
	case computeinstance.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computeinstance.FieldOwner:
		return m.OldOwner(ctx)
	case computeinstance.FieldName:
		return m.OldName(ctx)
	case computeinstance.FieldCore:
		return m.OldCore(ctx)
	case computeinstance.FieldMemory:
		return m.OldMemory(ctx)
	case computeinstance.FieldImage:
		return m.OldImage(ctx)
	case computeinstance.FieldImageID:
		return m.OldImageID(ctx)
	case computeinstance.FieldPort:
		return m.OldPort(ctx)
	case computeinstance.FieldExpirationTime:
		return m.OldExpirationTime(ctx)
	case computeinstance.FieldStatus:
		return m.OldStatus(ctx)
	case computeinstance.FieldContainerID:
		return m.OldContainerID(ctx)
	case computeinstance.FieldAgentID:
		return m.OldAgentID(ctx)
	case computeinstance.FieldVncIP:
		return m.OldVncIP(ctx)
	case computeinstance.FieldVncPort:
		return m.OldVncPort(ctx)
	case computeinstance.FieldDockerCompose:
		return m.OldDockerCompose(ctx)
	case computeinstance.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computeinstance.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case computeinstance.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case computeinstance.FieldCore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCore(v)
		return nil
	case computeinstance.FieldMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	case computeinstance.FieldImage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImage(v)
		return nil
	case computeinstance.FieldImageID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageID(v)
		return nil
	case computeinstance.FieldPort:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case computeinstance.FieldExpirationTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpirationTime(v)
		return nil
	case computeinstance.FieldStatus:
		v, ok := value.(consts.InstanceStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case computeinstance.FieldContainerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContainerID(v)
		return nil
	case computeinstance.FieldAgentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case computeinstance.FieldVncIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVncIP(v)
		return nil
	case computeinstance.FieldVncPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVncPort(v)
		return nil
	case computeinstance.FieldDockerCompose:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDockerCompose(v)
		return nil
	case computeinstance.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeInstanceMutation) AddedFields() []string {
	var fields []string
	if m.addcore != nil {
		fields = append(fields, computeinstance.FieldCore)
	}
	if m.addmemory != nil {
		fields = append(fields, computeinstance.FieldMemory)
	}
	if m.addimage_id != nil {
		fields = append(fields, computeinstance.FieldImageID)
	}
	if m.addstatus != nil {
		fields = append(fields, computeinstance.FieldStatus)
	}
	if m.addvnc_port != nil {
		fields = append(fields, computeinstance.FieldVncPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeInstanceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computeinstance.FieldCore:
		return m.AddedCore()
	case computeinstance.FieldMemory:
		return m.AddedMemory()
	case computeinstance.FieldImageID:
		return m.AddedImageID()
	case computeinstance.FieldStatus:
		return m.AddedStatus()
	case computeinstance.FieldVncPort:
		return m.AddedVncPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computeinstance.FieldCore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCore(v)
		return nil
	case computeinstance.FieldMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemory(v)
		return nil
	case computeinstance.FieldImageID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddImageID(v)
		return nil
	case computeinstance.FieldStatus:
		v, ok := value.(consts.InstanceStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case computeinstance.FieldVncPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVncPort(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeInstanceMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(computeinstance.FieldPort) {
		fields = append(fields, computeinstance.FieldPort)
	}
	if m.FieldCleared(computeinstance.FieldContainerID) {
		fields = append(fields, computeinstance.FieldContainerID)
	}
	if m.FieldCleared(computeinstance.FieldAgentID) {
		fields = append(fields, computeinstance.FieldAgentID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeInstanceMutation) ClearField(name string) error {
	switch name {
	case computeinstance.FieldPort:
		m.ClearPort()
		return nil
	case computeinstance.FieldContainerID:
		m.ClearContainerID()
		return nil
	case computeinstance.FieldAgentID:
		m.ClearAgentID()
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeInstanceMutation) ResetField(name string) error {
	switch name {
	case computeinstance.FieldOwner:
		m.ResetOwner()
		return nil
	case computeinstance.FieldName:
		m.ResetName()
		return nil
	case computeinstance.FieldCore:
		m.ResetCore()
		return nil
	case computeinstance.FieldMemory:
		m.ResetMemory()
		return nil
	case computeinstance.FieldImage:
		m.ResetImage()
		return nil
	case computeinstance.FieldImageID:
		m.ResetImageID()
		return nil
	case computeinstance.FieldPort:
		m.ResetPort()
		return nil
	case computeinstance.FieldExpirationTime:
		m.ResetExpirationTime()
		return nil
	case computeinstance.FieldStatus:
		m.ResetStatus()
		return nil
	case computeinstance.FieldContainerID:
		m.ResetContainerID()
		return nil
	case computeinstance.FieldAgentID:
		m.ResetAgentID()
		return nil
	case computeinstance.FieldVncIP:
		m.ResetVncIP()
		return nil
	case computeinstance.FieldVncPort:
		m.ResetVncPort()
		return nil
	case computeinstance.FieldDockerCompose:
		m.ResetDockerCompose()
		return nil
	case computeinstance.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown ComputeInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeInstanceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeInstanceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeInstanceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeInstanceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeInstanceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeInstance edge %s", name)
}

// ComputeSpecMutation represents an operation that mutates the ComputeSpec nodes in the graph.
type ComputeSpecMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	core          *int
	addcore       *int
	memory        *int
	addmemory     *int
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*ComputeSpec, error)
	predicates    []predicate.ComputeSpec
}

var _ ent.Mutation = (*ComputeSpecMutation)(nil)

// computespecOption allows management of the mutation configuration using functional options.
type computespecOption func(*ComputeSpecMutation)

// newComputeSpecMutation creates new mutation for the ComputeSpec entity.
func newComputeSpecMutation(c config, op Op, opts ...computespecOption) *ComputeSpecMutation {
	m := &ComputeSpecMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeSpec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeSpecID sets the ID field of the mutation.
func withComputeSpecID(id int32) computespecOption {
	return func(m *ComputeSpecMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeSpec
		)
		m.oldValue = func(ctx context.Context) (*ComputeSpec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeSpec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeSpec sets the old ComputeSpec of the mutation.
func withComputeSpec(node *ComputeSpec) computespecOption {
	return func(m *ComputeSpecMutation) {
		m.oldValue = func(context.Context) (*ComputeSpec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeSpecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeSpecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeSpec entities.
func (m *ComputeSpecMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeSpecMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeSpecMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeSpec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCore sets the "core" field.
func (m *ComputeSpecMutation) SetCore(i int) {
	m.core = &i
	m.addcore = nil
}

// Core returns the value of the "core" field in the mutation.
func (m *ComputeSpecMutation) Core() (r int, exists bool) {
	v := m.core
	if v == nil {
		return
	}
	return *v, true
}

// OldCore returns the old "core" field's value of the ComputeSpec entity.
// If the ComputeSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecMutation) OldCore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCore: %w", err)
	}
	return oldValue.Core, nil
}

// AddCore adds i to the "core" field.
func (m *ComputeSpecMutation) AddCore(i int) {
	if m.addcore != nil {
		*m.addcore += i
	} else {
		m.addcore = &i
	}
}

// AddedCore returns the value that was added to the "core" field in this mutation.
func (m *ComputeSpecMutation) AddedCore() (r int, exists bool) {
	v := m.addcore
	if v == nil {
		return
	}
	return *v, true
}

// ResetCore resets all changes to the "core" field.
func (m *ComputeSpecMutation) ResetCore() {
	m.core = nil
	m.addcore = nil
}

// SetMemory sets the "memory" field.
func (m *ComputeSpecMutation) SetMemory(i int) {
	m.memory = &i
	m.addmemory = nil
}

// Memory returns the value of the "memory" field in the mutation.
func (m *ComputeSpecMutation) Memory() (r int, exists bool) {
	v := m.memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMemory returns the old "memory" field's value of the ComputeSpec entity.
// If the ComputeSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecMutation) OldMemory(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMemory: %w", err)
	}
	return oldValue.Memory, nil
}

// AddMemory adds i to the "memory" field.
func (m *ComputeSpecMutation) AddMemory(i int) {
	if m.addmemory != nil {
		*m.addmemory += i
	} else {
		m.addmemory = &i
	}
}

// AddedMemory returns the value that was added to the "memory" field in this mutation.
func (m *ComputeSpecMutation) AddedMemory() (r int, exists bool) {
	v := m.addmemory
	if v == nil {
		return
	}
	return *v, true
}

// ResetMemory resets all changes to the "memory" field.
func (m *ComputeSpecMutation) ResetMemory() {
	m.memory = nil
	m.addmemory = nil
}

// Where appends a list predicates to the ComputeSpecMutation builder.
func (m *ComputeSpecMutation) Where(ps ...predicate.ComputeSpec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeSpecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeSpecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeSpec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeSpecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeSpecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeSpec).
func (m *ComputeSpecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeSpecMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.core != nil {
		fields = append(fields, computespec.FieldCore)
	}
	if m.memory != nil {
		fields = append(fields, computespec.FieldMemory)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeSpecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computespec.FieldCore:
		return m.Core()
	case computespec.FieldMemory:
		return m.Memory()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeSpecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computespec.FieldCore:
		return m.OldCore(ctx)
	case computespec.FieldMemory:
		return m.OldMemory(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeSpec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computespec.FieldCore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCore(v)
		return nil
	case computespec.FieldMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMemory(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeSpec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeSpecMutation) AddedFields() []string {
	var fields []string
	if m.addcore != nil {
		fields = append(fields, computespec.FieldCore)
	}
	if m.addmemory != nil {
		fields = append(fields, computespec.FieldMemory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeSpecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computespec.FieldCore:
		return m.AddedCore()
	case computespec.FieldMemory:
		return m.AddedMemory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computespec.FieldCore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCore(v)
		return nil
	case computespec.FieldMemory:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMemory(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeSpec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeSpecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeSpecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeSpecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComputeSpec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeSpecMutation) ResetField(name string) error {
	switch name {
	case computespec.FieldCore:
		m.ResetCore()
		return nil
	case computespec.FieldMemory:
		m.ResetMemory()
		return nil
	}
	return fmt.Errorf("unknown ComputeSpec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeSpecMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeSpecMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeSpecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeSpecMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeSpecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeSpecMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeSpecMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeSpecMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpec edge %s", name)
}

// ComputeSpecPriceMutation represents an operation that mutates the ComputeSpecPrice nodes in the graph.
type ComputeSpecPriceMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int32
	fk_compute_spec_id    *int32
	addfk_compute_spec_id *int32
	day                   *int32
	addday                *int32
	price                 *float32
	addprice              *float32
	clearedFields         map[string]struct{}
	done                  bool
	oldValue              func(context.Context) (*ComputeSpecPrice, error)
	predicates            []predicate.ComputeSpecPrice
}

var _ ent.Mutation = (*ComputeSpecPriceMutation)(nil)

// computespecpriceOption allows management of the mutation configuration using functional options.
type computespecpriceOption func(*ComputeSpecPriceMutation)

// newComputeSpecPriceMutation creates new mutation for the ComputeSpecPrice entity.
func newComputeSpecPriceMutation(c config, op Op, opts ...computespecpriceOption) *ComputeSpecPriceMutation {
	m := &ComputeSpecPriceMutation{
		config:        c,
		op:            op,
		typ:           TypeComputeSpecPrice,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withComputeSpecPriceID sets the ID field of the mutation.
func withComputeSpecPriceID(id int32) computespecpriceOption {
	return func(m *ComputeSpecPriceMutation) {
		var (
			err   error
			once  sync.Once
			value *ComputeSpecPrice
		)
		m.oldValue = func(ctx context.Context) (*ComputeSpecPrice, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ComputeSpecPrice.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withComputeSpecPrice sets the old ComputeSpecPrice of the mutation.
func withComputeSpecPrice(node *ComputeSpecPrice) computespecpriceOption {
	return func(m *ComputeSpecPriceMutation) {
		m.oldValue = func(context.Context) (*ComputeSpecPrice, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ComputeSpecPriceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ComputeSpecPriceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ComputeSpecPrice entities.
func (m *ComputeSpecPriceMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ComputeSpecPriceMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ComputeSpecPriceMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ComputeSpecPrice.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkComputeSpecID sets the "fk_compute_spec_id" field.
func (m *ComputeSpecPriceMutation) SetFkComputeSpecID(i int32) {
	m.fk_compute_spec_id = &i
	m.addfk_compute_spec_id = nil
}

// FkComputeSpecID returns the value of the "fk_compute_spec_id" field in the mutation.
func (m *ComputeSpecPriceMutation) FkComputeSpecID() (r int32, exists bool) {
	v := m.fk_compute_spec_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkComputeSpecID returns the old "fk_compute_spec_id" field's value of the ComputeSpecPrice entity.
// If the ComputeSpecPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecPriceMutation) OldFkComputeSpecID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkComputeSpecID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkComputeSpecID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkComputeSpecID: %w", err)
	}
	return oldValue.FkComputeSpecID, nil
}

// AddFkComputeSpecID adds i to the "fk_compute_spec_id" field.
func (m *ComputeSpecPriceMutation) AddFkComputeSpecID(i int32) {
	if m.addfk_compute_spec_id != nil {
		*m.addfk_compute_spec_id += i
	} else {
		m.addfk_compute_spec_id = &i
	}
}

// AddedFkComputeSpecID returns the value that was added to the "fk_compute_spec_id" field in this mutation.
func (m *ComputeSpecPriceMutation) AddedFkComputeSpecID() (r int32, exists bool) {
	v := m.addfk_compute_spec_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFkComputeSpecID resets all changes to the "fk_compute_spec_id" field.
func (m *ComputeSpecPriceMutation) ResetFkComputeSpecID() {
	m.fk_compute_spec_id = nil
	m.addfk_compute_spec_id = nil
}

// SetDay sets the "day" field.
func (m *ComputeSpecPriceMutation) SetDay(i int32) {
	m.day = &i
	m.addday = nil
}

// Day returns the value of the "day" field in the mutation.
func (m *ComputeSpecPriceMutation) Day() (r int32, exists bool) {
	v := m.day
	if v == nil {
		return
	}
	return *v, true
}

// OldDay returns the old "day" field's value of the ComputeSpecPrice entity.
// If the ComputeSpecPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecPriceMutation) OldDay(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDay: %w", err)
	}
	return oldValue.Day, nil
}

// AddDay adds i to the "day" field.
func (m *ComputeSpecPriceMutation) AddDay(i int32) {
	if m.addday != nil {
		*m.addday += i
	} else {
		m.addday = &i
	}
}

// AddedDay returns the value that was added to the "day" field in this mutation.
func (m *ComputeSpecPriceMutation) AddedDay() (r int32, exists bool) {
	v := m.addday
	if v == nil {
		return
	}
	return *v, true
}

// ResetDay resets all changes to the "day" field.
func (m *ComputeSpecPriceMutation) ResetDay() {
	m.day = nil
	m.addday = nil
}

// SetPrice sets the "price" field.
func (m *ComputeSpecPriceMutation) SetPrice(f float32) {
	m.price = &f
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *ComputeSpecPriceMutation) Price() (r float32, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the ComputeSpecPrice entity.
// If the ComputeSpecPrice object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ComputeSpecPriceMutation) OldPrice(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds f to the "price" field.
func (m *ComputeSpecPriceMutation) AddPrice(f float32) {
	if m.addprice != nil {
		*m.addprice += f
	} else {
		m.addprice = &f
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *ComputeSpecPriceMutation) AddedPrice() (r float32, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *ComputeSpecPriceMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// Where appends a list predicates to the ComputeSpecPriceMutation builder.
func (m *ComputeSpecPriceMutation) Where(ps ...predicate.ComputeSpecPrice) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ComputeSpecPriceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ComputeSpecPriceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ComputeSpecPrice, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ComputeSpecPriceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ComputeSpecPriceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ComputeSpecPrice).
func (m *ComputeSpecPriceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ComputeSpecPriceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.fk_compute_spec_id != nil {
		fields = append(fields, computespecprice.FieldFkComputeSpecID)
	}
	if m.day != nil {
		fields = append(fields, computespecprice.FieldDay)
	}
	if m.price != nil {
		fields = append(fields, computespecprice.FieldPrice)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ComputeSpecPriceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		return m.FkComputeSpecID()
	case computespecprice.FieldDay:
		return m.Day()
	case computespecprice.FieldPrice:
		return m.Price()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ComputeSpecPriceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		return m.OldFkComputeSpecID(ctx)
	case computespecprice.FieldDay:
		return m.OldDay(ctx)
	case computespecprice.FieldPrice:
		return m.OldPrice(ctx)
	}
	return nil, fmt.Errorf("unknown ComputeSpecPrice field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecPriceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkComputeSpecID(v)
		return nil
	case computespecprice.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDay(v)
		return nil
	case computespecprice.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeSpecPrice field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ComputeSpecPriceMutation) AddedFields() []string {
	var fields []string
	if m.addfk_compute_spec_id != nil {
		fields = append(fields, computespecprice.FieldFkComputeSpecID)
	}
	if m.addday != nil {
		fields = append(fields, computespecprice.FieldDay)
	}
	if m.addprice != nil {
		fields = append(fields, computespecprice.FieldPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ComputeSpecPriceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		return m.AddedFkComputeSpecID()
	case computespecprice.FieldDay:
		return m.AddedDay()
	case computespecprice.FieldPrice:
		return m.AddedPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ComputeSpecPriceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFkComputeSpecID(v)
		return nil
	case computespecprice.FieldDay:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDay(v)
		return nil
	case computespecprice.FieldPrice:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	}
	return fmt.Errorf("unknown ComputeSpecPrice numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ComputeSpecPriceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ComputeSpecPriceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ComputeSpecPriceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ComputeSpecPrice nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ComputeSpecPriceMutation) ResetField(name string) error {
	switch name {
	case computespecprice.FieldFkComputeSpecID:
		m.ResetFkComputeSpecID()
		return nil
	case computespecprice.FieldDay:
		m.ResetDay()
		return nil
	case computespecprice.FieldPrice:
		m.ResetPrice()
		return nil
	}
	return fmt.Errorf("unknown ComputeSpecPrice field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ComputeSpecPriceMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ComputeSpecPriceMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ComputeSpecPriceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ComputeSpecPriceMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ComputeSpecPriceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ComputeSpecPriceMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ComputeSpecPriceMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpecPrice unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ComputeSpecPriceMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ComputeSpecPrice edge %s", name)
}

// CycleMutation represents an operation that mutates the Cycle nodes in the graph.
type CycleMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_user_id    *uuid.UUID
	cycle         *float64
	addcycle      *float64
	create_time   *time.Time
	update_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Cycle, error)
	predicates    []predicate.Cycle
}

var _ ent.Mutation = (*CycleMutation)(nil)

// cycleOption allows management of the mutation configuration using functional options.
type cycleOption func(*CycleMutation)

// newCycleMutation creates new mutation for the Cycle entity.
func newCycleMutation(c config, op Op, opts ...cycleOption) *CycleMutation {
	m := &CycleMutation{
		config:        c,
		op:            op,
		typ:           TypeCycle,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleID sets the ID field of the mutation.
func withCycleID(id uuid.UUID) cycleOption {
	return func(m *CycleMutation) {
		var (
			err   error
			once  sync.Once
			value *Cycle
		)
		m.oldValue = func(ctx context.Context) (*Cycle, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Cycle.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycle sets the old Cycle of the mutation.
func withCycle(node *Cycle) cycleOption {
	return func(m *CycleMutation) {
		m.oldValue = func(context.Context) (*Cycle, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Cycle entities.
func (m *CycleMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Cycle.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the Cycle entity.
// If the Cycle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetCycle sets the "cycle" field.
func (m *CycleMutation) SetCycle(f float64) {
	m.cycle = &f
	m.addcycle = nil
}

// Cycle returns the value of the "cycle" field in the mutation.
func (m *CycleMutation) Cycle() (r float64, exists bool) {
	v := m.cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldCycle returns the old "cycle" field's value of the Cycle entity.
// If the Cycle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleMutation) OldCycle(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCycle: %w", err)
	}
	return oldValue.Cycle, nil
}

// AddCycle adds f to the "cycle" field.
func (m *CycleMutation) AddCycle(f float64) {
	if m.addcycle != nil {
		*m.addcycle += f
	} else {
		m.addcycle = &f
	}
}

// AddedCycle returns the value that was added to the "cycle" field in this mutation.
func (m *CycleMutation) AddedCycle() (r float64, exists bool) {
	v := m.addcycle
	if v == nil {
		return
	}
	return *v, true
}

// ResetCycle resets all changes to the "cycle" field.
func (m *CycleMutation) ResetCycle() {
	m.cycle = nil
	m.addcycle = nil
}

// SetCreateTime sets the "create_time" field.
func (m *CycleMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CycleMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Cycle entity.
// If the Cycle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CycleMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *CycleMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CycleMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Cycle entity.
// If the Cycle object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CycleMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the CycleMutation builder.
func (m *CycleMutation) Where(ps ...predicate.Cycle) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Cycle, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Cycle).
func (m *CycleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.fk_user_id != nil {
		fields = append(fields, cycle.FieldFkUserID)
	}
	if m.cycle != nil {
		fields = append(fields, cycle.FieldCycle)
	}
	if m.create_time != nil {
		fields = append(fields, cycle.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, cycle.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cycle.FieldFkUserID:
		return m.FkUserID()
	case cycle.FieldCycle:
		return m.Cycle()
	case cycle.FieldCreateTime:
		return m.CreateTime()
	case cycle.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cycle.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cycle.FieldCycle:
		return m.OldCycle(ctx)
	case cycle.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cycle.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Cycle field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cycle.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cycle.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCycle(v)
		return nil
	case cycle.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cycle.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Cycle field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleMutation) AddedFields() []string {
	var fields []string
	if m.addcycle != nil {
		fields = append(fields, cycle.FieldCycle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cycle.FieldCycle:
		return m.AddedCycle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cycle.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCycle(v)
		return nil
	}
	return fmt.Errorf("unknown Cycle numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Cycle nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleMutation) ResetField(name string) error {
	switch name {
	case cycle.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cycle.FieldCycle:
		m.ResetCycle()
		return nil
	case cycle.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cycle.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Cycle field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Cycle unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Cycle edge %s", name)
}

// CycleOrderMutation represents an operation that mutates the CycleOrder nodes in the graph.
type CycleOrderMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_user_id    *uuid.UUID
	order_no      *string
	product_name  *string
	product_desc  *string
	symbol        *string
	cycle         *float64
	addcycle      *float64
	resource_id   *string
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CycleOrder, error)
	predicates    []predicate.CycleOrder
}

var _ ent.Mutation = (*CycleOrderMutation)(nil)

// cycleorderOption allows management of the mutation configuration using functional options.
type cycleorderOption func(*CycleOrderMutation)

// newCycleOrderMutation creates new mutation for the CycleOrder entity.
func newCycleOrderMutation(c config, op Op, opts ...cycleorderOption) *CycleOrderMutation {
	m := &CycleOrderMutation{
		config:        c,
		op:            op,
		typ:           TypeCycleOrder,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleOrderID sets the ID field of the mutation.
func withCycleOrderID(id uuid.UUID) cycleorderOption {
	return func(m *CycleOrderMutation) {
		var (
			err   error
			once  sync.Once
			value *CycleOrder
		)
		m.oldValue = func(ctx context.Context) (*CycleOrder, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CycleOrder.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycleOrder sets the old CycleOrder of the mutation.
func withCycleOrder(node *CycleOrder) cycleorderOption {
	return func(m *CycleOrderMutation) {
		m.oldValue = func(context.Context) (*CycleOrder, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleOrderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleOrderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CycleOrder entities.
func (m *CycleOrderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleOrderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleOrderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CycleOrder.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleOrderMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleOrderMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleOrderMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetOrderNo sets the "order_no" field.
func (m *CycleOrderMutation) SetOrderNo(s string) {
	m.order_no = &s
}

// OrderNo returns the value of the "order_no" field in the mutation.
func (m *CycleOrderMutation) OrderNo() (r string, exists bool) {
	v := m.order_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOrderNo returns the old "order_no" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldOrderNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrderNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrderNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrderNo: %w", err)
	}
	return oldValue.OrderNo, nil
}

// ResetOrderNo resets all changes to the "order_no" field.
func (m *CycleOrderMutation) ResetOrderNo() {
	m.order_no = nil
}

// SetProductName sets the "product_name" field.
func (m *CycleOrderMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the value of the "product_name" field in the mutation.
func (m *CycleOrderMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "product_name" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "product_name" field.
func (m *CycleOrderMutation) ResetProductName() {
	m.product_name = nil
}

// SetProductDesc sets the "product_desc" field.
func (m *CycleOrderMutation) SetProductDesc(s string) {
	m.product_desc = &s
}

// ProductDesc returns the value of the "product_desc" field in the mutation.
func (m *CycleOrderMutation) ProductDesc() (r string, exists bool) {
	v := m.product_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldProductDesc returns the old "product_desc" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldProductDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductDesc: %w", err)
	}
	return oldValue.ProductDesc, nil
}

// ResetProductDesc resets all changes to the "product_desc" field.
func (m *CycleOrderMutation) ResetProductDesc() {
	m.product_desc = nil
}

// SetSymbol sets the "symbol" field.
func (m *CycleOrderMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *CycleOrderMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *CycleOrderMutation) ResetSymbol() {
	m.symbol = nil
}

// SetCycle sets the "cycle" field.
func (m *CycleOrderMutation) SetCycle(f float64) {
	m.cycle = &f
	m.addcycle = nil
}

// Cycle returns the value of the "cycle" field in the mutation.
func (m *CycleOrderMutation) Cycle() (r float64, exists bool) {
	v := m.cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldCycle returns the old "cycle" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldCycle(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCycle: %w", err)
	}
	return oldValue.Cycle, nil
}

// AddCycle adds f to the "cycle" field.
func (m *CycleOrderMutation) AddCycle(f float64) {
	if m.addcycle != nil {
		*m.addcycle += f
	} else {
		m.addcycle = &f
	}
}

// AddedCycle returns the value that was added to the "cycle" field in this mutation.
func (m *CycleOrderMutation) AddedCycle() (r float64, exists bool) {
	v := m.addcycle
	if v == nil {
		return
	}
	return *v, true
}

// ResetCycle resets all changes to the "cycle" field.
func (m *CycleOrderMutation) ResetCycle() {
	m.cycle = nil
	m.addcycle = nil
}

// SetResourceID sets the "resource_id" field.
func (m *CycleOrderMutation) SetResourceID(s string) {
	m.resource_id = &s
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *CycleOrderMutation) ResourceID() (r string, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldResourceID(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ClearResourceID clears the value of the "resource_id" field.
func (m *CycleOrderMutation) ClearResourceID() {
	m.resource_id = nil
	m.clearedFields[cycleorder.FieldResourceID] = struct{}{}
}

// ResourceIDCleared returns if the "resource_id" field was cleared in this mutation.
func (m *CycleOrderMutation) ResourceIDCleared() bool {
	_, ok := m.clearedFields[cycleorder.FieldResourceID]
	return ok
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *CycleOrderMutation) ResetResourceID() {
	m.resource_id = nil
	delete(m.clearedFields, cycleorder.FieldResourceID)
}

// SetCreateTime sets the "create_time" field.
func (m *CycleOrderMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CycleOrderMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the CycleOrder entity.
// If the CycleOrder object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleOrderMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CycleOrderMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the CycleOrderMutation builder.
func (m *CycleOrderMutation) Where(ps ...predicate.CycleOrder) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleOrderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleOrderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CycleOrder, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleOrderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleOrderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CycleOrder).
func (m *CycleOrderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleOrderMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.fk_user_id != nil {
		fields = append(fields, cycleorder.FieldFkUserID)
	}
	if m.order_no != nil {
		fields = append(fields, cycleorder.FieldOrderNo)
	}
	if m.product_name != nil {
		fields = append(fields, cycleorder.FieldProductName)
	}
	if m.product_desc != nil {
		fields = append(fields, cycleorder.FieldProductDesc)
	}
	if m.symbol != nil {
		fields = append(fields, cycleorder.FieldSymbol)
	}
	if m.cycle != nil {
		fields = append(fields, cycleorder.FieldCycle)
	}
	if m.resource_id != nil {
		fields = append(fields, cycleorder.FieldResourceID)
	}
	if m.create_time != nil {
		fields = append(fields, cycleorder.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleOrderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cycleorder.FieldFkUserID:
		return m.FkUserID()
	case cycleorder.FieldOrderNo:
		return m.OrderNo()
	case cycleorder.FieldProductName:
		return m.ProductName()
	case cycleorder.FieldProductDesc:
		return m.ProductDesc()
	case cycleorder.FieldSymbol:
		return m.Symbol()
	case cycleorder.FieldCycle:
		return m.Cycle()
	case cycleorder.FieldResourceID:
		return m.ResourceID()
	case cycleorder.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleOrderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cycleorder.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cycleorder.FieldOrderNo:
		return m.OldOrderNo(ctx)
	case cycleorder.FieldProductName:
		return m.OldProductName(ctx)
	case cycleorder.FieldProductDesc:
		return m.OldProductDesc(ctx)
	case cycleorder.FieldSymbol:
		return m.OldSymbol(ctx)
	case cycleorder.FieldCycle:
		return m.OldCycle(ctx)
	case cycleorder.FieldResourceID:
		return m.OldResourceID(ctx)
	case cycleorder.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown CycleOrder field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleOrderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cycleorder.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cycleorder.FieldOrderNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrderNo(v)
		return nil
	case cycleorder.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case cycleorder.FieldProductDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductDesc(v)
		return nil
	case cycleorder.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case cycleorder.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCycle(v)
		return nil
	case cycleorder.FieldResourceID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case cycleorder.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown CycleOrder field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleOrderMutation) AddedFields() []string {
	var fields []string
	if m.addcycle != nil {
		fields = append(fields, cycleorder.FieldCycle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleOrderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cycleorder.FieldCycle:
		return m.AddedCycle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleOrderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cycleorder.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCycle(v)
		return nil
	}
	return fmt.Errorf("unknown CycleOrder numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleOrderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cycleorder.FieldResourceID) {
		fields = append(fields, cycleorder.FieldResourceID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleOrderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleOrderMutation) ClearField(name string) error {
	switch name {
	case cycleorder.FieldResourceID:
		m.ClearResourceID()
		return nil
	}
	return fmt.Errorf("unknown CycleOrder nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleOrderMutation) ResetField(name string) error {
	switch name {
	case cycleorder.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cycleorder.FieldOrderNo:
		m.ResetOrderNo()
		return nil
	case cycleorder.FieldProductName:
		m.ResetProductName()
		return nil
	case cycleorder.FieldProductDesc:
		m.ResetProductDesc()
		return nil
	case cycleorder.FieldSymbol:
		m.ResetSymbol()
		return nil
	case cycleorder.FieldCycle:
		m.ResetCycle()
		return nil
	case cycleorder.FieldResourceID:
		m.ResetResourceID()
		return nil
	case cycleorder.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown CycleOrder field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleOrderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleOrderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleOrderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleOrderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleOrderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleOrderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleOrderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CycleOrder unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleOrderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CycleOrder edge %s", name)
}

// CycleRechargeMutation represents an operation that mutates the CycleRecharge nodes in the graph.
type CycleRechargeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	fk_user_id          *uuid.UUID
	out_trade_no        *string
	alipay_trade_no     *string
	recharge_channel    *int
	addrecharge_channel *int
	redeem_code         *string
	state               *string
	pay_amount          *float64
	addpay_amount       *float64
	total_amount        *float64
	addtotal_amount     *float64
	buy_cycle           *float64
	addbuy_cycle        *float64
	create_time         *time.Time
	update_time         *time.Time
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*CycleRecharge, error)
	predicates          []predicate.CycleRecharge
}

var _ ent.Mutation = (*CycleRechargeMutation)(nil)

// cyclerechargeOption allows management of the mutation configuration using functional options.
type cyclerechargeOption func(*CycleRechargeMutation)

// newCycleRechargeMutation creates new mutation for the CycleRecharge entity.
func newCycleRechargeMutation(c config, op Op, opts ...cyclerechargeOption) *CycleRechargeMutation {
	m := &CycleRechargeMutation{
		config:        c,
		op:            op,
		typ:           TypeCycleRecharge,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleRechargeID sets the ID field of the mutation.
func withCycleRechargeID(id uuid.UUID) cyclerechargeOption {
	return func(m *CycleRechargeMutation) {
		var (
			err   error
			once  sync.Once
			value *CycleRecharge
		)
		m.oldValue = func(ctx context.Context) (*CycleRecharge, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CycleRecharge.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycleRecharge sets the old CycleRecharge of the mutation.
func withCycleRecharge(node *CycleRecharge) cyclerechargeOption {
	return func(m *CycleRechargeMutation) {
		m.oldValue = func(context.Context) (*CycleRecharge, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleRechargeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleRechargeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CycleRecharge entities.
func (m *CycleRechargeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleRechargeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleRechargeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CycleRecharge.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleRechargeMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleRechargeMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleRechargeMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetOutTradeNo sets the "out_trade_no" field.
func (m *CycleRechargeMutation) SetOutTradeNo(s string) {
	m.out_trade_no = &s
}

// OutTradeNo returns the value of the "out_trade_no" field in the mutation.
func (m *CycleRechargeMutation) OutTradeNo() (r string, exists bool) {
	v := m.out_trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldOutTradeNo returns the old "out_trade_no" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldOutTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOutTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOutTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOutTradeNo: %w", err)
	}
	return oldValue.OutTradeNo, nil
}

// ResetOutTradeNo resets all changes to the "out_trade_no" field.
func (m *CycleRechargeMutation) ResetOutTradeNo() {
	m.out_trade_no = nil
}

// SetAlipayTradeNo sets the "alipay_trade_no" field.
func (m *CycleRechargeMutation) SetAlipayTradeNo(s string) {
	m.alipay_trade_no = &s
}

// AlipayTradeNo returns the value of the "alipay_trade_no" field in the mutation.
func (m *CycleRechargeMutation) AlipayTradeNo() (r string, exists bool) {
	v := m.alipay_trade_no
	if v == nil {
		return
	}
	return *v, true
}

// OldAlipayTradeNo returns the old "alipay_trade_no" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldAlipayTradeNo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAlipayTradeNo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAlipayTradeNo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAlipayTradeNo: %w", err)
	}
	return oldValue.AlipayTradeNo, nil
}

// ResetAlipayTradeNo resets all changes to the "alipay_trade_no" field.
func (m *CycleRechargeMutation) ResetAlipayTradeNo() {
	m.alipay_trade_no = nil
}

// SetRechargeChannel sets the "recharge_channel" field.
func (m *CycleRechargeMutation) SetRechargeChannel(i int) {
	m.recharge_channel = &i
	m.addrecharge_channel = nil
}

// RechargeChannel returns the value of the "recharge_channel" field in the mutation.
func (m *CycleRechargeMutation) RechargeChannel() (r int, exists bool) {
	v := m.recharge_channel
	if v == nil {
		return
	}
	return *v, true
}

// OldRechargeChannel returns the old "recharge_channel" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldRechargeChannel(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRechargeChannel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRechargeChannel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRechargeChannel: %w", err)
	}
	return oldValue.RechargeChannel, nil
}

// AddRechargeChannel adds i to the "recharge_channel" field.
func (m *CycleRechargeMutation) AddRechargeChannel(i int) {
	if m.addrecharge_channel != nil {
		*m.addrecharge_channel += i
	} else {
		m.addrecharge_channel = &i
	}
}

// AddedRechargeChannel returns the value that was added to the "recharge_channel" field in this mutation.
func (m *CycleRechargeMutation) AddedRechargeChannel() (r int, exists bool) {
	v := m.addrecharge_channel
	if v == nil {
		return
	}
	return *v, true
}

// ResetRechargeChannel resets all changes to the "recharge_channel" field.
func (m *CycleRechargeMutation) ResetRechargeChannel() {
	m.recharge_channel = nil
	m.addrecharge_channel = nil
}

// SetRedeemCode sets the "redeem_code" field.
func (m *CycleRechargeMutation) SetRedeemCode(s string) {
	m.redeem_code = &s
}

// RedeemCode returns the value of the "redeem_code" field in the mutation.
func (m *CycleRechargeMutation) RedeemCode() (r string, exists bool) {
	v := m.redeem_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRedeemCode returns the old "redeem_code" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldRedeemCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedeemCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedeemCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedeemCode: %w", err)
	}
	return oldValue.RedeemCode, nil
}

// ResetRedeemCode resets all changes to the "redeem_code" field.
func (m *CycleRechargeMutation) ResetRedeemCode() {
	m.redeem_code = nil
}

// SetState sets the "state" field.
func (m *CycleRechargeMutation) SetState(s string) {
	m.state = &s
}

// State returns the value of the "state" field in the mutation.
func (m *CycleRechargeMutation) State() (r string, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldState(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CycleRechargeMutation) ResetState() {
	m.state = nil
}

// SetPayAmount sets the "pay_amount" field.
func (m *CycleRechargeMutation) SetPayAmount(f float64) {
	m.pay_amount = &f
	m.addpay_amount = nil
}

// PayAmount returns the value of the "pay_amount" field in the mutation.
func (m *CycleRechargeMutation) PayAmount() (r float64, exists bool) {
	v := m.pay_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldPayAmount returns the old "pay_amount" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldPayAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPayAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPayAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPayAmount: %w", err)
	}
	return oldValue.PayAmount, nil
}

// AddPayAmount adds f to the "pay_amount" field.
func (m *CycleRechargeMutation) AddPayAmount(f float64) {
	if m.addpay_amount != nil {
		*m.addpay_amount += f
	} else {
		m.addpay_amount = &f
	}
}

// AddedPayAmount returns the value that was added to the "pay_amount" field in this mutation.
func (m *CycleRechargeMutation) AddedPayAmount() (r float64, exists bool) {
	v := m.addpay_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetPayAmount resets all changes to the "pay_amount" field.
func (m *CycleRechargeMutation) ResetPayAmount() {
	m.pay_amount = nil
	m.addpay_amount = nil
}

// SetTotalAmount sets the "total_amount" field.
func (m *CycleRechargeMutation) SetTotalAmount(f float64) {
	m.total_amount = &f
	m.addtotal_amount = nil
}

// TotalAmount returns the value of the "total_amount" field in the mutation.
func (m *CycleRechargeMutation) TotalAmount() (r float64, exists bool) {
	v := m.total_amount
	if v == nil {
		return
	}
	return *v, true
}

// OldTotalAmount returns the old "total_amount" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldTotalAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTotalAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTotalAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTotalAmount: %w", err)
	}
	return oldValue.TotalAmount, nil
}

// AddTotalAmount adds f to the "total_amount" field.
func (m *CycleRechargeMutation) AddTotalAmount(f float64) {
	if m.addtotal_amount != nil {
		*m.addtotal_amount += f
	} else {
		m.addtotal_amount = &f
	}
}

// AddedTotalAmount returns the value that was added to the "total_amount" field in this mutation.
func (m *CycleRechargeMutation) AddedTotalAmount() (r float64, exists bool) {
	v := m.addtotal_amount
	if v == nil {
		return
	}
	return *v, true
}

// ResetTotalAmount resets all changes to the "total_amount" field.
func (m *CycleRechargeMutation) ResetTotalAmount() {
	m.total_amount = nil
	m.addtotal_amount = nil
}

// SetBuyCycle sets the "buy_cycle" field.
func (m *CycleRechargeMutation) SetBuyCycle(f float64) {
	m.buy_cycle = &f
	m.addbuy_cycle = nil
}

// BuyCycle returns the value of the "buy_cycle" field in the mutation.
func (m *CycleRechargeMutation) BuyCycle() (r float64, exists bool) {
	v := m.buy_cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldBuyCycle returns the old "buy_cycle" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldBuyCycle(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBuyCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBuyCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBuyCycle: %w", err)
	}
	return oldValue.BuyCycle, nil
}

// AddBuyCycle adds f to the "buy_cycle" field.
func (m *CycleRechargeMutation) AddBuyCycle(f float64) {
	if m.addbuy_cycle != nil {
		*m.addbuy_cycle += f
	} else {
		m.addbuy_cycle = &f
	}
}

// AddedBuyCycle returns the value that was added to the "buy_cycle" field in this mutation.
func (m *CycleRechargeMutation) AddedBuyCycle() (r float64, exists bool) {
	v := m.addbuy_cycle
	if v == nil {
		return
	}
	return *v, true
}

// ResetBuyCycle resets all changes to the "buy_cycle" field.
func (m *CycleRechargeMutation) ResetBuyCycle() {
	m.buy_cycle = nil
	m.addbuy_cycle = nil
}

// SetCreateTime sets the "create_time" field.
func (m *CycleRechargeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CycleRechargeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CycleRechargeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *CycleRechargeMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *CycleRechargeMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the CycleRecharge entity.
// If the CycleRecharge object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRechargeMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *CycleRechargeMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the CycleRechargeMutation builder.
func (m *CycleRechargeMutation) Where(ps ...predicate.CycleRecharge) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleRechargeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleRechargeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CycleRecharge, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleRechargeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleRechargeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CycleRecharge).
func (m *CycleRechargeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleRechargeMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.fk_user_id != nil {
		fields = append(fields, cyclerecharge.FieldFkUserID)
	}
	if m.out_trade_no != nil {
		fields = append(fields, cyclerecharge.FieldOutTradeNo)
	}
	if m.alipay_trade_no != nil {
		fields = append(fields, cyclerecharge.FieldAlipayTradeNo)
	}
	if m.recharge_channel != nil {
		fields = append(fields, cyclerecharge.FieldRechargeChannel)
	}
	if m.redeem_code != nil {
		fields = append(fields, cyclerecharge.FieldRedeemCode)
	}
	if m.state != nil {
		fields = append(fields, cyclerecharge.FieldState)
	}
	if m.pay_amount != nil {
		fields = append(fields, cyclerecharge.FieldPayAmount)
	}
	if m.total_amount != nil {
		fields = append(fields, cyclerecharge.FieldTotalAmount)
	}
	if m.buy_cycle != nil {
		fields = append(fields, cyclerecharge.FieldBuyCycle)
	}
	if m.create_time != nil {
		fields = append(fields, cyclerecharge.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, cyclerecharge.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleRechargeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cyclerecharge.FieldFkUserID:
		return m.FkUserID()
	case cyclerecharge.FieldOutTradeNo:
		return m.OutTradeNo()
	case cyclerecharge.FieldAlipayTradeNo:
		return m.AlipayTradeNo()
	case cyclerecharge.FieldRechargeChannel:
		return m.RechargeChannel()
	case cyclerecharge.FieldRedeemCode:
		return m.RedeemCode()
	case cyclerecharge.FieldState:
		return m.State()
	case cyclerecharge.FieldPayAmount:
		return m.PayAmount()
	case cyclerecharge.FieldTotalAmount:
		return m.TotalAmount()
	case cyclerecharge.FieldBuyCycle:
		return m.BuyCycle()
	case cyclerecharge.FieldCreateTime:
		return m.CreateTime()
	case cyclerecharge.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleRechargeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cyclerecharge.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cyclerecharge.FieldOutTradeNo:
		return m.OldOutTradeNo(ctx)
	case cyclerecharge.FieldAlipayTradeNo:
		return m.OldAlipayTradeNo(ctx)
	case cyclerecharge.FieldRechargeChannel:
		return m.OldRechargeChannel(ctx)
	case cyclerecharge.FieldRedeemCode:
		return m.OldRedeemCode(ctx)
	case cyclerecharge.FieldState:
		return m.OldState(ctx)
	case cyclerecharge.FieldPayAmount:
		return m.OldPayAmount(ctx)
	case cyclerecharge.FieldTotalAmount:
		return m.OldTotalAmount(ctx)
	case cyclerecharge.FieldBuyCycle:
		return m.OldBuyCycle(ctx)
	case cyclerecharge.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cyclerecharge.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown CycleRecharge field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRechargeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cyclerecharge.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cyclerecharge.FieldOutTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOutTradeNo(v)
		return nil
	case cyclerecharge.FieldAlipayTradeNo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAlipayTradeNo(v)
		return nil
	case cyclerecharge.FieldRechargeChannel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRechargeChannel(v)
		return nil
	case cyclerecharge.FieldRedeemCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedeemCode(v)
		return nil
	case cyclerecharge.FieldState:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case cyclerecharge.FieldPayAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPayAmount(v)
		return nil
	case cyclerecharge.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTotalAmount(v)
		return nil
	case cyclerecharge.FieldBuyCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBuyCycle(v)
		return nil
	case cyclerecharge.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cyclerecharge.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRecharge field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleRechargeMutation) AddedFields() []string {
	var fields []string
	if m.addrecharge_channel != nil {
		fields = append(fields, cyclerecharge.FieldRechargeChannel)
	}
	if m.addpay_amount != nil {
		fields = append(fields, cyclerecharge.FieldPayAmount)
	}
	if m.addtotal_amount != nil {
		fields = append(fields, cyclerecharge.FieldTotalAmount)
	}
	if m.addbuy_cycle != nil {
		fields = append(fields, cyclerecharge.FieldBuyCycle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleRechargeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cyclerecharge.FieldRechargeChannel:
		return m.AddedRechargeChannel()
	case cyclerecharge.FieldPayAmount:
		return m.AddedPayAmount()
	case cyclerecharge.FieldTotalAmount:
		return m.AddedTotalAmount()
	case cyclerecharge.FieldBuyCycle:
		return m.AddedBuyCycle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRechargeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cyclerecharge.FieldRechargeChannel:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRechargeChannel(v)
		return nil
	case cyclerecharge.FieldPayAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPayAmount(v)
		return nil
	case cyclerecharge.FieldTotalAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTotalAmount(v)
		return nil
	case cyclerecharge.FieldBuyCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBuyCycle(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRecharge numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleRechargeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleRechargeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleRechargeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CycleRecharge nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleRechargeMutation) ResetField(name string) error {
	switch name {
	case cyclerecharge.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cyclerecharge.FieldOutTradeNo:
		m.ResetOutTradeNo()
		return nil
	case cyclerecharge.FieldAlipayTradeNo:
		m.ResetAlipayTradeNo()
		return nil
	case cyclerecharge.FieldRechargeChannel:
		m.ResetRechargeChannel()
		return nil
	case cyclerecharge.FieldRedeemCode:
		m.ResetRedeemCode()
		return nil
	case cyclerecharge.FieldState:
		m.ResetState()
		return nil
	case cyclerecharge.FieldPayAmount:
		m.ResetPayAmount()
		return nil
	case cyclerecharge.FieldTotalAmount:
		m.ResetTotalAmount()
		return nil
	case cyclerecharge.FieldBuyCycle:
		m.ResetBuyCycle()
		return nil
	case cyclerecharge.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cyclerecharge.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown CycleRecharge field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleRechargeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleRechargeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleRechargeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleRechargeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleRechargeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleRechargeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleRechargeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CycleRecharge unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleRechargeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CycleRecharge edge %s", name)
}

// CycleRedeemCodeMutation represents an operation that mutates the CycleRedeemCode nodes in the graph.
type CycleRedeemCodeMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_user_id    *uuid.UUID
	redeem_code   *string
	cycle         *float64
	addcycle      *float64
	state         *bool
	create_time   *time.Time
	use_time      *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CycleRedeemCode, error)
	predicates    []predicate.CycleRedeemCode
}

var _ ent.Mutation = (*CycleRedeemCodeMutation)(nil)

// cycleredeemcodeOption allows management of the mutation configuration using functional options.
type cycleredeemcodeOption func(*CycleRedeemCodeMutation)

// newCycleRedeemCodeMutation creates new mutation for the CycleRedeemCode entity.
func newCycleRedeemCodeMutation(c config, op Op, opts ...cycleredeemcodeOption) *CycleRedeemCodeMutation {
	m := &CycleRedeemCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeCycleRedeemCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleRedeemCodeID sets the ID field of the mutation.
func withCycleRedeemCodeID(id uuid.UUID) cycleredeemcodeOption {
	return func(m *CycleRedeemCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *CycleRedeemCode
		)
		m.oldValue = func(ctx context.Context) (*CycleRedeemCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CycleRedeemCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycleRedeemCode sets the old CycleRedeemCode of the mutation.
func withCycleRedeemCode(node *CycleRedeemCode) cycleredeemcodeOption {
	return func(m *CycleRedeemCodeMutation) {
		m.oldValue = func(context.Context) (*CycleRedeemCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleRedeemCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleRedeemCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CycleRedeemCode entities.
func (m *CycleRedeemCodeMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleRedeemCodeMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleRedeemCodeMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CycleRedeemCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleRedeemCodeMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleRedeemCodeMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ClearFkUserID clears the value of the "fk_user_id" field.
func (m *CycleRedeemCodeMutation) ClearFkUserID() {
	m.fk_user_id = nil
	m.clearedFields[cycleredeemcode.FieldFkUserID] = struct{}{}
}

// FkUserIDCleared returns if the "fk_user_id" field was cleared in this mutation.
func (m *CycleRedeemCodeMutation) FkUserIDCleared() bool {
	_, ok := m.clearedFields[cycleredeemcode.FieldFkUserID]
	return ok
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleRedeemCodeMutation) ResetFkUserID() {
	m.fk_user_id = nil
	delete(m.clearedFields, cycleredeemcode.FieldFkUserID)
}

// SetRedeemCode sets the "redeem_code" field.
func (m *CycleRedeemCodeMutation) SetRedeemCode(s string) {
	m.redeem_code = &s
}

// RedeemCode returns the value of the "redeem_code" field in the mutation.
func (m *CycleRedeemCodeMutation) RedeemCode() (r string, exists bool) {
	v := m.redeem_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRedeemCode returns the old "redeem_code" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldRedeemCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedeemCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedeemCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedeemCode: %w", err)
	}
	return oldValue.RedeemCode, nil
}

// ResetRedeemCode resets all changes to the "redeem_code" field.
func (m *CycleRedeemCodeMutation) ResetRedeemCode() {
	m.redeem_code = nil
}

// SetCycle sets the "cycle" field.
func (m *CycleRedeemCodeMutation) SetCycle(f float64) {
	m.cycle = &f
	m.addcycle = nil
}

// Cycle returns the value of the "cycle" field in the mutation.
func (m *CycleRedeemCodeMutation) Cycle() (r float64, exists bool) {
	v := m.cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldCycle returns the old "cycle" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldCycle(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCycle: %w", err)
	}
	return oldValue.Cycle, nil
}

// AddCycle adds f to the "cycle" field.
func (m *CycleRedeemCodeMutation) AddCycle(f float64) {
	if m.addcycle != nil {
		*m.addcycle += f
	} else {
		m.addcycle = &f
	}
}

// AddedCycle returns the value that was added to the "cycle" field in this mutation.
func (m *CycleRedeemCodeMutation) AddedCycle() (r float64, exists bool) {
	v := m.addcycle
	if v == nil {
		return
	}
	return *v, true
}

// ResetCycle resets all changes to the "cycle" field.
func (m *CycleRedeemCodeMutation) ResetCycle() {
	m.cycle = nil
	m.addcycle = nil
}

// SetState sets the "state" field.
func (m *CycleRedeemCodeMutation) SetState(b bool) {
	m.state = &b
}

// State returns the value of the "state" field in the mutation.
func (m *CycleRedeemCodeMutation) State() (r bool, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldState(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState resets all changes to the "state" field.
func (m *CycleRedeemCodeMutation) ResetState() {
	m.state = nil
}

// SetCreateTime sets the "create_time" field.
func (m *CycleRedeemCodeMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CycleRedeemCodeMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CycleRedeemCodeMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUseTime sets the "use_time" field.
func (m *CycleRedeemCodeMutation) SetUseTime(t time.Time) {
	m.use_time = &t
}

// UseTime returns the value of the "use_time" field in the mutation.
func (m *CycleRedeemCodeMutation) UseTime() (r time.Time, exists bool) {
	v := m.use_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUseTime returns the old "use_time" field's value of the CycleRedeemCode entity.
// If the CycleRedeemCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRedeemCodeMutation) OldUseTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseTime: %w", err)
	}
	return oldValue.UseTime, nil
}

// ClearUseTime clears the value of the "use_time" field.
func (m *CycleRedeemCodeMutation) ClearUseTime() {
	m.use_time = nil
	m.clearedFields[cycleredeemcode.FieldUseTime] = struct{}{}
}

// UseTimeCleared returns if the "use_time" field was cleared in this mutation.
func (m *CycleRedeemCodeMutation) UseTimeCleared() bool {
	_, ok := m.clearedFields[cycleredeemcode.FieldUseTime]
	return ok
}

// ResetUseTime resets all changes to the "use_time" field.
func (m *CycleRedeemCodeMutation) ResetUseTime() {
	m.use_time = nil
	delete(m.clearedFields, cycleredeemcode.FieldUseTime)
}

// Where appends a list predicates to the CycleRedeemCodeMutation builder.
func (m *CycleRedeemCodeMutation) Where(ps ...predicate.CycleRedeemCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleRedeemCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleRedeemCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CycleRedeemCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleRedeemCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleRedeemCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CycleRedeemCode).
func (m *CycleRedeemCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleRedeemCodeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.fk_user_id != nil {
		fields = append(fields, cycleredeemcode.FieldFkUserID)
	}
	if m.redeem_code != nil {
		fields = append(fields, cycleredeemcode.FieldRedeemCode)
	}
	if m.cycle != nil {
		fields = append(fields, cycleredeemcode.FieldCycle)
	}
	if m.state != nil {
		fields = append(fields, cycleredeemcode.FieldState)
	}
	if m.create_time != nil {
		fields = append(fields, cycleredeemcode.FieldCreateTime)
	}
	if m.use_time != nil {
		fields = append(fields, cycleredeemcode.FieldUseTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleRedeemCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cycleredeemcode.FieldFkUserID:
		return m.FkUserID()
	case cycleredeemcode.FieldRedeemCode:
		return m.RedeemCode()
	case cycleredeemcode.FieldCycle:
		return m.Cycle()
	case cycleredeemcode.FieldState:
		return m.State()
	case cycleredeemcode.FieldCreateTime:
		return m.CreateTime()
	case cycleredeemcode.FieldUseTime:
		return m.UseTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleRedeemCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cycleredeemcode.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cycleredeemcode.FieldRedeemCode:
		return m.OldRedeemCode(ctx)
	case cycleredeemcode.FieldCycle:
		return m.OldCycle(ctx)
	case cycleredeemcode.FieldState:
		return m.OldState(ctx)
	case cycleredeemcode.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cycleredeemcode.FieldUseTime:
		return m.OldUseTime(ctx)
	}
	return nil, fmt.Errorf("unknown CycleRedeemCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRedeemCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cycleredeemcode.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cycleredeemcode.FieldRedeemCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedeemCode(v)
		return nil
	case cycleredeemcode.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCycle(v)
		return nil
	case cycleredeemcode.FieldState:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case cycleredeemcode.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cycleredeemcode.FieldUseTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseTime(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRedeemCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleRedeemCodeMutation) AddedFields() []string {
	var fields []string
	if m.addcycle != nil {
		fields = append(fields, cycleredeemcode.FieldCycle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleRedeemCodeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cycleredeemcode.FieldCycle:
		return m.AddedCycle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRedeemCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cycleredeemcode.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCycle(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRedeemCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleRedeemCodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cycleredeemcode.FieldFkUserID) {
		fields = append(fields, cycleredeemcode.FieldFkUserID)
	}
	if m.FieldCleared(cycleredeemcode.FieldUseTime) {
		fields = append(fields, cycleredeemcode.FieldUseTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleRedeemCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleRedeemCodeMutation) ClearField(name string) error {
	switch name {
	case cycleredeemcode.FieldFkUserID:
		m.ClearFkUserID()
		return nil
	case cycleredeemcode.FieldUseTime:
		m.ClearUseTime()
		return nil
	}
	return fmt.Errorf("unknown CycleRedeemCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleRedeemCodeMutation) ResetField(name string) error {
	switch name {
	case cycleredeemcode.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cycleredeemcode.FieldRedeemCode:
		m.ResetRedeemCode()
		return nil
	case cycleredeemcode.FieldCycle:
		m.ResetCycle()
		return nil
	case cycleredeemcode.FieldState:
		m.ResetState()
		return nil
	case cycleredeemcode.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cycleredeemcode.FieldUseTime:
		m.ResetUseTime()
		return nil
	}
	return fmt.Errorf("unknown CycleRedeemCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleRedeemCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleRedeemCodeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleRedeemCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleRedeemCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleRedeemCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleRedeemCodeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleRedeemCodeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CycleRedeemCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleRedeemCodeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CycleRedeemCode edge %s", name)
}

// CycleRenewalMutation represents an operation that mutates the CycleRenewal nodes in the graph.
type CycleRenewalMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	fk_user_id       *uuid.UUID
	resource_id      *uuid.UUID
	resource_type    *int
	addresource_type *int
	product_name     *string
	product_desc     *string
	state            *int8
	addstate         *int8
	extend_day       *int8
	addextend_day    *int8
	extend_price     *float64
	addextend_price  *float64
	due_time         *time.Time
	renewal_time     *time.Time
	auto_renewal     *bool
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*CycleRenewal, error)
	predicates       []predicate.CycleRenewal
}

var _ ent.Mutation = (*CycleRenewalMutation)(nil)

// cyclerenewalOption allows management of the mutation configuration using functional options.
type cyclerenewalOption func(*CycleRenewalMutation)

// newCycleRenewalMutation creates new mutation for the CycleRenewal entity.
func newCycleRenewalMutation(c config, op Op, opts ...cyclerenewalOption) *CycleRenewalMutation {
	m := &CycleRenewalMutation{
		config:        c,
		op:            op,
		typ:           TypeCycleRenewal,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleRenewalID sets the ID field of the mutation.
func withCycleRenewalID(id uuid.UUID) cyclerenewalOption {
	return func(m *CycleRenewalMutation) {
		var (
			err   error
			once  sync.Once
			value *CycleRenewal
		)
		m.oldValue = func(ctx context.Context) (*CycleRenewal, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CycleRenewal.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycleRenewal sets the old CycleRenewal of the mutation.
func withCycleRenewal(node *CycleRenewal) cyclerenewalOption {
	return func(m *CycleRenewalMutation) {
		m.oldValue = func(context.Context) (*CycleRenewal, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleRenewalMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleRenewalMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CycleRenewal entities.
func (m *CycleRenewalMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleRenewalMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleRenewalMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CycleRenewal.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleRenewalMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleRenewalMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleRenewalMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetResourceID sets the "resource_id" field.
func (m *CycleRenewalMutation) SetResourceID(u uuid.UUID) {
	m.resource_id = &u
}

// ResourceID returns the value of the "resource_id" field in the mutation.
func (m *CycleRenewalMutation) ResourceID() (r uuid.UUID, exists bool) {
	v := m.resource_id
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceID returns the old "resource_id" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldResourceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceID: %w", err)
	}
	return oldValue.ResourceID, nil
}

// ResetResourceID resets all changes to the "resource_id" field.
func (m *CycleRenewalMutation) ResetResourceID() {
	m.resource_id = nil
}

// SetResourceType sets the "resource_type" field.
func (m *CycleRenewalMutation) SetResourceType(i int) {
	m.resource_type = &i
	m.addresource_type = nil
}

// ResourceType returns the value of the "resource_type" field in the mutation.
func (m *CycleRenewalMutation) ResourceType() (r int, exists bool) {
	v := m.resource_type
	if v == nil {
		return
	}
	return *v, true
}

// OldResourceType returns the old "resource_type" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldResourceType(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResourceType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResourceType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResourceType: %w", err)
	}
	return oldValue.ResourceType, nil
}

// AddResourceType adds i to the "resource_type" field.
func (m *CycleRenewalMutation) AddResourceType(i int) {
	if m.addresource_type != nil {
		*m.addresource_type += i
	} else {
		m.addresource_type = &i
	}
}

// AddedResourceType returns the value that was added to the "resource_type" field in this mutation.
func (m *CycleRenewalMutation) AddedResourceType() (r int, exists bool) {
	v := m.addresource_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetResourceType resets all changes to the "resource_type" field.
func (m *CycleRenewalMutation) ResetResourceType() {
	m.resource_type = nil
	m.addresource_type = nil
}

// SetProductName sets the "product_name" field.
func (m *CycleRenewalMutation) SetProductName(s string) {
	m.product_name = &s
}

// ProductName returns the value of the "product_name" field in the mutation.
func (m *CycleRenewalMutation) ProductName() (r string, exists bool) {
	v := m.product_name
	if v == nil {
		return
	}
	return *v, true
}

// OldProductName returns the old "product_name" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldProductName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductName: %w", err)
	}
	return oldValue.ProductName, nil
}

// ResetProductName resets all changes to the "product_name" field.
func (m *CycleRenewalMutation) ResetProductName() {
	m.product_name = nil
}

// SetProductDesc sets the "product_desc" field.
func (m *CycleRenewalMutation) SetProductDesc(s string) {
	m.product_desc = &s
}

// ProductDesc returns the value of the "product_desc" field in the mutation.
func (m *CycleRenewalMutation) ProductDesc() (r string, exists bool) {
	v := m.product_desc
	if v == nil {
		return
	}
	return *v, true
}

// OldProductDesc returns the old "product_desc" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldProductDesc(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProductDesc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProductDesc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProductDesc: %w", err)
	}
	return oldValue.ProductDesc, nil
}

// ResetProductDesc resets all changes to the "product_desc" field.
func (m *CycleRenewalMutation) ResetProductDesc() {
	m.product_desc = nil
}

// SetState sets the "state" field.
func (m *CycleRenewalMutation) SetState(i int8) {
	m.state = &i
	m.addstate = nil
}

// State returns the value of the "state" field in the mutation.
func (m *CycleRenewalMutation) State() (r int8, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldState(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds i to the "state" field.
func (m *CycleRenewalMutation) AddState(i int8) {
	if m.addstate != nil {
		*m.addstate += i
	} else {
		m.addstate = &i
	}
}

// AddedState returns the value that was added to the "state" field in this mutation.
func (m *CycleRenewalMutation) AddedState() (r int8, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ResetState resets all changes to the "state" field.
func (m *CycleRenewalMutation) ResetState() {
	m.state = nil
	m.addstate = nil
}

// SetExtendDay sets the "extend_day" field.
func (m *CycleRenewalMutation) SetExtendDay(i int8) {
	m.extend_day = &i
	m.addextend_day = nil
}

// ExtendDay returns the value of the "extend_day" field in the mutation.
func (m *CycleRenewalMutation) ExtendDay() (r int8, exists bool) {
	v := m.extend_day
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendDay returns the old "extend_day" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldExtendDay(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendDay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendDay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendDay: %w", err)
	}
	return oldValue.ExtendDay, nil
}

// AddExtendDay adds i to the "extend_day" field.
func (m *CycleRenewalMutation) AddExtendDay(i int8) {
	if m.addextend_day != nil {
		*m.addextend_day += i
	} else {
		m.addextend_day = &i
	}
}

// AddedExtendDay returns the value that was added to the "extend_day" field in this mutation.
func (m *CycleRenewalMutation) AddedExtendDay() (r int8, exists bool) {
	v := m.addextend_day
	if v == nil {
		return
	}
	return *v, true
}

// ResetExtendDay resets all changes to the "extend_day" field.
func (m *CycleRenewalMutation) ResetExtendDay() {
	m.extend_day = nil
	m.addextend_day = nil
}

// SetExtendPrice sets the "extend_price" field.
func (m *CycleRenewalMutation) SetExtendPrice(f float64) {
	m.extend_price = &f
	m.addextend_price = nil
}

// ExtendPrice returns the value of the "extend_price" field in the mutation.
func (m *CycleRenewalMutation) ExtendPrice() (r float64, exists bool) {
	v := m.extend_price
	if v == nil {
		return
	}
	return *v, true
}

// OldExtendPrice returns the old "extend_price" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldExtendPrice(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtendPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtendPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtendPrice: %w", err)
	}
	return oldValue.ExtendPrice, nil
}

// AddExtendPrice adds f to the "extend_price" field.
func (m *CycleRenewalMutation) AddExtendPrice(f float64) {
	if m.addextend_price != nil {
		*m.addextend_price += f
	} else {
		m.addextend_price = &f
	}
}

// AddedExtendPrice returns the value that was added to the "extend_price" field in this mutation.
func (m *CycleRenewalMutation) AddedExtendPrice() (r float64, exists bool) {
	v := m.addextend_price
	if v == nil {
		return
	}
	return *v, true
}

// ResetExtendPrice resets all changes to the "extend_price" field.
func (m *CycleRenewalMutation) ResetExtendPrice() {
	m.extend_price = nil
	m.addextend_price = nil
}

// SetDueTime sets the "due_time" field.
func (m *CycleRenewalMutation) SetDueTime(t time.Time) {
	m.due_time = &t
}

// DueTime returns the value of the "due_time" field in the mutation.
func (m *CycleRenewalMutation) DueTime() (r time.Time, exists bool) {
	v := m.due_time
	if v == nil {
		return
	}
	return *v, true
}

// OldDueTime returns the old "due_time" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldDueTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDueTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDueTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDueTime: %w", err)
	}
	return oldValue.DueTime, nil
}

// ClearDueTime clears the value of the "due_time" field.
func (m *CycleRenewalMutation) ClearDueTime() {
	m.due_time = nil
	m.clearedFields[cyclerenewal.FieldDueTime] = struct{}{}
}

// DueTimeCleared returns if the "due_time" field was cleared in this mutation.
func (m *CycleRenewalMutation) DueTimeCleared() bool {
	_, ok := m.clearedFields[cyclerenewal.FieldDueTime]
	return ok
}

// ResetDueTime resets all changes to the "due_time" field.
func (m *CycleRenewalMutation) ResetDueTime() {
	m.due_time = nil
	delete(m.clearedFields, cyclerenewal.FieldDueTime)
}

// SetRenewalTime sets the "renewal_time" field.
func (m *CycleRenewalMutation) SetRenewalTime(t time.Time) {
	m.renewal_time = &t
}

// RenewalTime returns the value of the "renewal_time" field in the mutation.
func (m *CycleRenewalMutation) RenewalTime() (r time.Time, exists bool) {
	v := m.renewal_time
	if v == nil {
		return
	}
	return *v, true
}

// OldRenewalTime returns the old "renewal_time" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldRenewalTime(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRenewalTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRenewalTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRenewalTime: %w", err)
	}
	return oldValue.RenewalTime, nil
}

// ClearRenewalTime clears the value of the "renewal_time" field.
func (m *CycleRenewalMutation) ClearRenewalTime() {
	m.renewal_time = nil
	m.clearedFields[cyclerenewal.FieldRenewalTime] = struct{}{}
}

// RenewalTimeCleared returns if the "renewal_time" field was cleared in this mutation.
func (m *CycleRenewalMutation) RenewalTimeCleared() bool {
	_, ok := m.clearedFields[cyclerenewal.FieldRenewalTime]
	return ok
}

// ResetRenewalTime resets all changes to the "renewal_time" field.
func (m *CycleRenewalMutation) ResetRenewalTime() {
	m.renewal_time = nil
	delete(m.clearedFields, cyclerenewal.FieldRenewalTime)
}

// SetAutoRenewal sets the "auto_renewal" field.
func (m *CycleRenewalMutation) SetAutoRenewal(b bool) {
	m.auto_renewal = &b
}

// AutoRenewal returns the value of the "auto_renewal" field in the mutation.
func (m *CycleRenewalMutation) AutoRenewal() (r bool, exists bool) {
	v := m.auto_renewal
	if v == nil {
		return
	}
	return *v, true
}

// OldAutoRenewal returns the old "auto_renewal" field's value of the CycleRenewal entity.
// If the CycleRenewal object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleRenewalMutation) OldAutoRenewal(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAutoRenewal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAutoRenewal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAutoRenewal: %w", err)
	}
	return oldValue.AutoRenewal, nil
}

// ResetAutoRenewal resets all changes to the "auto_renewal" field.
func (m *CycleRenewalMutation) ResetAutoRenewal() {
	m.auto_renewal = nil
}

// Where appends a list predicates to the CycleRenewalMutation builder.
func (m *CycleRenewalMutation) Where(ps ...predicate.CycleRenewal) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleRenewalMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleRenewalMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CycleRenewal, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleRenewalMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleRenewalMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CycleRenewal).
func (m *CycleRenewalMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleRenewalMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.fk_user_id != nil {
		fields = append(fields, cyclerenewal.FieldFkUserID)
	}
	if m.resource_id != nil {
		fields = append(fields, cyclerenewal.FieldResourceID)
	}
	if m.resource_type != nil {
		fields = append(fields, cyclerenewal.FieldResourceType)
	}
	if m.product_name != nil {
		fields = append(fields, cyclerenewal.FieldProductName)
	}
	if m.product_desc != nil {
		fields = append(fields, cyclerenewal.FieldProductDesc)
	}
	if m.state != nil {
		fields = append(fields, cyclerenewal.FieldState)
	}
	if m.extend_day != nil {
		fields = append(fields, cyclerenewal.FieldExtendDay)
	}
	if m.extend_price != nil {
		fields = append(fields, cyclerenewal.FieldExtendPrice)
	}
	if m.due_time != nil {
		fields = append(fields, cyclerenewal.FieldDueTime)
	}
	if m.renewal_time != nil {
		fields = append(fields, cyclerenewal.FieldRenewalTime)
	}
	if m.auto_renewal != nil {
		fields = append(fields, cyclerenewal.FieldAutoRenewal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleRenewalMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cyclerenewal.FieldFkUserID:
		return m.FkUserID()
	case cyclerenewal.FieldResourceID:
		return m.ResourceID()
	case cyclerenewal.FieldResourceType:
		return m.ResourceType()
	case cyclerenewal.FieldProductName:
		return m.ProductName()
	case cyclerenewal.FieldProductDesc:
		return m.ProductDesc()
	case cyclerenewal.FieldState:
		return m.State()
	case cyclerenewal.FieldExtendDay:
		return m.ExtendDay()
	case cyclerenewal.FieldExtendPrice:
		return m.ExtendPrice()
	case cyclerenewal.FieldDueTime:
		return m.DueTime()
	case cyclerenewal.FieldRenewalTime:
		return m.RenewalTime()
	case cyclerenewal.FieldAutoRenewal:
		return m.AutoRenewal()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleRenewalMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cyclerenewal.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cyclerenewal.FieldResourceID:
		return m.OldResourceID(ctx)
	case cyclerenewal.FieldResourceType:
		return m.OldResourceType(ctx)
	case cyclerenewal.FieldProductName:
		return m.OldProductName(ctx)
	case cyclerenewal.FieldProductDesc:
		return m.OldProductDesc(ctx)
	case cyclerenewal.FieldState:
		return m.OldState(ctx)
	case cyclerenewal.FieldExtendDay:
		return m.OldExtendDay(ctx)
	case cyclerenewal.FieldExtendPrice:
		return m.OldExtendPrice(ctx)
	case cyclerenewal.FieldDueTime:
		return m.OldDueTime(ctx)
	case cyclerenewal.FieldRenewalTime:
		return m.OldRenewalTime(ctx)
	case cyclerenewal.FieldAutoRenewal:
		return m.OldAutoRenewal(ctx)
	}
	return nil, fmt.Errorf("unknown CycleRenewal field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRenewalMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cyclerenewal.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cyclerenewal.FieldResourceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceID(v)
		return nil
	case cyclerenewal.FieldResourceType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResourceType(v)
		return nil
	case cyclerenewal.FieldProductName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductName(v)
		return nil
	case cyclerenewal.FieldProductDesc:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProductDesc(v)
		return nil
	case cyclerenewal.FieldState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case cyclerenewal.FieldExtendDay:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendDay(v)
		return nil
	case cyclerenewal.FieldExtendPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtendPrice(v)
		return nil
	case cyclerenewal.FieldDueTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDueTime(v)
		return nil
	case cyclerenewal.FieldRenewalTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRenewalTime(v)
		return nil
	case cyclerenewal.FieldAutoRenewal:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAutoRenewal(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRenewal field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleRenewalMutation) AddedFields() []string {
	var fields []string
	if m.addresource_type != nil {
		fields = append(fields, cyclerenewal.FieldResourceType)
	}
	if m.addstate != nil {
		fields = append(fields, cyclerenewal.FieldState)
	}
	if m.addextend_day != nil {
		fields = append(fields, cyclerenewal.FieldExtendDay)
	}
	if m.addextend_price != nil {
		fields = append(fields, cyclerenewal.FieldExtendPrice)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleRenewalMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cyclerenewal.FieldResourceType:
		return m.AddedResourceType()
	case cyclerenewal.FieldState:
		return m.AddedState()
	case cyclerenewal.FieldExtendDay:
		return m.AddedExtendDay()
	case cyclerenewal.FieldExtendPrice:
		return m.AddedExtendPrice()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleRenewalMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cyclerenewal.FieldResourceType:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddResourceType(v)
		return nil
	case cyclerenewal.FieldState:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddState(v)
		return nil
	case cyclerenewal.FieldExtendDay:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExtendDay(v)
		return nil
	case cyclerenewal.FieldExtendPrice:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExtendPrice(v)
		return nil
	}
	return fmt.Errorf("unknown CycleRenewal numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleRenewalMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cyclerenewal.FieldDueTime) {
		fields = append(fields, cyclerenewal.FieldDueTime)
	}
	if m.FieldCleared(cyclerenewal.FieldRenewalTime) {
		fields = append(fields, cyclerenewal.FieldRenewalTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleRenewalMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleRenewalMutation) ClearField(name string) error {
	switch name {
	case cyclerenewal.FieldDueTime:
		m.ClearDueTime()
		return nil
	case cyclerenewal.FieldRenewalTime:
		m.ClearRenewalTime()
		return nil
	}
	return fmt.Errorf("unknown CycleRenewal nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleRenewalMutation) ResetField(name string) error {
	switch name {
	case cyclerenewal.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cyclerenewal.FieldResourceID:
		m.ResetResourceID()
		return nil
	case cyclerenewal.FieldResourceType:
		m.ResetResourceType()
		return nil
	case cyclerenewal.FieldProductName:
		m.ResetProductName()
		return nil
	case cyclerenewal.FieldProductDesc:
		m.ResetProductDesc()
		return nil
	case cyclerenewal.FieldState:
		m.ResetState()
		return nil
	case cyclerenewal.FieldExtendDay:
		m.ResetExtendDay()
		return nil
	case cyclerenewal.FieldExtendPrice:
		m.ResetExtendPrice()
		return nil
	case cyclerenewal.FieldDueTime:
		m.ResetDueTime()
		return nil
	case cyclerenewal.FieldRenewalTime:
		m.ResetRenewalTime()
		return nil
	case cyclerenewal.FieldAutoRenewal:
		m.ResetAutoRenewal()
		return nil
	}
	return fmt.Errorf("unknown CycleRenewal field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleRenewalMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleRenewalMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleRenewalMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleRenewalMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleRenewalMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleRenewalMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleRenewalMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CycleRenewal unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleRenewalMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CycleRenewal edge %s", name)
}

// CycleTransactionMutation represents an operation that mutates the CycleTransaction nodes in the graph.
type CycleTransactionMutation struct {
	config
	op                   Op
	typ                  string
	id                   *uuid.UUID
	fk_cycle_id          *uuid.UUID
	fk_user_id           *uuid.UUID
	fk_cycle_order_id    *uuid.UUID
	fk_cycle_recharge_id *uuid.UUID
	operation            *string
	symbol               *string
	cycle                *float64
	addcycle             *float64
	balance              *float64
	addbalance           *float64
	operation_time       *time.Time
	clearedFields        map[string]struct{}
	done                 bool
	oldValue             func(context.Context) (*CycleTransaction, error)
	predicates           []predicate.CycleTransaction
}

var _ ent.Mutation = (*CycleTransactionMutation)(nil)

// cycletransactionOption allows management of the mutation configuration using functional options.
type cycletransactionOption func(*CycleTransactionMutation)

// newCycleTransactionMutation creates new mutation for the CycleTransaction entity.
func newCycleTransactionMutation(c config, op Op, opts ...cycletransactionOption) *CycleTransactionMutation {
	m := &CycleTransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeCycleTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCycleTransactionID sets the ID field of the mutation.
func withCycleTransactionID(id uuid.UUID) cycletransactionOption {
	return func(m *CycleTransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *CycleTransaction
		)
		m.oldValue = func(ctx context.Context) (*CycleTransaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CycleTransaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCycleTransaction sets the old CycleTransaction of the mutation.
func withCycleTransaction(node *CycleTransaction) cycletransactionOption {
	return func(m *CycleTransactionMutation) {
		m.oldValue = func(context.Context) (*CycleTransaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CycleTransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CycleTransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CycleTransaction entities.
func (m *CycleTransactionMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CycleTransactionMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CycleTransactionMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CycleTransaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkCycleID sets the "fk_cycle_id" field.
func (m *CycleTransactionMutation) SetFkCycleID(u uuid.UUID) {
	m.fk_cycle_id = &u
}

// FkCycleID returns the value of the "fk_cycle_id" field in the mutation.
func (m *CycleTransactionMutation) FkCycleID() (r uuid.UUID, exists bool) {
	v := m.fk_cycle_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkCycleID returns the old "fk_cycle_id" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldFkCycleID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkCycleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkCycleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkCycleID: %w", err)
	}
	return oldValue.FkCycleID, nil
}

// ResetFkCycleID resets all changes to the "fk_cycle_id" field.
func (m *CycleTransactionMutation) ResetFkCycleID() {
	m.fk_cycle_id = nil
}

// SetFkUserID sets the "fk_user_id" field.
func (m *CycleTransactionMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *CycleTransactionMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *CycleTransactionMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetFkCycleOrderID sets the "fk_cycle_order_id" field.
func (m *CycleTransactionMutation) SetFkCycleOrderID(u uuid.UUID) {
	m.fk_cycle_order_id = &u
}

// FkCycleOrderID returns the value of the "fk_cycle_order_id" field in the mutation.
func (m *CycleTransactionMutation) FkCycleOrderID() (r uuid.UUID, exists bool) {
	v := m.fk_cycle_order_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkCycleOrderID returns the old "fk_cycle_order_id" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldFkCycleOrderID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkCycleOrderID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkCycleOrderID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkCycleOrderID: %w", err)
	}
	return oldValue.FkCycleOrderID, nil
}

// ResetFkCycleOrderID resets all changes to the "fk_cycle_order_id" field.
func (m *CycleTransactionMutation) ResetFkCycleOrderID() {
	m.fk_cycle_order_id = nil
}

// SetFkCycleRechargeID sets the "fk_cycle_recharge_id" field.
func (m *CycleTransactionMutation) SetFkCycleRechargeID(u uuid.UUID) {
	m.fk_cycle_recharge_id = &u
}

// FkCycleRechargeID returns the value of the "fk_cycle_recharge_id" field in the mutation.
func (m *CycleTransactionMutation) FkCycleRechargeID() (r uuid.UUID, exists bool) {
	v := m.fk_cycle_recharge_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkCycleRechargeID returns the old "fk_cycle_recharge_id" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldFkCycleRechargeID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkCycleRechargeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkCycleRechargeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkCycleRechargeID: %w", err)
	}
	return oldValue.FkCycleRechargeID, nil
}

// ResetFkCycleRechargeID resets all changes to the "fk_cycle_recharge_id" field.
func (m *CycleTransactionMutation) ResetFkCycleRechargeID() {
	m.fk_cycle_recharge_id = nil
}

// SetOperation sets the "operation" field.
func (m *CycleTransactionMutation) SetOperation(s string) {
	m.operation = &s
}

// Operation returns the value of the "operation" field in the mutation.
func (m *CycleTransactionMutation) Operation() (r string, exists bool) {
	v := m.operation
	if v == nil {
		return
	}
	return *v, true
}

// OldOperation returns the old "operation" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldOperation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperation: %w", err)
	}
	return oldValue.Operation, nil
}

// ResetOperation resets all changes to the "operation" field.
func (m *CycleTransactionMutation) ResetOperation() {
	m.operation = nil
}

// SetSymbol sets the "symbol" field.
func (m *CycleTransactionMutation) SetSymbol(s string) {
	m.symbol = &s
}

// Symbol returns the value of the "symbol" field in the mutation.
func (m *CycleTransactionMutation) Symbol() (r string, exists bool) {
	v := m.symbol
	if v == nil {
		return
	}
	return *v, true
}

// OldSymbol returns the old "symbol" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldSymbol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSymbol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSymbol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSymbol: %w", err)
	}
	return oldValue.Symbol, nil
}

// ResetSymbol resets all changes to the "symbol" field.
func (m *CycleTransactionMutation) ResetSymbol() {
	m.symbol = nil
}

// SetCycle sets the "cycle" field.
func (m *CycleTransactionMutation) SetCycle(f float64) {
	m.cycle = &f
	m.addcycle = nil
}

// Cycle returns the value of the "cycle" field in the mutation.
func (m *CycleTransactionMutation) Cycle() (r float64, exists bool) {
	v := m.cycle
	if v == nil {
		return
	}
	return *v, true
}

// OldCycle returns the old "cycle" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldCycle(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCycle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCycle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCycle: %w", err)
	}
	return oldValue.Cycle, nil
}

// AddCycle adds f to the "cycle" field.
func (m *CycleTransactionMutation) AddCycle(f float64) {
	if m.addcycle != nil {
		*m.addcycle += f
	} else {
		m.addcycle = &f
	}
}

// AddedCycle returns the value that was added to the "cycle" field in this mutation.
func (m *CycleTransactionMutation) AddedCycle() (r float64, exists bool) {
	v := m.addcycle
	if v == nil {
		return
	}
	return *v, true
}

// ResetCycle resets all changes to the "cycle" field.
func (m *CycleTransactionMutation) ResetCycle() {
	m.cycle = nil
	m.addcycle = nil
}

// SetBalance sets the "balance" field.
func (m *CycleTransactionMutation) SetBalance(f float64) {
	m.balance = &f
	m.addbalance = nil
}

// Balance returns the value of the "balance" field in the mutation.
func (m *CycleTransactionMutation) Balance() (r float64, exists bool) {
	v := m.balance
	if v == nil {
		return
	}
	return *v, true
}

// OldBalance returns the old "balance" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldBalance(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBalance is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBalance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBalance: %w", err)
	}
	return oldValue.Balance, nil
}

// AddBalance adds f to the "balance" field.
func (m *CycleTransactionMutation) AddBalance(f float64) {
	if m.addbalance != nil {
		*m.addbalance += f
	} else {
		m.addbalance = &f
	}
}

// AddedBalance returns the value that was added to the "balance" field in this mutation.
func (m *CycleTransactionMutation) AddedBalance() (r float64, exists bool) {
	v := m.addbalance
	if v == nil {
		return
	}
	return *v, true
}

// ResetBalance resets all changes to the "balance" field.
func (m *CycleTransactionMutation) ResetBalance() {
	m.balance = nil
	m.addbalance = nil
}

// SetOperationTime sets the "operation_time" field.
func (m *CycleTransactionMutation) SetOperationTime(t time.Time) {
	m.operation_time = &t
}

// OperationTime returns the value of the "operation_time" field in the mutation.
func (m *CycleTransactionMutation) OperationTime() (r time.Time, exists bool) {
	v := m.operation_time
	if v == nil {
		return
	}
	return *v, true
}

// OldOperationTime returns the old "operation_time" field's value of the CycleTransaction entity.
// If the CycleTransaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CycleTransactionMutation) OldOperationTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOperationTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOperationTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOperationTime: %w", err)
	}
	return oldValue.OperationTime, nil
}

// ResetOperationTime resets all changes to the "operation_time" field.
func (m *CycleTransactionMutation) ResetOperationTime() {
	m.operation_time = nil
}

// Where appends a list predicates to the CycleTransactionMutation builder.
func (m *CycleTransactionMutation) Where(ps ...predicate.CycleTransaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CycleTransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CycleTransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CycleTransaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CycleTransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CycleTransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CycleTransaction).
func (m *CycleTransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CycleTransactionMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.fk_cycle_id != nil {
		fields = append(fields, cycletransaction.FieldFkCycleID)
	}
	if m.fk_user_id != nil {
		fields = append(fields, cycletransaction.FieldFkUserID)
	}
	if m.fk_cycle_order_id != nil {
		fields = append(fields, cycletransaction.FieldFkCycleOrderID)
	}
	if m.fk_cycle_recharge_id != nil {
		fields = append(fields, cycletransaction.FieldFkCycleRechargeID)
	}
	if m.operation != nil {
		fields = append(fields, cycletransaction.FieldOperation)
	}
	if m.symbol != nil {
		fields = append(fields, cycletransaction.FieldSymbol)
	}
	if m.cycle != nil {
		fields = append(fields, cycletransaction.FieldCycle)
	}
	if m.balance != nil {
		fields = append(fields, cycletransaction.FieldBalance)
	}
	if m.operation_time != nil {
		fields = append(fields, cycletransaction.FieldOperationTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CycleTransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cycletransaction.FieldFkCycleID:
		return m.FkCycleID()
	case cycletransaction.FieldFkUserID:
		return m.FkUserID()
	case cycletransaction.FieldFkCycleOrderID:
		return m.FkCycleOrderID()
	case cycletransaction.FieldFkCycleRechargeID:
		return m.FkCycleRechargeID()
	case cycletransaction.FieldOperation:
		return m.Operation()
	case cycletransaction.FieldSymbol:
		return m.Symbol()
	case cycletransaction.FieldCycle:
		return m.Cycle()
	case cycletransaction.FieldBalance:
		return m.Balance()
	case cycletransaction.FieldOperationTime:
		return m.OperationTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CycleTransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cycletransaction.FieldFkCycleID:
		return m.OldFkCycleID(ctx)
	case cycletransaction.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case cycletransaction.FieldFkCycleOrderID:
		return m.OldFkCycleOrderID(ctx)
	case cycletransaction.FieldFkCycleRechargeID:
		return m.OldFkCycleRechargeID(ctx)
	case cycletransaction.FieldOperation:
		return m.OldOperation(ctx)
	case cycletransaction.FieldSymbol:
		return m.OldSymbol(ctx)
	case cycletransaction.FieldCycle:
		return m.OldCycle(ctx)
	case cycletransaction.FieldBalance:
		return m.OldBalance(ctx)
	case cycletransaction.FieldOperationTime:
		return m.OldOperationTime(ctx)
	}
	return nil, fmt.Errorf("unknown CycleTransaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleTransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cycletransaction.FieldFkCycleID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkCycleID(v)
		return nil
	case cycletransaction.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case cycletransaction.FieldFkCycleOrderID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkCycleOrderID(v)
		return nil
	case cycletransaction.FieldFkCycleRechargeID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkCycleRechargeID(v)
		return nil
	case cycletransaction.FieldOperation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperation(v)
		return nil
	case cycletransaction.FieldSymbol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSymbol(v)
		return nil
	case cycletransaction.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCycle(v)
		return nil
	case cycletransaction.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBalance(v)
		return nil
	case cycletransaction.FieldOperationTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOperationTime(v)
		return nil
	}
	return fmt.Errorf("unknown CycleTransaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CycleTransactionMutation) AddedFields() []string {
	var fields []string
	if m.addcycle != nil {
		fields = append(fields, cycletransaction.FieldCycle)
	}
	if m.addbalance != nil {
		fields = append(fields, cycletransaction.FieldBalance)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CycleTransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cycletransaction.FieldCycle:
		return m.AddedCycle()
	case cycletransaction.FieldBalance:
		return m.AddedBalance()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CycleTransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cycletransaction.FieldCycle:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCycle(v)
		return nil
	case cycletransaction.FieldBalance:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBalance(v)
		return nil
	}
	return fmt.Errorf("unknown CycleTransaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CycleTransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CycleTransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CycleTransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CycleTransaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CycleTransactionMutation) ResetField(name string) error {
	switch name {
	case cycletransaction.FieldFkCycleID:
		m.ResetFkCycleID()
		return nil
	case cycletransaction.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case cycletransaction.FieldFkCycleOrderID:
		m.ResetFkCycleOrderID()
		return nil
	case cycletransaction.FieldFkCycleRechargeID:
		m.ResetFkCycleRechargeID()
		return nil
	case cycletransaction.FieldOperation:
		m.ResetOperation()
		return nil
	case cycletransaction.FieldSymbol:
		m.ResetSymbol()
		return nil
	case cycletransaction.FieldCycle:
		m.ResetCycle()
		return nil
	case cycletransaction.FieldBalance:
		m.ResetBalance()
		return nil
	case cycletransaction.FieldOperationTime:
		m.ResetOperationTime()
		return nil
	}
	return fmt.Errorf("unknown CycleTransaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CycleTransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CycleTransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CycleTransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CycleTransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CycleTransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CycleTransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CycleTransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CycleTransaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CycleTransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CycleTransaction edge %s", name)
}

// DomainBindingMutation represents an operation that mutates the DomainBinding nodes in the graph.
type DomainBindingMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	user_id                *uuid.UUID
	fk_compute_instance_id *uuid.UUID
	fk_network_mapping_id  *uuid.UUID
	name                   *string
	domain                 *string
	gateway_port           *int32
	addgateway_port        *int32
	create_time            *time.Time
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*DomainBinding, error)
	predicates             []predicate.DomainBinding
}

var _ ent.Mutation = (*DomainBindingMutation)(nil)

// domainbindingOption allows management of the mutation configuration using functional options.
type domainbindingOption func(*DomainBindingMutation)

// newDomainBindingMutation creates new mutation for the DomainBinding entity.
func newDomainBindingMutation(c config, op Op, opts ...domainbindingOption) *DomainBindingMutation {
	m := &DomainBindingMutation{
		config:        c,
		op:            op,
		typ:           TypeDomainBinding,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDomainBindingID sets the ID field of the mutation.
func withDomainBindingID(id uuid.UUID) domainbindingOption {
	return func(m *DomainBindingMutation) {
		var (
			err   error
			once  sync.Once
			value *DomainBinding
		)
		m.oldValue = func(ctx context.Context) (*DomainBinding, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DomainBinding.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDomainBinding sets the old DomainBinding of the mutation.
func withDomainBinding(node *DomainBinding) domainbindingOption {
	return func(m *DomainBindingMutation) {
		m.oldValue = func(context.Context) (*DomainBinding, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DomainBindingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DomainBindingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of DomainBinding entities.
func (m *DomainBindingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DomainBindingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DomainBindingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().DomainBinding.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *DomainBindingMutation) SetUserID(u uuid.UUID) {
	m.user_id = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *DomainBindingMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *DomainBindingMutation) ResetUserID() {
	m.user_id = nil
}

// SetFkComputeInstanceID sets the "fk_compute_instance_id" field.
func (m *DomainBindingMutation) SetFkComputeInstanceID(u uuid.UUID) {
	m.fk_compute_instance_id = &u
}

// FkComputeInstanceID returns the value of the "fk_compute_instance_id" field in the mutation.
func (m *DomainBindingMutation) FkComputeInstanceID() (r uuid.UUID, exists bool) {
	v := m.fk_compute_instance_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkComputeInstanceID returns the old "fk_compute_instance_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldFkComputeInstanceID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkComputeInstanceID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkComputeInstanceID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkComputeInstanceID: %w", err)
	}
	return oldValue.FkComputeInstanceID, nil
}

// ResetFkComputeInstanceID resets all changes to the "fk_compute_instance_id" field.
func (m *DomainBindingMutation) ResetFkComputeInstanceID() {
	m.fk_compute_instance_id = nil
}

// SetFkNetworkMappingID sets the "fk_network_mapping_id" field.
func (m *DomainBindingMutation) SetFkNetworkMappingID(u uuid.UUID) {
	m.fk_network_mapping_id = &u
}

// FkNetworkMappingID returns the value of the "fk_network_mapping_id" field in the mutation.
func (m *DomainBindingMutation) FkNetworkMappingID() (r uuid.UUID, exists bool) {
	v := m.fk_network_mapping_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkNetworkMappingID returns the old "fk_network_mapping_id" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldFkNetworkMappingID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkNetworkMappingID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkNetworkMappingID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkNetworkMappingID: %w", err)
	}
	return oldValue.FkNetworkMappingID, nil
}

// ResetFkNetworkMappingID resets all changes to the "fk_network_mapping_id" field.
func (m *DomainBindingMutation) ResetFkNetworkMappingID() {
	m.fk_network_mapping_id = nil
}

// SetName sets the "name" field.
func (m *DomainBindingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *DomainBindingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *DomainBindingMutation) ResetName() {
	m.name = nil
}

// SetDomain sets the "domain" field.
func (m *DomainBindingMutation) SetDomain(s string) {
	m.domain = &s
}

// Domain returns the value of the "domain" field in the mutation.
func (m *DomainBindingMutation) Domain() (r string, exists bool) {
	v := m.domain
	if v == nil {
		return
	}
	return *v, true
}

// OldDomain returns the old "domain" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldDomain(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomain is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomain requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomain: %w", err)
	}
	return oldValue.Domain, nil
}

// ResetDomain resets all changes to the "domain" field.
func (m *DomainBindingMutation) ResetDomain() {
	m.domain = nil
}

// SetGatewayPort sets the "gateway_port" field.
func (m *DomainBindingMutation) SetGatewayPort(i int32) {
	m.gateway_port = &i
	m.addgateway_port = nil
}

// GatewayPort returns the value of the "gateway_port" field in the mutation.
func (m *DomainBindingMutation) GatewayPort() (r int32, exists bool) {
	v := m.gateway_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPort returns the old "gateway_port" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldGatewayPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPort: %w", err)
	}
	return oldValue.GatewayPort, nil
}

// AddGatewayPort adds i to the "gateway_port" field.
func (m *DomainBindingMutation) AddGatewayPort(i int32) {
	if m.addgateway_port != nil {
		*m.addgateway_port += i
	} else {
		m.addgateway_port = &i
	}
}

// AddedGatewayPort returns the value that was added to the "gateway_port" field in this mutation.
func (m *DomainBindingMutation) AddedGatewayPort() (r int32, exists bool) {
	v := m.addgateway_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGatewayPort resets all changes to the "gateway_port" field.
func (m *DomainBindingMutation) ResetGatewayPort() {
	m.gateway_port = nil
	m.addgateway_port = nil
}

// SetCreateTime sets the "create_time" field.
func (m *DomainBindingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *DomainBindingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the DomainBinding entity.
// If the DomainBinding object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DomainBindingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *DomainBindingMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the DomainBindingMutation builder.
func (m *DomainBindingMutation) Where(ps ...predicate.DomainBinding) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DomainBindingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DomainBindingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.DomainBinding, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DomainBindingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DomainBindingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (DomainBinding).
func (m *DomainBindingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DomainBindingMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, domainbinding.FieldUserID)
	}
	if m.fk_compute_instance_id != nil {
		fields = append(fields, domainbinding.FieldFkComputeInstanceID)
	}
	if m.fk_network_mapping_id != nil {
		fields = append(fields, domainbinding.FieldFkNetworkMappingID)
	}
	if m.name != nil {
		fields = append(fields, domainbinding.FieldName)
	}
	if m.domain != nil {
		fields = append(fields, domainbinding.FieldDomain)
	}
	if m.gateway_port != nil {
		fields = append(fields, domainbinding.FieldGatewayPort)
	}
	if m.create_time != nil {
		fields = append(fields, domainbinding.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DomainBindingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case domainbinding.FieldUserID:
		return m.UserID()
	case domainbinding.FieldFkComputeInstanceID:
		return m.FkComputeInstanceID()
	case domainbinding.FieldFkNetworkMappingID:
		return m.FkNetworkMappingID()
	case domainbinding.FieldName:
		return m.Name()
	case domainbinding.FieldDomain:
		return m.Domain()
	case domainbinding.FieldGatewayPort:
		return m.GatewayPort()
	case domainbinding.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DomainBindingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case domainbinding.FieldUserID:
		return m.OldUserID(ctx)
	case domainbinding.FieldFkComputeInstanceID:
		return m.OldFkComputeInstanceID(ctx)
	case domainbinding.FieldFkNetworkMappingID:
		return m.OldFkNetworkMappingID(ctx)
	case domainbinding.FieldName:
		return m.OldName(ctx)
	case domainbinding.FieldDomain:
		return m.OldDomain(ctx)
	case domainbinding.FieldGatewayPort:
		return m.OldGatewayPort(ctx)
	case domainbinding.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown DomainBinding field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainBindingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case domainbinding.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case domainbinding.FieldFkComputeInstanceID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkComputeInstanceID(v)
		return nil
	case domainbinding.FieldFkNetworkMappingID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkNetworkMappingID(v)
		return nil
	case domainbinding.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case domainbinding.FieldDomain:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomain(v)
		return nil
	case domainbinding.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPort(v)
		return nil
	case domainbinding.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown DomainBinding field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DomainBindingMutation) AddedFields() []string {
	var fields []string
	if m.addgateway_port != nil {
		fields = append(fields, domainbinding.FieldGatewayPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DomainBindingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case domainbinding.FieldGatewayPort:
		return m.AddedGatewayPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DomainBindingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case domainbinding.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGatewayPort(v)
		return nil
	}
	return fmt.Errorf("unknown DomainBinding numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DomainBindingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DomainBindingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DomainBindingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DomainBinding nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DomainBindingMutation) ResetField(name string) error {
	switch name {
	case domainbinding.FieldUserID:
		m.ResetUserID()
		return nil
	case domainbinding.FieldFkComputeInstanceID:
		m.ResetFkComputeInstanceID()
		return nil
	case domainbinding.FieldFkNetworkMappingID:
		m.ResetFkNetworkMappingID()
		return nil
	case domainbinding.FieldName:
		m.ResetName()
		return nil
	case domainbinding.FieldDomain:
		m.ResetDomain()
		return nil
	case domainbinding.FieldGatewayPort:
		m.ResetGatewayPort()
		return nil
	case domainbinding.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown DomainBinding field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DomainBindingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DomainBindingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DomainBindingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DomainBindingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DomainBindingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DomainBindingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DomainBindingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown DomainBinding unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DomainBindingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown DomainBinding edge %s", name)
}

// EmployeeMutation represents an operation that mutates the Employee nodes in the graph.
type EmployeeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	age           *int32
	addage        *int32
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Employee, error)
	predicates    []predicate.Employee
}

var _ ent.Mutation = (*EmployeeMutation)(nil)

// employeeOption allows management of the mutation configuration using functional options.
type employeeOption func(*EmployeeMutation)

// newEmployeeMutation creates new mutation for the Employee entity.
func newEmployeeMutation(c config, op Op, opts ...employeeOption) *EmployeeMutation {
	m := &EmployeeMutation{
		config:        c,
		op:            op,
		typ:           TypeEmployee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmployeeID sets the ID field of the mutation.
func withEmployeeID(id int) employeeOption {
	return func(m *EmployeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Employee
		)
		m.oldValue = func(ctx context.Context) (*Employee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Employee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmployee sets the old Employee of the mutation.
func withEmployee(node *Employee) employeeOption {
	return func(m *EmployeeMutation) {
		m.oldValue = func(context.Context) (*Employee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmployeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmployeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmployeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmployeeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Employee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EmployeeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EmployeeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EmployeeMutation) ResetName() {
	m.name = nil
}

// SetAge sets the "age" field.
func (m *EmployeeMutation) SetAge(i int32) {
	m.age = &i
	m.addage = nil
}

// Age returns the value of the "age" field in the mutation.
func (m *EmployeeMutation) Age() (r int32, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// OldAge returns the old "age" field's value of the Employee entity.
// If the Employee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmployeeMutation) OldAge(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAge is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAge: %w", err)
	}
	return oldValue.Age, nil
}

// AddAge adds i to the "age" field.
func (m *EmployeeMutation) AddAge(i int32) {
	if m.addage != nil {
		*m.addage += i
	} else {
		m.addage = &i
	}
}

// AddedAge returns the value that was added to the "age" field in this mutation.
func (m *EmployeeMutation) AddedAge() (r int32, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ClearAge clears the value of the "age" field.
func (m *EmployeeMutation) ClearAge() {
	m.age = nil
	m.addage = nil
	m.clearedFields[employee.FieldAge] = struct{}{}
}

// AgeCleared returns if the "age" field was cleared in this mutation.
func (m *EmployeeMutation) AgeCleared() bool {
	_, ok := m.clearedFields[employee.FieldAge]
	return ok
}

// ResetAge resets all changes to the "age" field.
func (m *EmployeeMutation) ResetAge() {
	m.age = nil
	m.addage = nil
	delete(m.clearedFields, employee.FieldAge)
}

// Where appends a list predicates to the EmployeeMutation builder.
func (m *EmployeeMutation) Where(ps ...predicate.Employee) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmployeeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmployeeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Employee, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmployeeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmployeeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Employee).
func (m *EmployeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmployeeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, employee.FieldName)
	}
	if m.age != nil {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmployeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldName:
		return m.Name()
	case employee.FieldAge:
		return m.Age()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmployeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case employee.FieldName:
		return m.OldName(ctx)
	case employee.FieldAge:
		return m.OldAge(ctx)
	}
	return nil, fmt.Errorf("unknown Employee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case employee.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case employee.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmployeeMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmployeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case employee.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmployeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case employee.FieldAge:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown Employee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmployeeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(employee.FieldAge) {
		fields = append(fields, employee.FieldAge)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmployeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmployeeMutation) ClearField(name string) error {
	switch name {
	case employee.FieldAge:
		m.ClearAge()
		return nil
	}
	return fmt.Errorf("unknown Employee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmployeeMutation) ResetField(name string) error {
	switch name {
	case employee.FieldName:
		m.ResetName()
		return nil
	case employee.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown Employee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmployeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmployeeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmployeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmployeeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmployeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmployeeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmployeeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Employee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmployeeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Employee edge %s", name)
}

// GatewayMutation represents an operation that mutates the Gateway nodes in the graph.
type GatewayMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	ip            *string
	port          *int32
	addport       *int32
	internal_ip   *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Gateway, error)
	predicates    []predicate.Gateway
}

var _ ent.Mutation = (*GatewayMutation)(nil)

// gatewayOption allows management of the mutation configuration using functional options.
type gatewayOption func(*GatewayMutation)

// newGatewayMutation creates new mutation for the Gateway entity.
func newGatewayMutation(c config, op Op, opts ...gatewayOption) *GatewayMutation {
	m := &GatewayMutation{
		config:        c,
		op:            op,
		typ:           TypeGateway,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayID sets the ID field of the mutation.
func withGatewayID(id uuid.UUID) gatewayOption {
	return func(m *GatewayMutation) {
		var (
			err   error
			once  sync.Once
			value *Gateway
		)
		m.oldValue = func(ctx context.Context) (*Gateway, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gateway.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGateway sets the old Gateway of the mutation.
func withGateway(node *Gateway) gatewayOption {
	return func(m *GatewayMutation) {
		m.oldValue = func(context.Context) (*Gateway, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Gateway entities.
func (m *GatewayMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GatewayMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Gateway.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GatewayMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GatewayMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GatewayMutation) ResetName() {
	m.name = nil
}

// SetIP sets the "ip" field.
func (m *GatewayMutation) SetIP(s string) {
	m.ip = &s
}

// IP returns the value of the "ip" field in the mutation.
func (m *GatewayMutation) IP() (r string, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// ResetIP resets all changes to the "ip" field.
func (m *GatewayMutation) ResetIP() {
	m.ip = nil
}

// SetPort sets the "port" field.
func (m *GatewayMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *GatewayMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *GatewayMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *GatewayMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *GatewayMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetInternalIP sets the "internal_ip" field.
func (m *GatewayMutation) SetInternalIP(s string) {
	m.internal_ip = &s
}

// InternalIP returns the value of the "internal_ip" field in the mutation.
func (m *GatewayMutation) InternalIP() (r string, exists bool) {
	v := m.internal_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldInternalIP returns the old "internal_ip" field's value of the Gateway entity.
// If the Gateway object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayMutation) OldInternalIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInternalIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInternalIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInternalIP: %w", err)
	}
	return oldValue.InternalIP, nil
}

// ResetInternalIP resets all changes to the "internal_ip" field.
func (m *GatewayMutation) ResetInternalIP() {
	m.internal_ip = nil
}

// Where appends a list predicates to the GatewayMutation builder.
func (m *GatewayMutation) Where(ps ...predicate.Gateway) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GatewayMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GatewayMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Gateway, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GatewayMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GatewayMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Gateway).
func (m *GatewayMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, gateway.FieldName)
	}
	if m.ip != nil {
		fields = append(fields, gateway.FieldIP)
	}
	if m.port != nil {
		fields = append(fields, gateway.FieldPort)
	}
	if m.internal_ip != nil {
		fields = append(fields, gateway.FieldInternalIP)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldName:
		return m.Name()
	case gateway.FieldIP:
		return m.IP()
	case gateway.FieldPort:
		return m.Port()
	case gateway.FieldInternalIP:
		return m.InternalIP()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gateway.FieldName:
		return m.OldName(ctx)
	case gateway.FieldIP:
		return m.OldIP(ctx)
	case gateway.FieldPort:
		return m.OldPort(ctx)
	case gateway.FieldInternalIP:
		return m.OldInternalIP(ctx)
	}
	return nil, fmt.Errorf("unknown Gateway field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case gateway.FieldIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case gateway.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case gateway.FieldInternalIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInternalIP(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, gateway.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gateway.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gateway.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown Gateway numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gateway nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayMutation) ResetField(name string) error {
	switch name {
	case gateway.FieldName:
		m.ResetName()
		return nil
	case gateway.FieldIP:
		m.ResetIP()
		return nil
	case gateway.FieldPort:
		m.ResetPort()
		return nil
	case gateway.FieldInternalIP:
		m.ResetInternalIP()
		return nil
	}
	return fmt.Errorf("unknown Gateway field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Gateway unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Gateway edge %s", name)
}

// GatewayPortMutation represents an operation that mutates the GatewayPort nodes in the graph.
type GatewayPortMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_gateway_id *uuid.UUID
	port          *int32
	addport       *int32
	is_use        *bool
	is_public     *bool
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*GatewayPort, error)
	predicates    []predicate.GatewayPort
}

var _ ent.Mutation = (*GatewayPortMutation)(nil)

// gatewayportOption allows management of the mutation configuration using functional options.
type gatewayportOption func(*GatewayPortMutation)

// newGatewayPortMutation creates new mutation for the GatewayPort entity.
func newGatewayPortMutation(c config, op Op, opts ...gatewayportOption) *GatewayPortMutation {
	m := &GatewayPortMutation{
		config:        c,
		op:            op,
		typ:           TypeGatewayPort,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGatewayPortID sets the ID field of the mutation.
func withGatewayPortID(id uuid.UUID) gatewayportOption {
	return func(m *GatewayPortMutation) {
		var (
			err   error
			once  sync.Once
			value *GatewayPort
		)
		m.oldValue = func(ctx context.Context) (*GatewayPort, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GatewayPort.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGatewayPort sets the old GatewayPort of the mutation.
func withGatewayPort(node *GatewayPort) gatewayportOption {
	return func(m *GatewayPortMutation) {
		m.oldValue = func(context.Context) (*GatewayPort, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GatewayPortMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GatewayPortMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GatewayPort entities.
func (m *GatewayPortMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GatewayPortMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GatewayPortMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GatewayPort.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (m *GatewayPortMutation) SetFkGatewayID(u uuid.UUID) {
	m.fk_gateway_id = &u
}

// FkGatewayID returns the value of the "fk_gateway_id" field in the mutation.
func (m *GatewayPortMutation) FkGatewayID() (r uuid.UUID, exists bool) {
	v := m.fk_gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkGatewayID returns the old "fk_gateway_id" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldFkGatewayID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkGatewayID: %w", err)
	}
	return oldValue.FkGatewayID, nil
}

// ResetFkGatewayID resets all changes to the "fk_gateway_id" field.
func (m *GatewayPortMutation) ResetFkGatewayID() {
	m.fk_gateway_id = nil
}

// SetPort sets the "port" field.
func (m *GatewayPortMutation) SetPort(i int32) {
	m.port = &i
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *GatewayPortMutation) Port() (r int32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds i to the "port" field.
func (m *GatewayPortMutation) AddPort(i int32) {
	if m.addport != nil {
		*m.addport += i
	} else {
		m.addport = &i
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *GatewayPortMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ResetPort resets all changes to the "port" field.
func (m *GatewayPortMutation) ResetPort() {
	m.port = nil
	m.addport = nil
}

// SetIsUse sets the "is_use" field.
func (m *GatewayPortMutation) SetIsUse(b bool) {
	m.is_use = &b
}

// IsUse returns the value of the "is_use" field in the mutation.
func (m *GatewayPortMutation) IsUse() (r bool, exists bool) {
	v := m.is_use
	if v == nil {
		return
	}
	return *v, true
}

// OldIsUse returns the old "is_use" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldIsUse(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsUse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsUse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsUse: %w", err)
	}
	return oldValue.IsUse, nil
}

// ResetIsUse resets all changes to the "is_use" field.
func (m *GatewayPortMutation) ResetIsUse() {
	m.is_use = nil
}

// SetIsPublic sets the "is_public" field.
func (m *GatewayPortMutation) SetIsPublic(b bool) {
	m.is_public = &b
}

// IsPublic returns the value of the "is_public" field in the mutation.
func (m *GatewayPortMutation) IsPublic() (r bool, exists bool) {
	v := m.is_public
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPublic returns the old "is_public" field's value of the GatewayPort entity.
// If the GatewayPort object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GatewayPortMutation) OldIsPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPublic: %w", err)
	}
	return oldValue.IsPublic, nil
}

// ResetIsPublic resets all changes to the "is_public" field.
func (m *GatewayPortMutation) ResetIsPublic() {
	m.is_public = nil
}

// Where appends a list predicates to the GatewayPortMutation builder.
func (m *GatewayPortMutation) Where(ps ...predicate.GatewayPort) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GatewayPortMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GatewayPortMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GatewayPort, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GatewayPortMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GatewayPortMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GatewayPort).
func (m *GatewayPortMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GatewayPortMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.fk_gateway_id != nil {
		fields = append(fields, gatewayport.FieldFkGatewayID)
	}
	if m.port != nil {
		fields = append(fields, gatewayport.FieldPort)
	}
	if m.is_use != nil {
		fields = append(fields, gatewayport.FieldIsUse)
	}
	if m.is_public != nil {
		fields = append(fields, gatewayport.FieldIsPublic)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GatewayPortMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gatewayport.FieldFkGatewayID:
		return m.FkGatewayID()
	case gatewayport.FieldPort:
		return m.Port()
	case gatewayport.FieldIsUse:
		return m.IsUse()
	case gatewayport.FieldIsPublic:
		return m.IsPublic()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GatewayPortMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gatewayport.FieldFkGatewayID:
		return m.OldFkGatewayID(ctx)
	case gatewayport.FieldPort:
		return m.OldPort(ctx)
	case gatewayport.FieldIsUse:
		return m.OldIsUse(ctx)
	case gatewayport.FieldIsPublic:
		return m.OldIsPublic(ctx)
	}
	return nil, fmt.Errorf("unknown GatewayPort field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayPortMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gatewayport.FieldFkGatewayID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkGatewayID(v)
		return nil
	case gatewayport.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	case gatewayport.FieldIsUse:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsUse(v)
		return nil
	case gatewayport.FieldIsPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPublic(v)
		return nil
	}
	return fmt.Errorf("unknown GatewayPort field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GatewayPortMutation) AddedFields() []string {
	var fields []string
	if m.addport != nil {
		fields = append(fields, gatewayport.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GatewayPortMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case gatewayport.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GatewayPortMutation) AddField(name string, value ent.Value) error {
	switch name {
	case gatewayport.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown GatewayPort numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GatewayPortMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GatewayPortMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GatewayPortMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GatewayPort nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GatewayPortMutation) ResetField(name string) error {
	switch name {
	case gatewayport.FieldFkGatewayID:
		m.ResetFkGatewayID()
		return nil
	case gatewayport.FieldPort:
		m.ResetPort()
		return nil
	case gatewayport.FieldIsUse:
		m.ResetIsUse()
		return nil
	case gatewayport.FieldIsPublic:
		m.ResetIsPublic()
		return nil
	}
	return fmt.Errorf("unknown GatewayPort field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GatewayPortMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GatewayPortMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GatewayPortMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GatewayPortMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GatewayPortMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GatewayPortMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GatewayPortMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown GatewayPort unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GatewayPortMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown GatewayPort edge %s", name)
}

// NetworkMappingMutation represents an operation that mutates the NetworkMapping nodes in the graph.
type NetworkMappingMutation struct {
	config
	op               Op
	typ              string
	id               *uuid.UUID
	name             *string
	protocol         *string
	fk_gateway_id    *uuid.UUID
	gateway_port     *int32
	addgateway_port  *int32
	gateway_ip       *string
	computer_port    *int32
	addcomputer_port *int32
	status           *int
	addstatus        *int
	fk_computer_id   *uuid.UUID
	fk_user_id       *uuid.UUID
	delete_state     *bool
	create_time      *time.Time
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*NetworkMapping, error)
	predicates       []predicate.NetworkMapping
}

var _ ent.Mutation = (*NetworkMappingMutation)(nil)

// networkmappingOption allows management of the mutation configuration using functional options.
type networkmappingOption func(*NetworkMappingMutation)

// newNetworkMappingMutation creates new mutation for the NetworkMapping entity.
func newNetworkMappingMutation(c config, op Op, opts ...networkmappingOption) *NetworkMappingMutation {
	m := &NetworkMappingMutation{
		config:        c,
		op:            op,
		typ:           TypeNetworkMapping,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNetworkMappingID sets the ID field of the mutation.
func withNetworkMappingID(id uuid.UUID) networkmappingOption {
	return func(m *NetworkMappingMutation) {
		var (
			err   error
			once  sync.Once
			value *NetworkMapping
		)
		m.oldValue = func(ctx context.Context) (*NetworkMapping, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NetworkMapping.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNetworkMapping sets the old NetworkMapping of the mutation.
func withNetworkMapping(node *NetworkMapping) networkmappingOption {
	return func(m *NetworkMappingMutation) {
		m.oldValue = func(context.Context) (*NetworkMapping, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NetworkMappingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NetworkMappingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NetworkMapping entities.
func (m *NetworkMappingMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NetworkMappingMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NetworkMappingMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NetworkMapping.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *NetworkMappingMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *NetworkMappingMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *NetworkMappingMutation) ResetName() {
	m.name = nil
}

// SetProtocol sets the "protocol" field.
func (m *NetworkMappingMutation) SetProtocol(s string) {
	m.protocol = &s
}

// Protocol returns the value of the "protocol" field in the mutation.
func (m *NetworkMappingMutation) Protocol() (r string, exists bool) {
	v := m.protocol
	if v == nil {
		return
	}
	return *v, true
}

// OldProtocol returns the old "protocol" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldProtocol(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProtocol is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProtocol requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProtocol: %w", err)
	}
	return oldValue.Protocol, nil
}

// ResetProtocol resets all changes to the "protocol" field.
func (m *NetworkMappingMutation) ResetProtocol() {
	m.protocol = nil
}

// SetFkGatewayID sets the "fk_gateway_id" field.
func (m *NetworkMappingMutation) SetFkGatewayID(u uuid.UUID) {
	m.fk_gateway_id = &u
}

// FkGatewayID returns the value of the "fk_gateway_id" field in the mutation.
func (m *NetworkMappingMutation) FkGatewayID() (r uuid.UUID, exists bool) {
	v := m.fk_gateway_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkGatewayID returns the old "fk_gateway_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkGatewayID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkGatewayID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkGatewayID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkGatewayID: %w", err)
	}
	return oldValue.FkGatewayID, nil
}

// ResetFkGatewayID resets all changes to the "fk_gateway_id" field.
func (m *NetworkMappingMutation) ResetFkGatewayID() {
	m.fk_gateway_id = nil
}

// SetGatewayPort sets the "gateway_port" field.
func (m *NetworkMappingMutation) SetGatewayPort(i int32) {
	m.gateway_port = &i
	m.addgateway_port = nil
}

// GatewayPort returns the value of the "gateway_port" field in the mutation.
func (m *NetworkMappingMutation) GatewayPort() (r int32, exists bool) {
	v := m.gateway_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayPort returns the old "gateway_port" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldGatewayPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayPort: %w", err)
	}
	return oldValue.GatewayPort, nil
}

// AddGatewayPort adds i to the "gateway_port" field.
func (m *NetworkMappingMutation) AddGatewayPort(i int32) {
	if m.addgateway_port != nil {
		*m.addgateway_port += i
	} else {
		m.addgateway_port = &i
	}
}

// AddedGatewayPort returns the value that was added to the "gateway_port" field in this mutation.
func (m *NetworkMappingMutation) AddedGatewayPort() (r int32, exists bool) {
	v := m.addgateway_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGatewayPort resets all changes to the "gateway_port" field.
func (m *NetworkMappingMutation) ResetGatewayPort() {
	m.gateway_port = nil
	m.addgateway_port = nil
}

// SetGatewayIP sets the "gateway_ip" field.
func (m *NetworkMappingMutation) SetGatewayIP(s string) {
	m.gateway_ip = &s
}

// GatewayIP returns the value of the "gateway_ip" field in the mutation.
func (m *NetworkMappingMutation) GatewayIP() (r string, exists bool) {
	v := m.gateway_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldGatewayIP returns the old "gateway_ip" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldGatewayIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGatewayIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGatewayIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGatewayIP: %w", err)
	}
	return oldValue.GatewayIP, nil
}

// ResetGatewayIP resets all changes to the "gateway_ip" field.
func (m *NetworkMappingMutation) ResetGatewayIP() {
	m.gateway_ip = nil
}

// SetComputerPort sets the "computer_port" field.
func (m *NetworkMappingMutation) SetComputerPort(i int32) {
	m.computer_port = &i
	m.addcomputer_port = nil
}

// ComputerPort returns the value of the "computer_port" field in the mutation.
func (m *NetworkMappingMutation) ComputerPort() (r int32, exists bool) {
	v := m.computer_port
	if v == nil {
		return
	}
	return *v, true
}

// OldComputerPort returns the old "computer_port" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldComputerPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComputerPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComputerPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldComputerPort: %w", err)
	}
	return oldValue.ComputerPort, nil
}

// AddComputerPort adds i to the "computer_port" field.
func (m *NetworkMappingMutation) AddComputerPort(i int32) {
	if m.addcomputer_port != nil {
		*m.addcomputer_port += i
	} else {
		m.addcomputer_port = &i
	}
}

// AddedComputerPort returns the value that was added to the "computer_port" field in this mutation.
func (m *NetworkMappingMutation) AddedComputerPort() (r int32, exists bool) {
	v := m.addcomputer_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetComputerPort resets all changes to the "computer_port" field.
func (m *NetworkMappingMutation) ResetComputerPort() {
	m.computer_port = nil
	m.addcomputer_port = nil
}

// SetStatus sets the "status" field.
func (m *NetworkMappingMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *NetworkMappingMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *NetworkMappingMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *NetworkMappingMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *NetworkMappingMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetFkComputerID sets the "fk_computer_id" field.
func (m *NetworkMappingMutation) SetFkComputerID(u uuid.UUID) {
	m.fk_computer_id = &u
}

// FkComputerID returns the value of the "fk_computer_id" field in the mutation.
func (m *NetworkMappingMutation) FkComputerID() (r uuid.UUID, exists bool) {
	v := m.fk_computer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkComputerID returns the old "fk_computer_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkComputerID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkComputerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkComputerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkComputerID: %w", err)
	}
	return oldValue.FkComputerID, nil
}

// ResetFkComputerID resets all changes to the "fk_computer_id" field.
func (m *NetworkMappingMutation) ResetFkComputerID() {
	m.fk_computer_id = nil
}

// SetFkUserID sets the "fk_user_id" field.
func (m *NetworkMappingMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *NetworkMappingMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *NetworkMappingMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetDeleteState sets the "delete_state" field.
func (m *NetworkMappingMutation) SetDeleteState(b bool) {
	m.delete_state = &b
}

// DeleteState returns the value of the "delete_state" field in the mutation.
func (m *NetworkMappingMutation) DeleteState() (r bool, exists bool) {
	v := m.delete_state
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleteState returns the old "delete_state" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldDeleteState(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleteState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleteState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleteState: %w", err)
	}
	return oldValue.DeleteState, nil
}

// ResetDeleteState resets all changes to the "delete_state" field.
func (m *NetworkMappingMutation) ResetDeleteState() {
	m.delete_state = nil
}

// SetCreateTime sets the "create_time" field.
func (m *NetworkMappingMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *NetworkMappingMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the NetworkMapping entity.
// If the NetworkMapping object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NetworkMappingMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *NetworkMappingMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the NetworkMappingMutation builder.
func (m *NetworkMappingMutation) Where(ps ...predicate.NetworkMapping) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NetworkMappingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NetworkMappingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NetworkMapping, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NetworkMappingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NetworkMappingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NetworkMapping).
func (m *NetworkMappingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NetworkMappingMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.name != nil {
		fields = append(fields, networkmapping.FieldName)
	}
	if m.protocol != nil {
		fields = append(fields, networkmapping.FieldProtocol)
	}
	if m.fk_gateway_id != nil {
		fields = append(fields, networkmapping.FieldFkGatewayID)
	}
	if m.gateway_port != nil {
		fields = append(fields, networkmapping.FieldGatewayPort)
	}
	if m.gateway_ip != nil {
		fields = append(fields, networkmapping.FieldGatewayIP)
	}
	if m.computer_port != nil {
		fields = append(fields, networkmapping.FieldComputerPort)
	}
	if m.status != nil {
		fields = append(fields, networkmapping.FieldStatus)
	}
	if m.fk_computer_id != nil {
		fields = append(fields, networkmapping.FieldFkComputerID)
	}
	if m.fk_user_id != nil {
		fields = append(fields, networkmapping.FieldFkUserID)
	}
	if m.delete_state != nil {
		fields = append(fields, networkmapping.FieldDeleteState)
	}
	if m.create_time != nil {
		fields = append(fields, networkmapping.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NetworkMappingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case networkmapping.FieldName:
		return m.Name()
	case networkmapping.FieldProtocol:
		return m.Protocol()
	case networkmapping.FieldFkGatewayID:
		return m.FkGatewayID()
	case networkmapping.FieldGatewayPort:
		return m.GatewayPort()
	case networkmapping.FieldGatewayIP:
		return m.GatewayIP()
	case networkmapping.FieldComputerPort:
		return m.ComputerPort()
	case networkmapping.FieldStatus:
		return m.Status()
	case networkmapping.FieldFkComputerID:
		return m.FkComputerID()
	case networkmapping.FieldFkUserID:
		return m.FkUserID()
	case networkmapping.FieldDeleteState:
		return m.DeleteState()
	case networkmapping.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NetworkMappingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case networkmapping.FieldName:
		return m.OldName(ctx)
	case networkmapping.FieldProtocol:
		return m.OldProtocol(ctx)
	case networkmapping.FieldFkGatewayID:
		return m.OldFkGatewayID(ctx)
	case networkmapping.FieldGatewayPort:
		return m.OldGatewayPort(ctx)
	case networkmapping.FieldGatewayIP:
		return m.OldGatewayIP(ctx)
	case networkmapping.FieldComputerPort:
		return m.OldComputerPort(ctx)
	case networkmapping.FieldStatus:
		return m.OldStatus(ctx)
	case networkmapping.FieldFkComputerID:
		return m.OldFkComputerID(ctx)
	case networkmapping.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case networkmapping.FieldDeleteState:
		return m.OldDeleteState(ctx)
	case networkmapping.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown NetworkMapping field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMappingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case networkmapping.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case networkmapping.FieldProtocol:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProtocol(v)
		return nil
	case networkmapping.FieldFkGatewayID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkGatewayID(v)
		return nil
	case networkmapping.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayPort(v)
		return nil
	case networkmapping.FieldGatewayIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGatewayIP(v)
		return nil
	case networkmapping.FieldComputerPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetComputerPort(v)
		return nil
	case networkmapping.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case networkmapping.FieldFkComputerID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkComputerID(v)
		return nil
	case networkmapping.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case networkmapping.FieldDeleteState:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleteState(v)
		return nil
	case networkmapping.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NetworkMappingMutation) AddedFields() []string {
	var fields []string
	if m.addgateway_port != nil {
		fields = append(fields, networkmapping.FieldGatewayPort)
	}
	if m.addcomputer_port != nil {
		fields = append(fields, networkmapping.FieldComputerPort)
	}
	if m.addstatus != nil {
		fields = append(fields, networkmapping.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NetworkMappingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case networkmapping.FieldGatewayPort:
		return m.AddedGatewayPort()
	case networkmapping.FieldComputerPort:
		return m.AddedComputerPort()
	case networkmapping.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NetworkMappingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case networkmapping.FieldGatewayPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGatewayPort(v)
		return nil
	case networkmapping.FieldComputerPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddComputerPort(v)
		return nil
	case networkmapping.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NetworkMappingMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NetworkMappingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NetworkMappingMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NetworkMapping nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NetworkMappingMutation) ResetField(name string) error {
	switch name {
	case networkmapping.FieldName:
		m.ResetName()
		return nil
	case networkmapping.FieldProtocol:
		m.ResetProtocol()
		return nil
	case networkmapping.FieldFkGatewayID:
		m.ResetFkGatewayID()
		return nil
	case networkmapping.FieldGatewayPort:
		m.ResetGatewayPort()
		return nil
	case networkmapping.FieldGatewayIP:
		m.ResetGatewayIP()
		return nil
	case networkmapping.FieldComputerPort:
		m.ResetComputerPort()
		return nil
	case networkmapping.FieldStatus:
		m.ResetStatus()
		return nil
	case networkmapping.FieldFkComputerID:
		m.ResetFkComputerID()
		return nil
	case networkmapping.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case networkmapping.FieldDeleteState:
		m.ResetDeleteState()
		return nil
	case networkmapping.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown NetworkMapping field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NetworkMappingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NetworkMappingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NetworkMappingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NetworkMappingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NetworkMappingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NetworkMappingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NetworkMappingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown NetworkMapping unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NetworkMappingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown NetworkMapping edge %s", name)
}

// S3BucketMutation represents an operation that mutates the S3Bucket nodes in the graph.
type S3BucketMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_user_id    *uuid.UUID
	bucket_name   *string
	createdTime   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*S3Bucket, error)
	predicates    []predicate.S3Bucket
}

var _ ent.Mutation = (*S3BucketMutation)(nil)

// s3bucketOption allows management of the mutation configuration using functional options.
type s3bucketOption func(*S3BucketMutation)

// newS3BucketMutation creates new mutation for the S3Bucket entity.
func newS3BucketMutation(c config, op Op, opts ...s3bucketOption) *S3BucketMutation {
	m := &S3BucketMutation{
		config:        c,
		op:            op,
		typ:           TypeS3Bucket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3BucketID sets the ID field of the mutation.
func withS3BucketID(id uuid.UUID) s3bucketOption {
	return func(m *S3BucketMutation) {
		var (
			err   error
			once  sync.Once
			value *S3Bucket
		)
		m.oldValue = func(ctx context.Context) (*S3Bucket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3Bucket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3Bucket sets the old S3Bucket of the mutation.
func withS3Bucket(node *S3Bucket) s3bucketOption {
	return func(m *S3BucketMutation) {
		m.oldValue = func(context.Context) (*S3Bucket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3BucketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3BucketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3Bucket entities.
func (m *S3BucketMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3BucketMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3BucketMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3Bucket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *S3BucketMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *S3BucketMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the S3Bucket entity.
// If the S3Bucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3BucketMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *S3BucketMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetBucketName sets the "bucket_name" field.
func (m *S3BucketMutation) SetBucketName(s string) {
	m.bucket_name = &s
}

// BucketName returns the value of the "bucket_name" field in the mutation.
func (m *S3BucketMutation) BucketName() (r string, exists bool) {
	v := m.bucket_name
	if v == nil {
		return
	}
	return *v, true
}

// OldBucketName returns the old "bucket_name" field's value of the S3Bucket entity.
// If the S3Bucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3BucketMutation) OldBucketName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBucketName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBucketName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBucketName: %w", err)
	}
	return oldValue.BucketName, nil
}

// ResetBucketName resets all changes to the "bucket_name" field.
func (m *S3BucketMutation) ResetBucketName() {
	m.bucket_name = nil
}

// SetCreatedTime sets the "createdTime" field.
func (m *S3BucketMutation) SetCreatedTime(t time.Time) {
	m.createdTime = &t
}

// CreatedTime returns the value of the "createdTime" field in the mutation.
func (m *S3BucketMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.createdTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "createdTime" field's value of the S3Bucket entity.
// If the S3Bucket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3BucketMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "createdTime" field.
func (m *S3BucketMutation) ResetCreatedTime() {
	m.createdTime = nil
}

// Where appends a list predicates to the S3BucketMutation builder.
func (m *S3BucketMutation) Where(ps ...predicate.S3Bucket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3BucketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3BucketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3Bucket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3BucketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3BucketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3Bucket).
func (m *S3BucketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3BucketMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.fk_user_id != nil {
		fields = append(fields, s3bucket.FieldFkUserID)
	}
	if m.bucket_name != nil {
		fields = append(fields, s3bucket.FieldBucketName)
	}
	if m.createdTime != nil {
		fields = append(fields, s3bucket.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3BucketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3bucket.FieldFkUserID:
		return m.FkUserID()
	case s3bucket.FieldBucketName:
		return m.BucketName()
	case s3bucket.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3BucketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3bucket.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case s3bucket.FieldBucketName:
		return m.OldBucketName(ctx)
	case s3bucket.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown S3Bucket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3BucketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3bucket.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case s3bucket.FieldBucketName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBucketName(v)
		return nil
	case s3bucket.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown S3Bucket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3BucketMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3BucketMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3BucketMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown S3Bucket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3BucketMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3BucketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3BucketMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3Bucket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3BucketMutation) ResetField(name string) error {
	switch name {
	case s3bucket.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case s3bucket.FieldBucketName:
		m.ResetBucketName()
		return nil
	case s3bucket.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown S3Bucket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3BucketMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3BucketMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3BucketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3BucketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3BucketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3BucketMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3BucketMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown S3Bucket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3BucketMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown S3Bucket edge %s", name)
}

// S3UserMutation represents an operation that mutates the S3User nodes in the graph.
type S3UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	fk_user_id    *uuid.UUID
	_type         *int8
	add_type      *int8
	access_key    *string
	secret_key    *string
	create_time   *time.Time
	update_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*S3User, error)
	predicates    []predicate.S3User
}

var _ ent.Mutation = (*S3UserMutation)(nil)

// s3userOption allows management of the mutation configuration using functional options.
type s3userOption func(*S3UserMutation)

// newS3UserMutation creates new mutation for the S3User entity.
func newS3UserMutation(c config, op Op, opts ...s3userOption) *S3UserMutation {
	m := &S3UserMutation{
		config:        c,
		op:            op,
		typ:           TypeS3User,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withS3UserID sets the ID field of the mutation.
func withS3UserID(id uuid.UUID) s3userOption {
	return func(m *S3UserMutation) {
		var (
			err   error
			once  sync.Once
			value *S3User
		)
		m.oldValue = func(ctx context.Context) (*S3User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().S3User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withS3User sets the old S3User of the mutation.
func withS3User(node *S3User) s3userOption {
	return func(m *S3UserMutation) {
		m.oldValue = func(context.Context) (*S3User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m S3UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m S3UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of S3User entities.
func (m *S3UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *S3UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *S3UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().S3User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *S3UserMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *S3UserMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *S3UserMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetType sets the "type" field.
func (m *S3UserMutation) SetType(i int8) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *S3UserMutation) GetType() (r int8, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldType(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *S3UserMutation) AddType(i int8) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *S3UserMutation) AddedType() (r int8, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *S3UserMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetAccessKey sets the "access_key" field.
func (m *S3UserMutation) SetAccessKey(s string) {
	m.access_key = &s
}

// AccessKey returns the value of the "access_key" field in the mutation.
func (m *S3UserMutation) AccessKey() (r string, exists bool) {
	v := m.access_key
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessKey returns the old "access_key" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldAccessKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessKey: %w", err)
	}
	return oldValue.AccessKey, nil
}

// ResetAccessKey resets all changes to the "access_key" field.
func (m *S3UserMutation) ResetAccessKey() {
	m.access_key = nil
}

// SetSecretKey sets the "secret_key" field.
func (m *S3UserMutation) SetSecretKey(s string) {
	m.secret_key = &s
}

// SecretKey returns the value of the "secret_key" field in the mutation.
func (m *S3UserMutation) SecretKey() (r string, exists bool) {
	v := m.secret_key
	if v == nil {
		return
	}
	return *v, true
}

// OldSecretKey returns the old "secret_key" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldSecretKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecretKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecretKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecretKey: %w", err)
	}
	return oldValue.SecretKey, nil
}

// ResetSecretKey resets all changes to the "secret_key" field.
func (m *S3UserMutation) ResetSecretKey() {
	m.secret_key = nil
}

// SetCreateTime sets the "create_time" field.
func (m *S3UserMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *S3UserMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *S3UserMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *S3UserMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *S3UserMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the S3User entity.
// If the S3User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *S3UserMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *S3UserMutation) ResetUpdateTime() {
	m.update_time = nil
}

// Where appends a list predicates to the S3UserMutation builder.
func (m *S3UserMutation) Where(ps ...predicate.S3User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the S3UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *S3UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.S3User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *S3UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *S3UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (S3User).
func (m *S3UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *S3UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.fk_user_id != nil {
		fields = append(fields, s3user.FieldFkUserID)
	}
	if m._type != nil {
		fields = append(fields, s3user.FieldType)
	}
	if m.access_key != nil {
		fields = append(fields, s3user.FieldAccessKey)
	}
	if m.secret_key != nil {
		fields = append(fields, s3user.FieldSecretKey)
	}
	if m.create_time != nil {
		fields = append(fields, s3user.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, s3user.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *S3UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case s3user.FieldFkUserID:
		return m.FkUserID()
	case s3user.FieldType:
		return m.GetType()
	case s3user.FieldAccessKey:
		return m.AccessKey()
	case s3user.FieldSecretKey:
		return m.SecretKey()
	case s3user.FieldCreateTime:
		return m.CreateTime()
	case s3user.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *S3UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case s3user.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case s3user.FieldType:
		return m.OldType(ctx)
	case s3user.FieldAccessKey:
		return m.OldAccessKey(ctx)
	case s3user.FieldSecretKey:
		return m.OldSecretKey(ctx)
	case s3user.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case s3user.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown S3User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case s3user.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case s3user.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case s3user.FieldAccessKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessKey(v)
		return nil
	case s3user.FieldSecretKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecretKey(v)
		return nil
	case s3user.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case s3user.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown S3User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *S3UserMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, s3user.FieldType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *S3UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case s3user.FieldType:
		return m.AddedType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *S3UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case s3user.FieldType:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	}
	return fmt.Errorf("unknown S3User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *S3UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *S3UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *S3UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown S3User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *S3UserMutation) ResetField(name string) error {
	switch name {
	case s3user.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case s3user.FieldType:
		m.ResetType()
		return nil
	case s3user.FieldAccessKey:
		m.ResetAccessKey()
		return nil
	case s3user.FieldSecretKey:
		m.ResetSecretKey()
		return nil
	case s3user.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case s3user.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown S3User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *S3UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *S3UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *S3UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *S3UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *S3UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *S3UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *S3UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown S3User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *S3UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown S3User edge %s", name)
}

// ScriptMutation represents an operation that mutates the Script nodes in the graph.
type ScriptMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int32
	user_id                       *string
	task_number                   *int32
	addtask_number                *int32
	script_name                   *string
	file_address                  *string
	script_content                *string
	create_time                   *time.Time
	update_time                   *time.Time
	clearedFields                 map[string]struct{}
	scriptExecutionRecords        map[int32]struct{}
	removedscriptExecutionRecords map[int32]struct{}
	clearedscriptExecutionRecords bool
	done                          bool
	oldValue                      func(context.Context) (*Script, error)
	predicates                    []predicate.Script
}

var _ ent.Mutation = (*ScriptMutation)(nil)

// scriptOption allows management of the mutation configuration using functional options.
type scriptOption func(*ScriptMutation)

// newScriptMutation creates new mutation for the Script entity.
func newScriptMutation(c config, op Op, opts ...scriptOption) *ScriptMutation {
	m := &ScriptMutation{
		config:        c,
		op:            op,
		typ:           TypeScript,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScriptID sets the ID field of the mutation.
func withScriptID(id int32) scriptOption {
	return func(m *ScriptMutation) {
		var (
			err   error
			once  sync.Once
			value *Script
		)
		m.oldValue = func(ctx context.Context) (*Script, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Script.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScript sets the old Script of the mutation.
func withScript(node *Script) scriptOption {
	return func(m *ScriptMutation) {
		m.oldValue = func(context.Context) (*Script, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScriptMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScriptMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Script entities.
func (m *ScriptMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScriptMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScriptMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Script.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ScriptMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ScriptMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ScriptMutation) ResetUserID() {
	m.user_id = nil
}

// SetTaskNumber sets the "task_number" field.
func (m *ScriptMutation) SetTaskNumber(i int32) {
	m.task_number = &i
	m.addtask_number = nil
}

// TaskNumber returns the value of the "task_number" field in the mutation.
func (m *ScriptMutation) TaskNumber() (r int32, exists bool) {
	v := m.task_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskNumber returns the old "task_number" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldTaskNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskNumber: %w", err)
	}
	return oldValue.TaskNumber, nil
}

// AddTaskNumber adds i to the "task_number" field.
func (m *ScriptMutation) AddTaskNumber(i int32) {
	if m.addtask_number != nil {
		*m.addtask_number += i
	} else {
		m.addtask_number = &i
	}
}

// AddedTaskNumber returns the value that was added to the "task_number" field in this mutation.
func (m *ScriptMutation) AddedTaskNumber() (r int32, exists bool) {
	v := m.addtask_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskNumber resets all changes to the "task_number" field.
func (m *ScriptMutation) ResetTaskNumber() {
	m.task_number = nil
	m.addtask_number = nil
}

// SetScriptName sets the "script_name" field.
func (m *ScriptMutation) SetScriptName(s string) {
	m.script_name = &s
}

// ScriptName returns the value of the "script_name" field in the mutation.
func (m *ScriptMutation) ScriptName() (r string, exists bool) {
	v := m.script_name
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptName returns the old "script_name" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldScriptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptName: %w", err)
	}
	return oldValue.ScriptName, nil
}

// ResetScriptName resets all changes to the "script_name" field.
func (m *ScriptMutation) ResetScriptName() {
	m.script_name = nil
}

// SetFileAddress sets the "file_address" field.
func (m *ScriptMutation) SetFileAddress(s string) {
	m.file_address = &s
}

// FileAddress returns the value of the "file_address" field in the mutation.
func (m *ScriptMutation) FileAddress() (r string, exists bool) {
	v := m.file_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFileAddress returns the old "file_address" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldFileAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileAddress: %w", err)
	}
	return oldValue.FileAddress, nil
}

// ResetFileAddress resets all changes to the "file_address" field.
func (m *ScriptMutation) ResetFileAddress() {
	m.file_address = nil
}

// SetScriptContent sets the "script_content" field.
func (m *ScriptMutation) SetScriptContent(s string) {
	m.script_content = &s
}

// ScriptContent returns the value of the "script_content" field in the mutation.
func (m *ScriptMutation) ScriptContent() (r string, exists bool) {
	v := m.script_content
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptContent returns the old "script_content" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldScriptContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptContent: %w", err)
	}
	return oldValue.ScriptContent, nil
}

// ResetScriptContent resets all changes to the "script_content" field.
func (m *ScriptMutation) ResetScriptContent() {
	m.script_content = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ScriptMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScriptMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScriptMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ScriptMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScriptMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the Script entity.
// If the Script object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScriptMutation) ResetUpdateTime() {
	m.update_time = nil
}

// AddScriptExecutionRecordIDs adds the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by ids.
func (m *ScriptMutation) AddScriptExecutionRecordIDs(ids ...int32) {
	if m.scriptExecutionRecords == nil {
		m.scriptExecutionRecords = make(map[int32]struct{})
	}
	for i := range ids {
		m.scriptExecutionRecords[ids[i]] = struct{}{}
	}
}

// ClearScriptExecutionRecords clears the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity.
func (m *ScriptMutation) ClearScriptExecutionRecords() {
	m.clearedscriptExecutionRecords = true
}

// ScriptExecutionRecordsCleared reports if the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity was cleared.
func (m *ScriptMutation) ScriptExecutionRecordsCleared() bool {
	return m.clearedscriptExecutionRecords
}

// RemoveScriptExecutionRecordIDs removes the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity by IDs.
func (m *ScriptMutation) RemoveScriptExecutionRecordIDs(ids ...int32) {
	if m.removedscriptExecutionRecords == nil {
		m.removedscriptExecutionRecords = make(map[int32]struct{})
	}
	for i := range ids {
		delete(m.scriptExecutionRecords, ids[i])
		m.removedscriptExecutionRecords[ids[i]] = struct{}{}
	}
}

// RemovedScriptExecutionRecords returns the removed IDs of the "scriptExecutionRecords" edge to the ScriptExecutionRecord entity.
func (m *ScriptMutation) RemovedScriptExecutionRecordsIDs() (ids []int32) {
	for id := range m.removedscriptExecutionRecords {
		ids = append(ids, id)
	}
	return
}

// ScriptExecutionRecordsIDs returns the "scriptExecutionRecords" edge IDs in the mutation.
func (m *ScriptMutation) ScriptExecutionRecordsIDs() (ids []int32) {
	for id := range m.scriptExecutionRecords {
		ids = append(ids, id)
	}
	return
}

// ResetScriptExecutionRecords resets all changes to the "scriptExecutionRecords" edge.
func (m *ScriptMutation) ResetScriptExecutionRecords() {
	m.scriptExecutionRecords = nil
	m.clearedscriptExecutionRecords = false
	m.removedscriptExecutionRecords = nil
}

// Where appends a list predicates to the ScriptMutation builder.
func (m *ScriptMutation) Where(ps ...predicate.Script) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScriptMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScriptMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Script, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScriptMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScriptMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Script).
func (m *ScriptMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScriptMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user_id != nil {
		fields = append(fields, script.FieldUserID)
	}
	if m.task_number != nil {
		fields = append(fields, script.FieldTaskNumber)
	}
	if m.script_name != nil {
		fields = append(fields, script.FieldScriptName)
	}
	if m.file_address != nil {
		fields = append(fields, script.FieldFileAddress)
	}
	if m.script_content != nil {
		fields = append(fields, script.FieldScriptContent)
	}
	if m.create_time != nil {
		fields = append(fields, script.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, script.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScriptMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case script.FieldUserID:
		return m.UserID()
	case script.FieldTaskNumber:
		return m.TaskNumber()
	case script.FieldScriptName:
		return m.ScriptName()
	case script.FieldFileAddress:
		return m.FileAddress()
	case script.FieldScriptContent:
		return m.ScriptContent()
	case script.FieldCreateTime:
		return m.CreateTime()
	case script.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScriptMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case script.FieldUserID:
		return m.OldUserID(ctx)
	case script.FieldTaskNumber:
		return m.OldTaskNumber(ctx)
	case script.FieldScriptName:
		return m.OldScriptName(ctx)
	case script.FieldFileAddress:
		return m.OldFileAddress(ctx)
	case script.FieldScriptContent:
		return m.OldScriptContent(ctx)
	case script.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case script.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Script field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptMutation) SetField(name string, value ent.Value) error {
	switch name {
	case script.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case script.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskNumber(v)
		return nil
	case script.FieldScriptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptName(v)
		return nil
	case script.FieldFileAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileAddress(v)
		return nil
	case script.FieldScriptContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptContent(v)
		return nil
	case script.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case script.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Script field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScriptMutation) AddedFields() []string {
	var fields []string
	if m.addtask_number != nil {
		fields = append(fields, script.FieldTaskNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScriptMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case script.FieldTaskNumber:
		return m.AddedTaskNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptMutation) AddField(name string, value ent.Value) error {
	switch name {
	case script.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Script numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScriptMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScriptMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScriptMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Script nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScriptMutation) ResetField(name string) error {
	switch name {
	case script.FieldUserID:
		m.ResetUserID()
		return nil
	case script.FieldTaskNumber:
		m.ResetTaskNumber()
		return nil
	case script.FieldScriptName:
		m.ResetScriptName()
		return nil
	case script.FieldFileAddress:
		m.ResetFileAddress()
		return nil
	case script.FieldScriptContent:
		m.ResetScriptContent()
		return nil
	case script.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case script.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown Script field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScriptMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.scriptExecutionRecords != nil {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScriptMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case script.EdgeScriptExecutionRecords:
		ids := make([]ent.Value, 0, len(m.scriptExecutionRecords))
		for id := range m.scriptExecutionRecords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScriptMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedscriptExecutionRecords != nil {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScriptMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case script.EdgeScriptExecutionRecords:
		ids := make([]ent.Value, 0, len(m.removedscriptExecutionRecords))
		for id := range m.removedscriptExecutionRecords {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScriptMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscriptExecutionRecords {
		edges = append(edges, script.EdgeScriptExecutionRecords)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScriptMutation) EdgeCleared(name string) bool {
	switch name {
	case script.EdgeScriptExecutionRecords:
		return m.clearedscriptExecutionRecords
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScriptMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Script unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScriptMutation) ResetEdge(name string) error {
	switch name {
	case script.EdgeScriptExecutionRecords:
		m.ResetScriptExecutionRecords()
		return nil
	}
	return fmt.Errorf("unknown Script edge %s", name)
}

// ScriptExecutionRecordMutation represents an operation that mutates the ScriptExecutionRecord nodes in the graph.
type ScriptExecutionRecordMutation struct {
	config
	op               Op
	typ              string
	id               *int32
	user_id          *string
	fk_script_id     *int32
	addfk_script_id  *int32
	script_content   *string
	task_number      *int32
	addtask_number   *int32
	script_name      *string
	file_address     *string
	execute_state    *int32
	addexecute_state *int32
	execute_result   *string
	create_time      *time.Time
	update_time      *time.Time
	clearedFields    map[string]struct{}
	script           *int32
	clearedscript    bool
	done             bool
	oldValue         func(context.Context) (*ScriptExecutionRecord, error)
	predicates       []predicate.ScriptExecutionRecord
}

var _ ent.Mutation = (*ScriptExecutionRecordMutation)(nil)

// scriptexecutionrecordOption allows management of the mutation configuration using functional options.
type scriptexecutionrecordOption func(*ScriptExecutionRecordMutation)

// newScriptExecutionRecordMutation creates new mutation for the ScriptExecutionRecord entity.
func newScriptExecutionRecordMutation(c config, op Op, opts ...scriptexecutionrecordOption) *ScriptExecutionRecordMutation {
	m := &ScriptExecutionRecordMutation{
		config:        c,
		op:            op,
		typ:           TypeScriptExecutionRecord,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withScriptExecutionRecordID sets the ID field of the mutation.
func withScriptExecutionRecordID(id int32) scriptexecutionrecordOption {
	return func(m *ScriptExecutionRecordMutation) {
		var (
			err   error
			once  sync.Once
			value *ScriptExecutionRecord
		)
		m.oldValue = func(ctx context.Context) (*ScriptExecutionRecord, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ScriptExecutionRecord.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withScriptExecutionRecord sets the old ScriptExecutionRecord of the mutation.
func withScriptExecutionRecord(node *ScriptExecutionRecord) scriptexecutionrecordOption {
	return func(m *ScriptExecutionRecordMutation) {
		m.oldValue = func(context.Context) (*ScriptExecutionRecord, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ScriptExecutionRecordMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ScriptExecutionRecordMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of ScriptExecutionRecord entities.
func (m *ScriptExecutionRecordMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ScriptExecutionRecordMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ScriptExecutionRecordMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ScriptExecutionRecord.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *ScriptExecutionRecordMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *ScriptExecutionRecordMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *ScriptExecutionRecordMutation) ResetUserID() {
	m.user_id = nil
}

// SetFkScriptID sets the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) SetFkScriptID(i int32) {
	m.fk_script_id = &i
	m.addfk_script_id = nil
}

// FkScriptID returns the value of the "fk_script_id" field in the mutation.
func (m *ScriptExecutionRecordMutation) FkScriptID() (r int32, exists bool) {
	v := m.fk_script_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkScriptID returns the old "fk_script_id" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldFkScriptID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkScriptID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkScriptID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkScriptID: %w", err)
	}
	return oldValue.FkScriptID, nil
}

// AddFkScriptID adds i to the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) AddFkScriptID(i int32) {
	if m.addfk_script_id != nil {
		*m.addfk_script_id += i
	} else {
		m.addfk_script_id = &i
	}
}

// AddedFkScriptID returns the value that was added to the "fk_script_id" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedFkScriptID() (r int32, exists bool) {
	v := m.addfk_script_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFkScriptID resets all changes to the "fk_script_id" field.
func (m *ScriptExecutionRecordMutation) ResetFkScriptID() {
	m.fk_script_id = nil
	m.addfk_script_id = nil
}

// SetScriptContent sets the "script_content" field.
func (m *ScriptExecutionRecordMutation) SetScriptContent(s string) {
	m.script_content = &s
}

// ScriptContent returns the value of the "script_content" field in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptContent() (r string, exists bool) {
	v := m.script_content
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptContent returns the old "script_content" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldScriptContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptContent: %w", err)
	}
	return oldValue.ScriptContent, nil
}

// ResetScriptContent resets all changes to the "script_content" field.
func (m *ScriptExecutionRecordMutation) ResetScriptContent() {
	m.script_content = nil
}

// SetTaskNumber sets the "task_number" field.
func (m *ScriptExecutionRecordMutation) SetTaskNumber(i int32) {
	m.task_number = &i
	m.addtask_number = nil
}

// TaskNumber returns the value of the "task_number" field in the mutation.
func (m *ScriptExecutionRecordMutation) TaskNumber() (r int32, exists bool) {
	v := m.task_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskNumber returns the old "task_number" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldTaskNumber(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskNumber: %w", err)
	}
	return oldValue.TaskNumber, nil
}

// AddTaskNumber adds i to the "task_number" field.
func (m *ScriptExecutionRecordMutation) AddTaskNumber(i int32) {
	if m.addtask_number != nil {
		*m.addtask_number += i
	} else {
		m.addtask_number = &i
	}
}

// AddedTaskNumber returns the value that was added to the "task_number" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedTaskNumber() (r int32, exists bool) {
	v := m.addtask_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskNumber resets all changes to the "task_number" field.
func (m *ScriptExecutionRecordMutation) ResetTaskNumber() {
	m.task_number = nil
	m.addtask_number = nil
}

// SetScriptName sets the "script_name" field.
func (m *ScriptExecutionRecordMutation) SetScriptName(s string) {
	m.script_name = &s
}

// ScriptName returns the value of the "script_name" field in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptName() (r string, exists bool) {
	v := m.script_name
	if v == nil {
		return
	}
	return *v, true
}

// OldScriptName returns the old "script_name" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldScriptName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScriptName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScriptName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScriptName: %w", err)
	}
	return oldValue.ScriptName, nil
}

// ResetScriptName resets all changes to the "script_name" field.
func (m *ScriptExecutionRecordMutation) ResetScriptName() {
	m.script_name = nil
}

// SetFileAddress sets the "file_address" field.
func (m *ScriptExecutionRecordMutation) SetFileAddress(s string) {
	m.file_address = &s
}

// FileAddress returns the value of the "file_address" field in the mutation.
func (m *ScriptExecutionRecordMutation) FileAddress() (r string, exists bool) {
	v := m.file_address
	if v == nil {
		return
	}
	return *v, true
}

// OldFileAddress returns the old "file_address" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldFileAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFileAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFileAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFileAddress: %w", err)
	}
	return oldValue.FileAddress, nil
}

// ResetFileAddress resets all changes to the "file_address" field.
func (m *ScriptExecutionRecordMutation) ResetFileAddress() {
	m.file_address = nil
}

// SetExecuteState sets the "execute_state" field.
func (m *ScriptExecutionRecordMutation) SetExecuteState(i int32) {
	m.execute_state = &i
	m.addexecute_state = nil
}

// ExecuteState returns the value of the "execute_state" field in the mutation.
func (m *ScriptExecutionRecordMutation) ExecuteState() (r int32, exists bool) {
	v := m.execute_state
	if v == nil {
		return
	}
	return *v, true
}

// OldExecuteState returns the old "execute_state" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldExecuteState(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecuteState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecuteState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecuteState: %w", err)
	}
	return oldValue.ExecuteState, nil
}

// AddExecuteState adds i to the "execute_state" field.
func (m *ScriptExecutionRecordMutation) AddExecuteState(i int32) {
	if m.addexecute_state != nil {
		*m.addexecute_state += i
	} else {
		m.addexecute_state = &i
	}
}

// AddedExecuteState returns the value that was added to the "execute_state" field in this mutation.
func (m *ScriptExecutionRecordMutation) AddedExecuteState() (r int32, exists bool) {
	v := m.addexecute_state
	if v == nil {
		return
	}
	return *v, true
}

// ResetExecuteState resets all changes to the "execute_state" field.
func (m *ScriptExecutionRecordMutation) ResetExecuteState() {
	m.execute_state = nil
	m.addexecute_state = nil
}

// SetExecuteResult sets the "execute_result" field.
func (m *ScriptExecutionRecordMutation) SetExecuteResult(s string) {
	m.execute_result = &s
}

// ExecuteResult returns the value of the "execute_result" field in the mutation.
func (m *ScriptExecutionRecordMutation) ExecuteResult() (r string, exists bool) {
	v := m.execute_result
	if v == nil {
		return
	}
	return *v, true
}

// OldExecuteResult returns the old "execute_result" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldExecuteResult(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExecuteResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExecuteResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExecuteResult: %w", err)
	}
	return oldValue.ExecuteResult, nil
}

// ResetExecuteResult resets all changes to the "execute_result" field.
func (m *ScriptExecutionRecordMutation) ResetExecuteResult() {
	m.execute_result = nil
}

// SetCreateTime sets the "create_time" field.
func (m *ScriptExecutionRecordMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *ScriptExecutionRecordMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *ScriptExecutionRecordMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetUpdateTime sets the "update_time" field.
func (m *ScriptExecutionRecordMutation) SetUpdateTime(t time.Time) {
	m.update_time = &t
}

// UpdateTime returns the value of the "update_time" field in the mutation.
func (m *ScriptExecutionRecordMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.update_time
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "update_time" field's value of the ScriptExecutionRecord entity.
// If the ScriptExecutionRecord object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ScriptExecutionRecordMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdateTime: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ResetUpdateTime resets all changes to the "update_time" field.
func (m *ScriptExecutionRecordMutation) ResetUpdateTime() {
	m.update_time = nil
}

// SetScriptID sets the "script" edge to the Script entity by id.
func (m *ScriptExecutionRecordMutation) SetScriptID(id int32) {
	m.script = &id
}

// ClearScript clears the "script" edge to the Script entity.
func (m *ScriptExecutionRecordMutation) ClearScript() {
	m.clearedscript = true
}

// ScriptCleared reports if the "script" edge to the Script entity was cleared.
func (m *ScriptExecutionRecordMutation) ScriptCleared() bool {
	return m.clearedscript
}

// ScriptID returns the "script" edge ID in the mutation.
func (m *ScriptExecutionRecordMutation) ScriptID() (id int32, exists bool) {
	if m.script != nil {
		return *m.script, true
	}
	return
}

// ScriptIDs returns the "script" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ScriptID instead. It exists only for internal usage by the builders.
func (m *ScriptExecutionRecordMutation) ScriptIDs() (ids []int32) {
	if id := m.script; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetScript resets all changes to the "script" edge.
func (m *ScriptExecutionRecordMutation) ResetScript() {
	m.script = nil
	m.clearedscript = false
}

// Where appends a list predicates to the ScriptExecutionRecordMutation builder.
func (m *ScriptExecutionRecordMutation) Where(ps ...predicate.ScriptExecutionRecord) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ScriptExecutionRecordMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ScriptExecutionRecordMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ScriptExecutionRecord, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ScriptExecutionRecordMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ScriptExecutionRecordMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ScriptExecutionRecord).
func (m *ScriptExecutionRecordMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ScriptExecutionRecordMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.user_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldUserID)
	}
	if m.fk_script_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldFkScriptID)
	}
	if m.script_content != nil {
		fields = append(fields, scriptexecutionrecord.FieldScriptContent)
	}
	if m.task_number != nil {
		fields = append(fields, scriptexecutionrecord.FieldTaskNumber)
	}
	if m.script_name != nil {
		fields = append(fields, scriptexecutionrecord.FieldScriptName)
	}
	if m.file_address != nil {
		fields = append(fields, scriptexecutionrecord.FieldFileAddress)
	}
	if m.execute_state != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteState)
	}
	if m.execute_result != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteResult)
	}
	if m.create_time != nil {
		fields = append(fields, scriptexecutionrecord.FieldCreateTime)
	}
	if m.update_time != nil {
		fields = append(fields, scriptexecutionrecord.FieldUpdateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ScriptExecutionRecordMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		return m.UserID()
	case scriptexecutionrecord.FieldFkScriptID:
		return m.FkScriptID()
	case scriptexecutionrecord.FieldScriptContent:
		return m.ScriptContent()
	case scriptexecutionrecord.FieldTaskNumber:
		return m.TaskNumber()
	case scriptexecutionrecord.FieldScriptName:
		return m.ScriptName()
	case scriptexecutionrecord.FieldFileAddress:
		return m.FileAddress()
	case scriptexecutionrecord.FieldExecuteState:
		return m.ExecuteState()
	case scriptexecutionrecord.FieldExecuteResult:
		return m.ExecuteResult()
	case scriptexecutionrecord.FieldCreateTime:
		return m.CreateTime()
	case scriptexecutionrecord.FieldUpdateTime:
		return m.UpdateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ScriptExecutionRecordMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		return m.OldUserID(ctx)
	case scriptexecutionrecord.FieldFkScriptID:
		return m.OldFkScriptID(ctx)
	case scriptexecutionrecord.FieldScriptContent:
		return m.OldScriptContent(ctx)
	case scriptexecutionrecord.FieldTaskNumber:
		return m.OldTaskNumber(ctx)
	case scriptexecutionrecord.FieldScriptName:
		return m.OldScriptName(ctx)
	case scriptexecutionrecord.FieldFileAddress:
		return m.OldFileAddress(ctx)
	case scriptexecutionrecord.FieldExecuteState:
		return m.OldExecuteState(ctx)
	case scriptexecutionrecord.FieldExecuteResult:
		return m.OldExecuteResult(ctx)
	case scriptexecutionrecord.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case scriptexecutionrecord.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	}
	return nil, fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptExecutionRecordMutation) SetField(name string, value ent.Value) error {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case scriptexecutionrecord.FieldFkScriptID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkScriptID(v)
		return nil
	case scriptexecutionrecord.FieldScriptContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptContent(v)
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskNumber(v)
		return nil
	case scriptexecutionrecord.FieldScriptName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScriptName(v)
		return nil
	case scriptexecutionrecord.FieldFileAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFileAddress(v)
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecuteState(v)
		return nil
	case scriptexecutionrecord.FieldExecuteResult:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExecuteResult(v)
		return nil
	case scriptexecutionrecord.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case scriptexecutionrecord.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ScriptExecutionRecordMutation) AddedFields() []string {
	var fields []string
	if m.addfk_script_id != nil {
		fields = append(fields, scriptexecutionrecord.FieldFkScriptID)
	}
	if m.addtask_number != nil {
		fields = append(fields, scriptexecutionrecord.FieldTaskNumber)
	}
	if m.addexecute_state != nil {
		fields = append(fields, scriptexecutionrecord.FieldExecuteState)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ScriptExecutionRecordMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case scriptexecutionrecord.FieldFkScriptID:
		return m.AddedFkScriptID()
	case scriptexecutionrecord.FieldTaskNumber:
		return m.AddedTaskNumber()
	case scriptexecutionrecord.FieldExecuteState:
		return m.AddedExecuteState()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ScriptExecutionRecordMutation) AddField(name string, value ent.Value) error {
	switch name {
	case scriptexecutionrecord.FieldFkScriptID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFkScriptID(v)
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTaskNumber(v)
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddExecuteState(v)
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ScriptExecutionRecordMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ScriptExecutionRecordMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ScriptExecutionRecord nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ResetField(name string) error {
	switch name {
	case scriptexecutionrecord.FieldUserID:
		m.ResetUserID()
		return nil
	case scriptexecutionrecord.FieldFkScriptID:
		m.ResetFkScriptID()
		return nil
	case scriptexecutionrecord.FieldScriptContent:
		m.ResetScriptContent()
		return nil
	case scriptexecutionrecord.FieldTaskNumber:
		m.ResetTaskNumber()
		return nil
	case scriptexecutionrecord.FieldScriptName:
		m.ResetScriptName()
		return nil
	case scriptexecutionrecord.FieldFileAddress:
		m.ResetFileAddress()
		return nil
	case scriptexecutionrecord.FieldExecuteState:
		m.ResetExecuteState()
		return nil
	case scriptexecutionrecord.FieldExecuteResult:
		m.ResetExecuteResult()
		return nil
	case scriptexecutionrecord.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case scriptexecutionrecord.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ScriptExecutionRecordMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.script != nil {
		edges = append(edges, scriptexecutionrecord.EdgeScript)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ScriptExecutionRecordMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		if id := m.script; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ScriptExecutionRecordMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ScriptExecutionRecordMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ScriptExecutionRecordMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedscript {
		edges = append(edges, scriptexecutionrecord.EdgeScript)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ScriptExecutionRecordMutation) EdgeCleared(name string) bool {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		return m.clearedscript
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ClearEdge(name string) error {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		m.ClearScript()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ScriptExecutionRecordMutation) ResetEdge(name string) error {
	switch name {
	case scriptexecutionrecord.EdgeScript:
		m.ResetScript()
		return nil
	}
	return fmt.Errorf("unknown ScriptExecutionRecord edge %s", name)
}

// StorageMutation represents an operation that mutates the Storage nodes in the graph.
type StorageMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	owner         *string
	_type         *int32
	add_type      *int32
	name          *string
	cid           *string
	size          *int32
	addsize       *int32
	last_modify   *time.Time
	parent_id     *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Storage, error)
	predicates    []predicate.Storage
}

var _ ent.Mutation = (*StorageMutation)(nil)

// storageOption allows management of the mutation configuration using functional options.
type storageOption func(*StorageMutation)

// newStorageMutation creates new mutation for the Storage entity.
func newStorageMutation(c config, op Op, opts ...storageOption) *StorageMutation {
	m := &StorageMutation{
		config:        c,
		op:            op,
		typ:           TypeStorage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStorageID sets the ID field of the mutation.
func withStorageID(id uuid.UUID) storageOption {
	return func(m *StorageMutation) {
		var (
			err   error
			once  sync.Once
			value *Storage
		)
		m.oldValue = func(ctx context.Context) (*Storage, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Storage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStorage sets the old Storage of the mutation.
func withStorage(node *Storage) storageOption {
	return func(m *StorageMutation) {
		m.oldValue = func(context.Context) (*Storage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StorageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StorageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Storage entities.
func (m *StorageMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StorageMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StorageMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Storage.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwner sets the "owner" field.
func (m *StorageMutation) SetOwner(s string) {
	m.owner = &s
}

// Owner returns the value of the "owner" field in the mutation.
func (m *StorageMutation) Owner() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwner returns the old "owner" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldOwner(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwner is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwner requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwner: %w", err)
	}
	return oldValue.Owner, nil
}

// ResetOwner resets all changes to the "owner" field.
func (m *StorageMutation) ResetOwner() {
	m.owner = nil
}

// SetType sets the "type" field.
func (m *StorageMutation) SetType(i int32) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *StorageMutation) GetType() (r int32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *StorageMutation) AddType(i int32) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *StorageMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetType resets all changes to the "type" field.
func (m *StorageMutation) ResetType() {
	m._type = nil
	m.add_type = nil
}

// SetName sets the "name" field.
func (m *StorageMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *StorageMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *StorageMutation) ResetName() {
	m.name = nil
}

// SetCid sets the "cid" field.
func (m *StorageMutation) SetCid(s string) {
	m.cid = &s
}

// Cid returns the value of the "cid" field in the mutation.
func (m *StorageMutation) Cid() (r string, exists bool) {
	v := m.cid
	if v == nil {
		return
	}
	return *v, true
}

// OldCid returns the old "cid" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldCid(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCid: %w", err)
	}
	return oldValue.Cid, nil
}

// ResetCid resets all changes to the "cid" field.
func (m *StorageMutation) ResetCid() {
	m.cid = nil
}

// SetSize sets the "size" field.
func (m *StorageMutation) SetSize(i int32) {
	m.size = &i
	m.addsize = nil
}

// Size returns the value of the "size" field in the mutation.
func (m *StorageMutation) Size() (r int32, exists bool) {
	v := m.size
	if v == nil {
		return
	}
	return *v, true
}

// OldSize returns the old "size" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldSize(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSize is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSize requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSize: %w", err)
	}
	return oldValue.Size, nil
}

// AddSize adds i to the "size" field.
func (m *StorageMutation) AddSize(i int32) {
	if m.addsize != nil {
		*m.addsize += i
	} else {
		m.addsize = &i
	}
}

// AddedSize returns the value that was added to the "size" field in this mutation.
func (m *StorageMutation) AddedSize() (r int32, exists bool) {
	v := m.addsize
	if v == nil {
		return
	}
	return *v, true
}

// ResetSize resets all changes to the "size" field.
func (m *StorageMutation) ResetSize() {
	m.size = nil
	m.addsize = nil
}

// SetLastModify sets the "last_modify" field.
func (m *StorageMutation) SetLastModify(t time.Time) {
	m.last_modify = &t
}

// LastModify returns the value of the "last_modify" field in the mutation.
func (m *StorageMutation) LastModify() (r time.Time, exists bool) {
	v := m.last_modify
	if v == nil {
		return
	}
	return *v, true
}

// OldLastModify returns the old "last_modify" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldLastModify(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastModify is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastModify requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastModify: %w", err)
	}
	return oldValue.LastModify, nil
}

// ResetLastModify resets all changes to the "last_modify" field.
func (m *StorageMutation) ResetLastModify() {
	m.last_modify = nil
}

// SetParentID sets the "parent_id" field.
func (m *StorageMutation) SetParentID(s string) {
	m.parent_id = &s
}

// ParentID returns the value of the "parent_id" field in the mutation.
func (m *StorageMutation) ParentID() (r string, exists bool) {
	v := m.parent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldParentID returns the old "parent_id" field's value of the Storage entity.
// If the Storage object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageMutation) OldParentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentID: %w", err)
	}
	return oldValue.ParentID, nil
}

// ResetParentID resets all changes to the "parent_id" field.
func (m *StorageMutation) ResetParentID() {
	m.parent_id = nil
}

// Where appends a list predicates to the StorageMutation builder.
func (m *StorageMutation) Where(ps ...predicate.Storage) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StorageMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StorageMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Storage, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StorageMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StorageMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Storage).
func (m *StorageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StorageMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.owner != nil {
		fields = append(fields, storage.FieldOwner)
	}
	if m._type != nil {
		fields = append(fields, storage.FieldType)
	}
	if m.name != nil {
		fields = append(fields, storage.FieldName)
	}
	if m.cid != nil {
		fields = append(fields, storage.FieldCid)
	}
	if m.size != nil {
		fields = append(fields, storage.FieldSize)
	}
	if m.last_modify != nil {
		fields = append(fields, storage.FieldLastModify)
	}
	if m.parent_id != nil {
		fields = append(fields, storage.FieldParentID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StorageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storage.FieldOwner:
		return m.Owner()
	case storage.FieldType:
		return m.GetType()
	case storage.FieldName:
		return m.Name()
	case storage.FieldCid:
		return m.Cid()
	case storage.FieldSize:
		return m.Size()
	case storage.FieldLastModify:
		return m.LastModify()
	case storage.FieldParentID:
		return m.ParentID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StorageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storage.FieldOwner:
		return m.OldOwner(ctx)
	case storage.FieldType:
		return m.OldType(ctx)
	case storage.FieldName:
		return m.OldName(ctx)
	case storage.FieldCid:
		return m.OldCid(ctx)
	case storage.FieldSize:
		return m.OldSize(ctx)
	case storage.FieldLastModify:
		return m.OldLastModify(ctx)
	case storage.FieldParentID:
		return m.OldParentID(ctx)
	}
	return nil, fmt.Errorf("unknown Storage field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storage.FieldOwner:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwner(v)
		return nil
	case storage.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case storage.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case storage.FieldCid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCid(v)
		return nil
	case storage.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSize(v)
		return nil
	case storage.FieldLastModify:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastModify(v)
		return nil
	case storage.FieldParentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentID(v)
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StorageMutation) AddedFields() []string {
	var fields []string
	if m.add_type != nil {
		fields = append(fields, storage.FieldType)
	}
	if m.addsize != nil {
		fields = append(fields, storage.FieldSize)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StorageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storage.FieldType:
		return m.AddedType()
	case storage.FieldSize:
		return m.AddedSize()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storage.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case storage.FieldSize:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSize(v)
		return nil
	}
	return fmt.Errorf("unknown Storage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StorageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StorageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StorageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Storage nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StorageMutation) ResetField(name string) error {
	switch name {
	case storage.FieldOwner:
		m.ResetOwner()
		return nil
	case storage.FieldType:
		m.ResetType()
		return nil
	case storage.FieldName:
		m.ResetName()
		return nil
	case storage.FieldCid:
		m.ResetCid()
		return nil
	case storage.FieldSize:
		m.ResetSize()
		return nil
	case storage.FieldLastModify:
		m.ResetLastModify()
		return nil
	case storage.FieldParentID:
		m.ResetParentID()
		return nil
	}
	return fmt.Errorf("unknown Storage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StorageMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StorageMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StorageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StorageMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StorageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StorageMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StorageMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Storage unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StorageMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Storage edge %s", name)
}

// StorageProviderMutation represents an operation that mutates the StorageProvider nodes in the graph.
type StorageProviderMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	agent_id       *uuid.UUID
	status         *consts.StorageProviderStatus
	addstatus      *consts.StorageProviderStatus
	master_server  *string
	public_ip      *string
	public_port    *int32
	addpublic_port *int32
	grpc_port      *int32
	addgrpc_port   *int32
	created_time   *time.Time
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*StorageProvider, error)
	predicates     []predicate.StorageProvider
}

var _ ent.Mutation = (*StorageProviderMutation)(nil)

// storageproviderOption allows management of the mutation configuration using functional options.
type storageproviderOption func(*StorageProviderMutation)

// newStorageProviderMutation creates new mutation for the StorageProvider entity.
func newStorageProviderMutation(c config, op Op, opts ...storageproviderOption) *StorageProviderMutation {
	m := &StorageProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeStorageProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStorageProviderID sets the ID field of the mutation.
func withStorageProviderID(id uuid.UUID) storageproviderOption {
	return func(m *StorageProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *StorageProvider
		)
		m.oldValue = func(ctx context.Context) (*StorageProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StorageProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStorageProvider sets the old StorageProvider of the mutation.
func withStorageProvider(node *StorageProvider) storageproviderOption {
	return func(m *StorageProviderMutation) {
		m.oldValue = func(context.Context) (*StorageProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StorageProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StorageProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StorageProvider entities.
func (m *StorageProviderMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StorageProviderMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StorageProviderMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StorageProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAgentID sets the "agent_id" field.
func (m *StorageProviderMutation) SetAgentID(u uuid.UUID) {
	m.agent_id = &u
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *StorageProviderMutation) AgentID() (r uuid.UUID, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldAgentID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *StorageProviderMutation) ResetAgentID() {
	m.agent_id = nil
}

// SetStatus sets the "status" field.
func (m *StorageProviderMutation) SetStatus(cps consts.StorageProviderStatus) {
	m.status = &cps
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *StorageProviderMutation) Status() (r consts.StorageProviderStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldStatus(ctx context.Context) (v consts.StorageProviderStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds cps to the "status" field.
func (m *StorageProviderMutation) AddStatus(cps consts.StorageProviderStatus) {
	if m.addstatus != nil {
		*m.addstatus += cps
	} else {
		m.addstatus = &cps
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *StorageProviderMutation) AddedStatus() (r consts.StorageProviderStatus, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *StorageProviderMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetMasterServer sets the "master_server" field.
func (m *StorageProviderMutation) SetMasterServer(s string) {
	m.master_server = &s
}

// MasterServer returns the value of the "master_server" field in the mutation.
func (m *StorageProviderMutation) MasterServer() (r string, exists bool) {
	v := m.master_server
	if v == nil {
		return
	}
	return *v, true
}

// OldMasterServer returns the old "master_server" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldMasterServer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMasterServer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMasterServer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMasterServer: %w", err)
	}
	return oldValue.MasterServer, nil
}

// ResetMasterServer resets all changes to the "master_server" field.
func (m *StorageProviderMutation) ResetMasterServer() {
	m.master_server = nil
}

// SetPublicIP sets the "public_ip" field.
func (m *StorageProviderMutation) SetPublicIP(s string) {
	m.public_ip = &s
}

// PublicIP returns the value of the "public_ip" field in the mutation.
func (m *StorageProviderMutation) PublicIP() (r string, exists bool) {
	v := m.public_ip
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicIP returns the old "public_ip" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldPublicIP(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicIP: %w", err)
	}
	return oldValue.PublicIP, nil
}

// ResetPublicIP resets all changes to the "public_ip" field.
func (m *StorageProviderMutation) ResetPublicIP() {
	m.public_ip = nil
}

// SetPublicPort sets the "public_port" field.
func (m *StorageProviderMutation) SetPublicPort(i int32) {
	m.public_port = &i
	m.addpublic_port = nil
}

// PublicPort returns the value of the "public_port" field in the mutation.
func (m *StorageProviderMutation) PublicPort() (r int32, exists bool) {
	v := m.public_port
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicPort returns the old "public_port" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldPublicPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicPort: %w", err)
	}
	return oldValue.PublicPort, nil
}

// AddPublicPort adds i to the "public_port" field.
func (m *StorageProviderMutation) AddPublicPort(i int32) {
	if m.addpublic_port != nil {
		*m.addpublic_port += i
	} else {
		m.addpublic_port = &i
	}
}

// AddedPublicPort returns the value that was added to the "public_port" field in this mutation.
func (m *StorageProviderMutation) AddedPublicPort() (r int32, exists bool) {
	v := m.addpublic_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetPublicPort resets all changes to the "public_port" field.
func (m *StorageProviderMutation) ResetPublicPort() {
	m.public_port = nil
	m.addpublic_port = nil
}

// SetGrpcPort sets the "grpc_port" field.
func (m *StorageProviderMutation) SetGrpcPort(i int32) {
	m.grpc_port = &i
	m.addgrpc_port = nil
}

// GrpcPort returns the value of the "grpc_port" field in the mutation.
func (m *StorageProviderMutation) GrpcPort() (r int32, exists bool) {
	v := m.grpc_port
	if v == nil {
		return
	}
	return *v, true
}

// OldGrpcPort returns the old "grpc_port" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldGrpcPort(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGrpcPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGrpcPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGrpcPort: %w", err)
	}
	return oldValue.GrpcPort, nil
}

// AddGrpcPort adds i to the "grpc_port" field.
func (m *StorageProviderMutation) AddGrpcPort(i int32) {
	if m.addgrpc_port != nil {
		*m.addgrpc_port += i
	} else {
		m.addgrpc_port = &i
	}
}

// AddedGrpcPort returns the value that was added to the "grpc_port" field in this mutation.
func (m *StorageProviderMutation) AddedGrpcPort() (r int32, exists bool) {
	v := m.addgrpc_port
	if v == nil {
		return
	}
	return *v, true
}

// ResetGrpcPort resets all changes to the "grpc_port" field.
func (m *StorageProviderMutation) ResetGrpcPort() {
	m.grpc_port = nil
	m.addgrpc_port = nil
}

// SetCreatedTime sets the "created_time" field.
func (m *StorageProviderMutation) SetCreatedTime(t time.Time) {
	m.created_time = &t
}

// CreatedTime returns the value of the "created_time" field in the mutation.
func (m *StorageProviderMutation) CreatedTime() (r time.Time, exists bool) {
	v := m.created_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedTime returns the old "created_time" field's value of the StorageProvider entity.
// If the StorageProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StorageProviderMutation) OldCreatedTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedTime: %w", err)
	}
	return oldValue.CreatedTime, nil
}

// ResetCreatedTime resets all changes to the "created_time" field.
func (m *StorageProviderMutation) ResetCreatedTime() {
	m.created_time = nil
}

// Where appends a list predicates to the StorageProviderMutation builder.
func (m *StorageProviderMutation) Where(ps ...predicate.StorageProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StorageProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StorageProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StorageProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StorageProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StorageProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StorageProvider).
func (m *StorageProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StorageProviderMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.agent_id != nil {
		fields = append(fields, storageprovider.FieldAgentID)
	}
	if m.status != nil {
		fields = append(fields, storageprovider.FieldStatus)
	}
	if m.master_server != nil {
		fields = append(fields, storageprovider.FieldMasterServer)
	}
	if m.public_ip != nil {
		fields = append(fields, storageprovider.FieldPublicIP)
	}
	if m.public_port != nil {
		fields = append(fields, storageprovider.FieldPublicPort)
	}
	if m.grpc_port != nil {
		fields = append(fields, storageprovider.FieldGrpcPort)
	}
	if m.created_time != nil {
		fields = append(fields, storageprovider.FieldCreatedTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StorageProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case storageprovider.FieldAgentID:
		return m.AgentID()
	case storageprovider.FieldStatus:
		return m.Status()
	case storageprovider.FieldMasterServer:
		return m.MasterServer()
	case storageprovider.FieldPublicIP:
		return m.PublicIP()
	case storageprovider.FieldPublicPort:
		return m.PublicPort()
	case storageprovider.FieldGrpcPort:
		return m.GrpcPort()
	case storageprovider.FieldCreatedTime:
		return m.CreatedTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StorageProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case storageprovider.FieldAgentID:
		return m.OldAgentID(ctx)
	case storageprovider.FieldStatus:
		return m.OldStatus(ctx)
	case storageprovider.FieldMasterServer:
		return m.OldMasterServer(ctx)
	case storageprovider.FieldPublicIP:
		return m.OldPublicIP(ctx)
	case storageprovider.FieldPublicPort:
		return m.OldPublicPort(ctx)
	case storageprovider.FieldGrpcPort:
		return m.OldGrpcPort(ctx)
	case storageprovider.FieldCreatedTime:
		return m.OldCreatedTime(ctx)
	}
	return nil, fmt.Errorf("unknown StorageProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case storageprovider.FieldAgentID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case storageprovider.FieldStatus:
		v, ok := value.(consts.StorageProviderStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case storageprovider.FieldMasterServer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMasterServer(v)
		return nil
	case storageprovider.FieldPublicIP:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicIP(v)
		return nil
	case storageprovider.FieldPublicPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicPort(v)
		return nil
	case storageprovider.FieldGrpcPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGrpcPort(v)
		return nil
	case storageprovider.FieldCreatedTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedTime(v)
		return nil
	}
	return fmt.Errorf("unknown StorageProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StorageProviderMutation) AddedFields() []string {
	var fields []string
	if m.addstatus != nil {
		fields = append(fields, storageprovider.FieldStatus)
	}
	if m.addpublic_port != nil {
		fields = append(fields, storageprovider.FieldPublicPort)
	}
	if m.addgrpc_port != nil {
		fields = append(fields, storageprovider.FieldGrpcPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StorageProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case storageprovider.FieldStatus:
		return m.AddedStatus()
	case storageprovider.FieldPublicPort:
		return m.AddedPublicPort()
	case storageprovider.FieldGrpcPort:
		return m.AddedGrpcPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StorageProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case storageprovider.FieldStatus:
		v, ok := value.(consts.StorageProviderStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	case storageprovider.FieldPublicPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPublicPort(v)
		return nil
	case storageprovider.FieldGrpcPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGrpcPort(v)
		return nil
	}
	return fmt.Errorf("unknown StorageProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StorageProviderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StorageProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StorageProviderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StorageProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StorageProviderMutation) ResetField(name string) error {
	switch name {
	case storageprovider.FieldAgentID:
		m.ResetAgentID()
		return nil
	case storageprovider.FieldStatus:
		m.ResetStatus()
		return nil
	case storageprovider.FieldMasterServer:
		m.ResetMasterServer()
		return nil
	case storageprovider.FieldPublicIP:
		m.ResetPublicIP()
		return nil
	case storageprovider.FieldPublicPort:
		m.ResetPublicPort()
		return nil
	case storageprovider.FieldGrpcPort:
		m.ResetGrpcPort()
		return nil
	case storageprovider.FieldCreatedTime:
		m.ResetCreatedTime()
		return nil
	}
	return fmt.Errorf("unknown StorageProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StorageProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StorageProviderMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StorageProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StorageProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StorageProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StorageProviderMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StorageProviderMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown StorageProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StorageProviderMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown StorageProvider edge %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	agent_id      *string
	cmd           *int32
	addcmd        *int32
	params        *string
	status        *int
	addstatus     *int
	create_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uuid.UUID) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAgentID sets the "agent_id" field.
func (m *TaskMutation) SetAgentID(s string) {
	m.agent_id = &s
}

// AgentID returns the value of the "agent_id" field in the mutation.
func (m *TaskMutation) AgentID() (r string, exists bool) {
	v := m.agent_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAgentID returns the old "agent_id" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldAgentID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAgentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAgentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAgentID: %w", err)
	}
	return oldValue.AgentID, nil
}

// ResetAgentID resets all changes to the "agent_id" field.
func (m *TaskMutation) ResetAgentID() {
	m.agent_id = nil
}

// SetCmd sets the "cmd" field.
func (m *TaskMutation) SetCmd(i int32) {
	m.cmd = &i
	m.addcmd = nil
}

// Cmd returns the value of the "cmd" field in the mutation.
func (m *TaskMutation) Cmd() (r int32, exists bool) {
	v := m.cmd
	if v == nil {
		return
	}
	return *v, true
}

// OldCmd returns the old "cmd" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCmd(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCmd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCmd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCmd: %w", err)
	}
	return oldValue.Cmd, nil
}

// AddCmd adds i to the "cmd" field.
func (m *TaskMutation) AddCmd(i int32) {
	if m.addcmd != nil {
		*m.addcmd += i
	} else {
		m.addcmd = &i
	}
}

// AddedCmd returns the value that was added to the "cmd" field in this mutation.
func (m *TaskMutation) AddedCmd() (r int32, exists bool) {
	v := m.addcmd
	if v == nil {
		return
	}
	return *v, true
}

// ResetCmd resets all changes to the "cmd" field.
func (m *TaskMutation) ResetCmd() {
	m.cmd = nil
	m.addcmd = nil
}

// SetParams sets the "params" field.
func (m *TaskMutation) SetParams(s string) {
	m.params = &s
}

// Params returns the value of the "params" field in the mutation.
func (m *TaskMutation) Params() (r string, exists bool) {
	v := m.params
	if v == nil {
		return
	}
	return *v, true
}

// OldParams returns the old "params" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldParams(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParams is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParams requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParams: %w", err)
	}
	return oldValue.Params, nil
}

// ResetParams resets all changes to the "params" field.
func (m *TaskMutation) ResetParams() {
	m.params = nil
}

// SetStatus sets the "status" field.
func (m *TaskMutation) SetStatus(i int) {
	m.status = &i
	m.addstatus = nil
}

// Status returns the value of the "status" field in the mutation.
func (m *TaskMutation) Status() (r int, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldStatus(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// AddStatus adds i to the "status" field.
func (m *TaskMutation) AddStatus(i int) {
	if m.addstatus != nil {
		*m.addstatus += i
	} else {
		m.addstatus = &i
	}
}

// AddedStatus returns the value that was added to the "status" field in this mutation.
func (m *TaskMutation) AddedStatus() (r int, exists bool) {
	v := m.addstatus
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus resets all changes to the "status" field.
func (m *TaskMutation) ResetStatus() {
	m.status = nil
	m.addstatus = nil
}

// SetCreateTime sets the "create_time" field.
func (m *TaskMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *TaskMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *TaskMutation) ResetCreateTime() {
	m.create_time = nil
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TaskMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TaskMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Task, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TaskMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.agent_id != nil {
		fields = append(fields, task.FieldAgentID)
	}
	if m.cmd != nil {
		fields = append(fields, task.FieldCmd)
	}
	if m.params != nil {
		fields = append(fields, task.FieldParams)
	}
	if m.status != nil {
		fields = append(fields, task.FieldStatus)
	}
	if m.create_time != nil {
		fields = append(fields, task.FieldCreateTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldAgentID:
		return m.AgentID()
	case task.FieldCmd:
		return m.Cmd()
	case task.FieldParams:
		return m.Params()
	case task.FieldStatus:
		return m.Status()
	case task.FieldCreateTime:
		return m.CreateTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldAgentID:
		return m.OldAgentID(ctx)
	case task.FieldCmd:
		return m.OldCmd(ctx)
	case task.FieldParams:
		return m.OldParams(ctx)
	case task.FieldStatus:
		return m.OldStatus(ctx)
	case task.FieldCreateTime:
		return m.OldCreateTime(ctx)
	}
	return nil, fmt.Errorf("unknown Task field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldAgentID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAgentID(v)
		return nil
	case task.FieldCmd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCmd(v)
		return nil
	case task.FieldParams:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParams(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case task.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addcmd != nil {
		fields = append(fields, task.FieldCmd)
	}
	if m.addstatus != nil {
		fields = append(fields, task.FieldStatus)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldCmd:
		return m.AddedCmd()
	case task.FieldStatus:
		return m.AddedStatus()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldCmd:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCmd(v)
		return nil
	case task.FieldStatus:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddStatus(v)
		return nil
	}
	return fmt.Errorf("unknown Task numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Task nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldAgentID:
		m.ResetAgentID()
		return nil
	case task.FieldCmd:
		m.ResetCmd()
		return nil
	case task.FieldParams:
		m.ResetParams()
		return nil
	case task.FieldStatus:
		m.ResetStatus()
		return nil
	case task.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	}
	return fmt.Errorf("unknown Task field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Task unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Task edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	username            *string
	country_call_coding *string
	telephone_number    *string
	password            *string
	create_date         *time.Time
	last_login_date     *time.Time
	name                *string
	icon                *string
	pwd_config          *bool
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*User, error)
	predicates          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetCountryCallCoding sets the "country_call_coding" field.
func (m *UserMutation) SetCountryCallCoding(s string) {
	m.country_call_coding = &s
}

// CountryCallCoding returns the value of the "country_call_coding" field in the mutation.
func (m *UserMutation) CountryCallCoding() (r string, exists bool) {
	v := m.country_call_coding
	if v == nil {
		return
	}
	return *v, true
}

// OldCountryCallCoding returns the old "country_call_coding" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCountryCallCoding(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCountryCallCoding is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCountryCallCoding requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCountryCallCoding: %w", err)
	}
	return oldValue.CountryCallCoding, nil
}

// ResetCountryCallCoding resets all changes to the "country_call_coding" field.
func (m *UserMutation) ResetCountryCallCoding() {
	m.country_call_coding = nil
}

// SetTelephoneNumber sets the "telephone_number" field.
func (m *UserMutation) SetTelephoneNumber(s string) {
	m.telephone_number = &s
}

// TelephoneNumber returns the value of the "telephone_number" field in the mutation.
func (m *UserMutation) TelephoneNumber() (r string, exists bool) {
	v := m.telephone_number
	if v == nil {
		return
	}
	return *v, true
}

// OldTelephoneNumber returns the old "telephone_number" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTelephoneNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTelephoneNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTelephoneNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTelephoneNumber: %w", err)
	}
	return oldValue.TelephoneNumber, nil
}

// ResetTelephoneNumber resets all changes to the "telephone_number" field.
func (m *UserMutation) ResetTelephoneNumber() {
	m.telephone_number = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreateDate sets the "create_date" field.
func (m *UserMutation) SetCreateDate(t time.Time) {
	m.create_date = &t
}

// CreateDate returns the value of the "create_date" field in the mutation.
func (m *UserMutation) CreateDate() (r time.Time, exists bool) {
	v := m.create_date
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateDate returns the old "create_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreateDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateDate: %w", err)
	}
	return oldValue.CreateDate, nil
}

// ResetCreateDate resets all changes to the "create_date" field.
func (m *UserMutation) ResetCreateDate() {
	m.create_date = nil
}

// SetLastLoginDate sets the "last_login_date" field.
func (m *UserMutation) SetLastLoginDate(t time.Time) {
	m.last_login_date = &t
}

// LastLoginDate returns the value of the "last_login_date" field in the mutation.
func (m *UserMutation) LastLoginDate() (r time.Time, exists bool) {
	v := m.last_login_date
	if v == nil {
		return
	}
	return *v, true
}

// OldLastLoginDate returns the old "last_login_date" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastLoginDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastLoginDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastLoginDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastLoginDate: %w", err)
	}
	return oldValue.LastLoginDate, nil
}

// ResetLastLoginDate resets all changes to the "last_login_date" field.
func (m *UserMutation) ResetLastLoginDate() {
	m.last_login_date = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetIcon sets the "icon" field.
func (m *UserMutation) SetIcon(s string) {
	m.icon = &s
}

// Icon returns the value of the "icon" field in the mutation.
func (m *UserMutation) Icon() (r string, exists bool) {
	v := m.icon
	if v == nil {
		return
	}
	return *v, true
}

// OldIcon returns the old "icon" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIcon: %w", err)
	}
	return oldValue.Icon, nil
}

// ResetIcon resets all changes to the "icon" field.
func (m *UserMutation) ResetIcon() {
	m.icon = nil
}

// SetPwdConfig sets the "pwd_config" field.
func (m *UserMutation) SetPwdConfig(b bool) {
	m.pwd_config = &b
}

// PwdConfig returns the value of the "pwd_config" field in the mutation.
func (m *UserMutation) PwdConfig() (r bool, exists bool) {
	v := m.pwd_config
	if v == nil {
		return
	}
	return *v, true
}

// OldPwdConfig returns the old "pwd_config" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPwdConfig(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwdConfig is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwdConfig requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwdConfig: %w", err)
	}
	return oldValue.PwdConfig, nil
}

// ResetPwdConfig resets all changes to the "pwd_config" field.
func (m *UserMutation) ResetPwdConfig() {
	m.pwd_config = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.country_call_coding != nil {
		fields = append(fields, user.FieldCountryCallCoding)
	}
	if m.telephone_number != nil {
		fields = append(fields, user.FieldTelephoneNumber)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.create_date != nil {
		fields = append(fields, user.FieldCreateDate)
	}
	if m.last_login_date != nil {
		fields = append(fields, user.FieldLastLoginDate)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.icon != nil {
		fields = append(fields, user.FieldIcon)
	}
	if m.pwd_config != nil {
		fields = append(fields, user.FieldPwdConfig)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldCountryCallCoding:
		return m.CountryCallCoding()
	case user.FieldTelephoneNumber:
		return m.TelephoneNumber()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreateDate:
		return m.CreateDate()
	case user.FieldLastLoginDate:
		return m.LastLoginDate()
	case user.FieldName:
		return m.Name()
	case user.FieldIcon:
		return m.Icon()
	case user.FieldPwdConfig:
		return m.PwdConfig()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldCountryCallCoding:
		return m.OldCountryCallCoding(ctx)
	case user.FieldTelephoneNumber:
		return m.OldTelephoneNumber(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldCreateDate:
		return m.OldCreateDate(ctx)
	case user.FieldLastLoginDate:
		return m.OldLastLoginDate(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldIcon:
		return m.OldIcon(ctx)
	case user.FieldPwdConfig:
		return m.OldPwdConfig(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldCountryCallCoding:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCountryCallCoding(v)
		return nil
	case user.FieldTelephoneNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTelephoneNumber(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreateDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateDate(v)
		return nil
	case user.FieldLastLoginDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastLoginDate(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIcon(v)
		return nil
	case user.FieldPwdConfig:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwdConfig(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldCountryCallCoding:
		m.ResetCountryCallCoding()
		return nil
	case user.FieldTelephoneNumber:
		m.ResetTelephoneNumber()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreateDate:
		m.ResetCreateDate()
		return nil
	case user.FieldLastLoginDate:
		m.ResetLastLoginDate()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldIcon:
		m.ResetIcon()
		return nil
	case user.FieldPwdConfig:
		m.ResetPwdConfig()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// UserResourceLimitMutation represents an operation that mutates the UserResourceLimit nodes in the graph.
type UserResourceLimitMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	fk_user_id             *uuid.UUID
	max_cpu                *int32
	addmax_cpu             *int32
	max_memory             *int32
	addmax_memory          *int32
	max_network_mapping    *int32
	addmax_network_mapping *int32
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*UserResourceLimit, error)
	predicates             []predicate.UserResourceLimit
}

var _ ent.Mutation = (*UserResourceLimitMutation)(nil)

// userresourcelimitOption allows management of the mutation configuration using functional options.
type userresourcelimitOption func(*UserResourceLimitMutation)

// newUserResourceLimitMutation creates new mutation for the UserResourceLimit entity.
func newUserResourceLimitMutation(c config, op Op, opts ...userresourcelimitOption) *UserResourceLimitMutation {
	m := &UserResourceLimitMutation{
		config:        c,
		op:            op,
		typ:           TypeUserResourceLimit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserResourceLimitID sets the ID field of the mutation.
func withUserResourceLimitID(id uuid.UUID) userresourcelimitOption {
	return func(m *UserResourceLimitMutation) {
		var (
			err   error
			once  sync.Once
			value *UserResourceLimit
		)
		m.oldValue = func(ctx context.Context) (*UserResourceLimit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserResourceLimit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserResourceLimit sets the old UserResourceLimit of the mutation.
func withUserResourceLimit(node *UserResourceLimit) userresourcelimitOption {
	return func(m *UserResourceLimitMutation) {
		m.oldValue = func(context.Context) (*UserResourceLimit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserResourceLimitMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserResourceLimitMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserResourceLimit entities.
func (m *UserResourceLimitMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserResourceLimitMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserResourceLimitMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserResourceLimit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFkUserID sets the "fk_user_id" field.
func (m *UserResourceLimitMutation) SetFkUserID(u uuid.UUID) {
	m.fk_user_id = &u
}

// FkUserID returns the value of the "fk_user_id" field in the mutation.
func (m *UserResourceLimitMutation) FkUserID() (r uuid.UUID, exists bool) {
	v := m.fk_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFkUserID returns the old "fk_user_id" field's value of the UserResourceLimit entity.
// If the UserResourceLimit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceLimitMutation) OldFkUserID(ctx context.Context) (v uuid.UUID, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFkUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFkUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFkUserID: %w", err)
	}
	return oldValue.FkUserID, nil
}

// ResetFkUserID resets all changes to the "fk_user_id" field.
func (m *UserResourceLimitMutation) ResetFkUserID() {
	m.fk_user_id = nil
}

// SetMaxCPU sets the "max_cpu" field.
func (m *UserResourceLimitMutation) SetMaxCPU(i int32) {
	m.max_cpu = &i
	m.addmax_cpu = nil
}

// MaxCPU returns the value of the "max_cpu" field in the mutation.
func (m *UserResourceLimitMutation) MaxCPU() (r int32, exists bool) {
	v := m.max_cpu
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxCPU returns the old "max_cpu" field's value of the UserResourceLimit entity.
// If the UserResourceLimit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceLimitMutation) OldMaxCPU(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxCPU is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxCPU requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxCPU: %w", err)
	}
	return oldValue.MaxCPU, nil
}

// AddMaxCPU adds i to the "max_cpu" field.
func (m *UserResourceLimitMutation) AddMaxCPU(i int32) {
	if m.addmax_cpu != nil {
		*m.addmax_cpu += i
	} else {
		m.addmax_cpu = &i
	}
}

// AddedMaxCPU returns the value that was added to the "max_cpu" field in this mutation.
func (m *UserResourceLimitMutation) AddedMaxCPU() (r int32, exists bool) {
	v := m.addmax_cpu
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxCPU resets all changes to the "max_cpu" field.
func (m *UserResourceLimitMutation) ResetMaxCPU() {
	m.max_cpu = nil
	m.addmax_cpu = nil
}

// SetMaxMemory sets the "max_memory" field.
func (m *UserResourceLimitMutation) SetMaxMemory(i int32) {
	m.max_memory = &i
	m.addmax_memory = nil
}

// MaxMemory returns the value of the "max_memory" field in the mutation.
func (m *UserResourceLimitMutation) MaxMemory() (r int32, exists bool) {
	v := m.max_memory
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxMemory returns the old "max_memory" field's value of the UserResourceLimit entity.
// If the UserResourceLimit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceLimitMutation) OldMaxMemory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxMemory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxMemory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxMemory: %w", err)
	}
	return oldValue.MaxMemory, nil
}

// AddMaxMemory adds i to the "max_memory" field.
func (m *UserResourceLimitMutation) AddMaxMemory(i int32) {
	if m.addmax_memory != nil {
		*m.addmax_memory += i
	} else {
		m.addmax_memory = &i
	}
}

// AddedMaxMemory returns the value that was added to the "max_memory" field in this mutation.
func (m *UserResourceLimitMutation) AddedMaxMemory() (r int32, exists bool) {
	v := m.addmax_memory
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxMemory resets all changes to the "max_memory" field.
func (m *UserResourceLimitMutation) ResetMaxMemory() {
	m.max_memory = nil
	m.addmax_memory = nil
}

// SetMaxNetworkMapping sets the "max_network_mapping" field.
func (m *UserResourceLimitMutation) SetMaxNetworkMapping(i int32) {
	m.max_network_mapping = &i
	m.addmax_network_mapping = nil
}

// MaxNetworkMapping returns the value of the "max_network_mapping" field in the mutation.
func (m *UserResourceLimitMutation) MaxNetworkMapping() (r int32, exists bool) {
	v := m.max_network_mapping
	if v == nil {
		return
	}
	return *v, true
}

// OldMaxNetworkMapping returns the old "max_network_mapping" field's value of the UserResourceLimit entity.
// If the UserResourceLimit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserResourceLimitMutation) OldMaxNetworkMapping(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaxNetworkMapping is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaxNetworkMapping requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaxNetworkMapping: %w", err)
	}
	return oldValue.MaxNetworkMapping, nil
}

// AddMaxNetworkMapping adds i to the "max_network_mapping" field.
func (m *UserResourceLimitMutation) AddMaxNetworkMapping(i int32) {
	if m.addmax_network_mapping != nil {
		*m.addmax_network_mapping += i
	} else {
		m.addmax_network_mapping = &i
	}
}

// AddedMaxNetworkMapping returns the value that was added to the "max_network_mapping" field in this mutation.
func (m *UserResourceLimitMutation) AddedMaxNetworkMapping() (r int32, exists bool) {
	v := m.addmax_network_mapping
	if v == nil {
		return
	}
	return *v, true
}

// ResetMaxNetworkMapping resets all changes to the "max_network_mapping" field.
func (m *UserResourceLimitMutation) ResetMaxNetworkMapping() {
	m.max_network_mapping = nil
	m.addmax_network_mapping = nil
}

// Where appends a list predicates to the UserResourceLimitMutation builder.
func (m *UserResourceLimitMutation) Where(ps ...predicate.UserResourceLimit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserResourceLimitMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserResourceLimitMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserResourceLimit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserResourceLimitMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserResourceLimitMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserResourceLimit).
func (m *UserResourceLimitMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserResourceLimitMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.fk_user_id != nil {
		fields = append(fields, userresourcelimit.FieldFkUserID)
	}
	if m.max_cpu != nil {
		fields = append(fields, userresourcelimit.FieldMaxCPU)
	}
	if m.max_memory != nil {
		fields = append(fields, userresourcelimit.FieldMaxMemory)
	}
	if m.max_network_mapping != nil {
		fields = append(fields, userresourcelimit.FieldMaxNetworkMapping)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserResourceLimitMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userresourcelimit.FieldFkUserID:
		return m.FkUserID()
	case userresourcelimit.FieldMaxCPU:
		return m.MaxCPU()
	case userresourcelimit.FieldMaxMemory:
		return m.MaxMemory()
	case userresourcelimit.FieldMaxNetworkMapping:
		return m.MaxNetworkMapping()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserResourceLimitMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userresourcelimit.FieldFkUserID:
		return m.OldFkUserID(ctx)
	case userresourcelimit.FieldMaxCPU:
		return m.OldMaxCPU(ctx)
	case userresourcelimit.FieldMaxMemory:
		return m.OldMaxMemory(ctx)
	case userresourcelimit.FieldMaxNetworkMapping:
		return m.OldMaxNetworkMapping(ctx)
	}
	return nil, fmt.Errorf("unknown UserResourceLimit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserResourceLimitMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userresourcelimit.FieldFkUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFkUserID(v)
		return nil
	case userresourcelimit.FieldMaxCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxCPU(v)
		return nil
	case userresourcelimit.FieldMaxMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxMemory(v)
		return nil
	case userresourcelimit.FieldMaxNetworkMapping:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaxNetworkMapping(v)
		return nil
	}
	return fmt.Errorf("unknown UserResourceLimit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserResourceLimitMutation) AddedFields() []string {
	var fields []string
	if m.addmax_cpu != nil {
		fields = append(fields, userresourcelimit.FieldMaxCPU)
	}
	if m.addmax_memory != nil {
		fields = append(fields, userresourcelimit.FieldMaxMemory)
	}
	if m.addmax_network_mapping != nil {
		fields = append(fields, userresourcelimit.FieldMaxNetworkMapping)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserResourceLimitMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case userresourcelimit.FieldMaxCPU:
		return m.AddedMaxCPU()
	case userresourcelimit.FieldMaxMemory:
		return m.AddedMaxMemory()
	case userresourcelimit.FieldMaxNetworkMapping:
		return m.AddedMaxNetworkMapping()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserResourceLimitMutation) AddField(name string, value ent.Value) error {
	switch name {
	case userresourcelimit.FieldMaxCPU:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxCPU(v)
		return nil
	case userresourcelimit.FieldMaxMemory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxMemory(v)
		return nil
	case userresourcelimit.FieldMaxNetworkMapping:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMaxNetworkMapping(v)
		return nil
	}
	return fmt.Errorf("unknown UserResourceLimit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserResourceLimitMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserResourceLimitMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserResourceLimitMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserResourceLimit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserResourceLimitMutation) ResetField(name string) error {
	switch name {
	case userresourcelimit.FieldFkUserID:
		m.ResetFkUserID()
		return nil
	case userresourcelimit.FieldMaxCPU:
		m.ResetMaxCPU()
		return nil
	case userresourcelimit.FieldMaxMemory:
		m.ResetMaxMemory()
		return nil
	case userresourcelimit.FieldMaxNetworkMapping:
		m.ResetMaxNetworkMapping()
		return nil
	}
	return fmt.Errorf("unknown UserResourceLimit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserResourceLimitMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserResourceLimitMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserResourceLimitMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserResourceLimitMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserResourceLimitMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserResourceLimitMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserResourceLimitMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown UserResourceLimit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserResourceLimitMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown UserResourceLimit edge %s", name)
}
