// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleredeemcode"
)

// CycleRedeemCodeCreate is the builder for creating a CycleRedeemCode entity.
type CycleRedeemCodeCreate struct {
	config
	mutation *CycleRedeemCodeMutation
	hooks    []Hook
}

// SetFkUserID sets the "fk_user_id" field.
func (crcc *CycleRedeemCodeCreate) SetFkUserID(u uuid.UUID) *CycleRedeemCodeCreate {
	crcc.mutation.SetFkUserID(u)
	return crcc
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (crcc *CycleRedeemCodeCreate) SetNillableFkUserID(u *uuid.UUID) *CycleRedeemCodeCreate {
	if u != nil {
		crcc.SetFkUserID(*u)
	}
	return crcc
}

// SetRedeemCode sets the "redeem_code" field.
func (crcc *CycleRedeemCodeCreate) SetRedeemCode(s string) *CycleRedeemCodeCreate {
	crcc.mutation.SetRedeemCode(s)
	return crcc
}

// SetCycle sets the "cycle" field.
func (crcc *CycleRedeemCodeCreate) SetCycle(f float64) *CycleRedeemCodeCreate {
	crcc.mutation.SetCycle(f)
	return crcc
}

// SetState sets the "state" field.
func (crcc *CycleRedeemCodeCreate) SetState(b bool) *CycleRedeemCodeCreate {
	crcc.mutation.SetState(b)
	return crcc
}

// SetCreateTime sets the "create_time" field.
func (crcc *CycleRedeemCodeCreate) SetCreateTime(t time.Time) *CycleRedeemCodeCreate {
	crcc.mutation.SetCreateTime(t)
	return crcc
}

// SetUseTime sets the "use_time" field.
func (crcc *CycleRedeemCodeCreate) SetUseTime(t time.Time) *CycleRedeemCodeCreate {
	crcc.mutation.SetUseTime(t)
	return crcc
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (crcc *CycleRedeemCodeCreate) SetNillableUseTime(t *time.Time) *CycleRedeemCodeCreate {
	if t != nil {
		crcc.SetUseTime(*t)
	}
	return crcc
}

// SetID sets the "id" field.
func (crcc *CycleRedeemCodeCreate) SetID(u uuid.UUID) *CycleRedeemCodeCreate {
	crcc.mutation.SetID(u)
	return crcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (crcc *CycleRedeemCodeCreate) SetNillableID(u *uuid.UUID) *CycleRedeemCodeCreate {
	if u != nil {
		crcc.SetID(*u)
	}
	return crcc
}

// Mutation returns the CycleRedeemCodeMutation object of the builder.
func (crcc *CycleRedeemCodeCreate) Mutation() *CycleRedeemCodeMutation {
	return crcc.mutation
}

// Save creates the CycleRedeemCode in the database.
func (crcc *CycleRedeemCodeCreate) Save(ctx context.Context) (*CycleRedeemCode, error) {
	crcc.defaults()
	return withHooks(ctx, crcc.sqlSave, crcc.mutation, crcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (crcc *CycleRedeemCodeCreate) SaveX(ctx context.Context) *CycleRedeemCode {
	v, err := crcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crcc *CycleRedeemCodeCreate) Exec(ctx context.Context) error {
	_, err := crcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcc *CycleRedeemCodeCreate) ExecX(ctx context.Context) {
	if err := crcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (crcc *CycleRedeemCodeCreate) defaults() {
	if _, ok := crcc.mutation.ID(); !ok {
		v := cycleredeemcode.DefaultID()
		crcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (crcc *CycleRedeemCodeCreate) check() error {
	if _, ok := crcc.mutation.RedeemCode(); !ok {
		return &ValidationError{Name: "redeem_code", err: errors.New(`ent: missing required field "CycleRedeemCode.redeem_code"`)}
	}
	if _, ok := crcc.mutation.Cycle(); !ok {
		return &ValidationError{Name: "cycle", err: errors.New(`ent: missing required field "CycleRedeemCode.cycle"`)}
	}
	if _, ok := crcc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "CycleRedeemCode.state"`)}
	}
	if _, ok := crcc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CycleRedeemCode.create_time"`)}
	}
	return nil
}

func (crcc *CycleRedeemCodeCreate) sqlSave(ctx context.Context) (*CycleRedeemCode, error) {
	if err := crcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := crcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, crcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	crcc.mutation.id = &_node.ID
	crcc.mutation.done = true
	return _node, nil
}

func (crcc *CycleRedeemCodeCreate) createSpec() (*CycleRedeemCode, *sqlgraph.CreateSpec) {
	var (
		_node = &CycleRedeemCode{config: crcc.config}
		_spec = sqlgraph.NewCreateSpec(cycleredeemcode.Table, sqlgraph.NewFieldSpec(cycleredeemcode.FieldID, field.TypeUUID))
	)
	if id, ok := crcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := crcc.mutation.FkUserID(); ok {
		_spec.SetField(cycleredeemcode.FieldFkUserID, field.TypeUUID, value)
		_node.FkUserID = value
	}
	if value, ok := crcc.mutation.RedeemCode(); ok {
		_spec.SetField(cycleredeemcode.FieldRedeemCode, field.TypeString, value)
		_node.RedeemCode = value
	}
	if value, ok := crcc.mutation.Cycle(); ok {
		_spec.SetField(cycleredeemcode.FieldCycle, field.TypeFloat64, value)
		_node.Cycle = value
	}
	if value, ok := crcc.mutation.State(); ok {
		_spec.SetField(cycleredeemcode.FieldState, field.TypeBool, value)
		_node.State = value
	}
	if value, ok := crcc.mutation.CreateTime(); ok {
		_spec.SetField(cycleredeemcode.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := crcc.mutation.UseTime(); ok {
		_spec.SetField(cycleredeemcode.FieldUseTime, field.TypeTime, value)
		_node.UseTime = value
	}
	return _node, _spec
}

// CycleRedeemCodeCreateBulk is the builder for creating many CycleRedeemCode entities in bulk.
type CycleRedeemCodeCreateBulk struct {
	config
	builders []*CycleRedeemCodeCreate
}

// Save creates the CycleRedeemCode entities in the database.
func (crccb *CycleRedeemCodeCreateBulk) Save(ctx context.Context) ([]*CycleRedeemCode, error) {
	specs := make([]*sqlgraph.CreateSpec, len(crccb.builders))
	nodes := make([]*CycleRedeemCode, len(crccb.builders))
	mutators := make([]Mutator, len(crccb.builders))
	for i := range crccb.builders {
		func(i int, root context.Context) {
			builder := crccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CycleRedeemCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, crccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, crccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, crccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (crccb *CycleRedeemCodeCreateBulk) SaveX(ctx context.Context) []*CycleRedeemCode {
	v, err := crccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (crccb *CycleRedeemCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := crccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crccb *CycleRedeemCodeCreateBulk) ExecX(ctx context.Context) {
	if err := crccb.Exec(ctx); err != nil {
		panic(err)
	}
}
