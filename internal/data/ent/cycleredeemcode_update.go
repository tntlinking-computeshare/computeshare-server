// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleredeemcode"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// CycleRedeemCodeUpdate is the builder for updating CycleRedeemCode entities.
type CycleRedeemCodeUpdate struct {
	config
	hooks    []Hook
	mutation *CycleRedeemCodeMutation
}

// Where appends a list predicates to the CycleRedeemCodeUpdate builder.
func (crcu *CycleRedeemCodeUpdate) Where(ps ...predicate.CycleRedeemCode) *CycleRedeemCodeUpdate {
	crcu.mutation.Where(ps...)
	return crcu
}

// SetFkUserID sets the "fk_user_id" field.
func (crcu *CycleRedeemCodeUpdate) SetFkUserID(u uuid.UUID) *CycleRedeemCodeUpdate {
	crcu.mutation.SetFkUserID(u)
	return crcu
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (crcu *CycleRedeemCodeUpdate) SetNillableFkUserID(u *uuid.UUID) *CycleRedeemCodeUpdate {
	if u != nil {
		crcu.SetFkUserID(*u)
	}
	return crcu
}

// ClearFkUserID clears the value of the "fk_user_id" field.
func (crcu *CycleRedeemCodeUpdate) ClearFkUserID() *CycleRedeemCodeUpdate {
	crcu.mutation.ClearFkUserID()
	return crcu
}

// SetRedeemCode sets the "redeem_code" field.
func (crcu *CycleRedeemCodeUpdate) SetRedeemCode(s string) *CycleRedeemCodeUpdate {
	crcu.mutation.SetRedeemCode(s)
	return crcu
}

// SetCycle sets the "cycle" field.
func (crcu *CycleRedeemCodeUpdate) SetCycle(f float64) *CycleRedeemCodeUpdate {
	crcu.mutation.ResetCycle()
	crcu.mutation.SetCycle(f)
	return crcu
}

// AddCycle adds f to the "cycle" field.
func (crcu *CycleRedeemCodeUpdate) AddCycle(f float64) *CycleRedeemCodeUpdate {
	crcu.mutation.AddCycle(f)
	return crcu
}

// SetState sets the "state" field.
func (crcu *CycleRedeemCodeUpdate) SetState(b bool) *CycleRedeemCodeUpdate {
	crcu.mutation.SetState(b)
	return crcu
}

// SetCreateTime sets the "create_time" field.
func (crcu *CycleRedeemCodeUpdate) SetCreateTime(t time.Time) *CycleRedeemCodeUpdate {
	crcu.mutation.SetCreateTime(t)
	return crcu
}

// SetUseTime sets the "use_time" field.
func (crcu *CycleRedeemCodeUpdate) SetUseTime(t time.Time) *CycleRedeemCodeUpdate {
	crcu.mutation.SetUseTime(t)
	return crcu
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (crcu *CycleRedeemCodeUpdate) SetNillableUseTime(t *time.Time) *CycleRedeemCodeUpdate {
	if t != nil {
		crcu.SetUseTime(*t)
	}
	return crcu
}

// ClearUseTime clears the value of the "use_time" field.
func (crcu *CycleRedeemCodeUpdate) ClearUseTime() *CycleRedeemCodeUpdate {
	crcu.mutation.ClearUseTime()
	return crcu
}

// Mutation returns the CycleRedeemCodeMutation object of the builder.
func (crcu *CycleRedeemCodeUpdate) Mutation() *CycleRedeemCodeMutation {
	return crcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (crcu *CycleRedeemCodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, crcu.sqlSave, crcu.mutation, crcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crcu *CycleRedeemCodeUpdate) SaveX(ctx context.Context) int {
	affected, err := crcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (crcu *CycleRedeemCodeUpdate) Exec(ctx context.Context) error {
	_, err := crcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcu *CycleRedeemCodeUpdate) ExecX(ctx context.Context) {
	if err := crcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (crcu *CycleRedeemCodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cycleredeemcode.Table, cycleredeemcode.Columns, sqlgraph.NewFieldSpec(cycleredeemcode.FieldID, field.TypeUUID))
	if ps := crcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crcu.mutation.FkUserID(); ok {
		_spec.SetField(cycleredeemcode.FieldFkUserID, field.TypeUUID, value)
	}
	if crcu.mutation.FkUserIDCleared() {
		_spec.ClearField(cycleredeemcode.FieldFkUserID, field.TypeUUID)
	}
	if value, ok := crcu.mutation.RedeemCode(); ok {
		_spec.SetField(cycleredeemcode.FieldRedeemCode, field.TypeString, value)
	}
	if value, ok := crcu.mutation.Cycle(); ok {
		_spec.SetField(cycleredeemcode.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := crcu.mutation.AddedCycle(); ok {
		_spec.AddField(cycleredeemcode.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := crcu.mutation.State(); ok {
		_spec.SetField(cycleredeemcode.FieldState, field.TypeBool, value)
	}
	if value, ok := crcu.mutation.CreateTime(); ok {
		_spec.SetField(cycleredeemcode.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := crcu.mutation.UseTime(); ok {
		_spec.SetField(cycleredeemcode.FieldUseTime, field.TypeTime, value)
	}
	if crcu.mutation.UseTimeCleared() {
		_spec.ClearField(cycleredeemcode.FieldUseTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, crcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycleredeemcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	crcu.mutation.done = true
	return n, nil
}

// CycleRedeemCodeUpdateOne is the builder for updating a single CycleRedeemCode entity.
type CycleRedeemCodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CycleRedeemCodeMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetFkUserID(u uuid.UUID) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.SetFkUserID(u)
	return crcuo
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (crcuo *CycleRedeemCodeUpdateOne) SetNillableFkUserID(u *uuid.UUID) *CycleRedeemCodeUpdateOne {
	if u != nil {
		crcuo.SetFkUserID(*u)
	}
	return crcuo
}

// ClearFkUserID clears the value of the "fk_user_id" field.
func (crcuo *CycleRedeemCodeUpdateOne) ClearFkUserID() *CycleRedeemCodeUpdateOne {
	crcuo.mutation.ClearFkUserID()
	return crcuo
}

// SetRedeemCode sets the "redeem_code" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetRedeemCode(s string) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.SetRedeemCode(s)
	return crcuo
}

// SetCycle sets the "cycle" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetCycle(f float64) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.ResetCycle()
	crcuo.mutation.SetCycle(f)
	return crcuo
}

// AddCycle adds f to the "cycle" field.
func (crcuo *CycleRedeemCodeUpdateOne) AddCycle(f float64) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.AddCycle(f)
	return crcuo
}

// SetState sets the "state" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetState(b bool) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.SetState(b)
	return crcuo
}

// SetCreateTime sets the "create_time" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetCreateTime(t time.Time) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.SetCreateTime(t)
	return crcuo
}

// SetUseTime sets the "use_time" field.
func (crcuo *CycleRedeemCodeUpdateOne) SetUseTime(t time.Time) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.SetUseTime(t)
	return crcuo
}

// SetNillableUseTime sets the "use_time" field if the given value is not nil.
func (crcuo *CycleRedeemCodeUpdateOne) SetNillableUseTime(t *time.Time) *CycleRedeemCodeUpdateOne {
	if t != nil {
		crcuo.SetUseTime(*t)
	}
	return crcuo
}

// ClearUseTime clears the value of the "use_time" field.
func (crcuo *CycleRedeemCodeUpdateOne) ClearUseTime() *CycleRedeemCodeUpdateOne {
	crcuo.mutation.ClearUseTime()
	return crcuo
}

// Mutation returns the CycleRedeemCodeMutation object of the builder.
func (crcuo *CycleRedeemCodeUpdateOne) Mutation() *CycleRedeemCodeMutation {
	return crcuo.mutation
}

// Where appends a list predicates to the CycleRedeemCodeUpdate builder.
func (crcuo *CycleRedeemCodeUpdateOne) Where(ps ...predicate.CycleRedeemCode) *CycleRedeemCodeUpdateOne {
	crcuo.mutation.Where(ps...)
	return crcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (crcuo *CycleRedeemCodeUpdateOne) Select(field string, fields ...string) *CycleRedeemCodeUpdateOne {
	crcuo.fields = append([]string{field}, fields...)
	return crcuo
}

// Save executes the query and returns the updated CycleRedeemCode entity.
func (crcuo *CycleRedeemCodeUpdateOne) Save(ctx context.Context) (*CycleRedeemCode, error) {
	return withHooks(ctx, crcuo.sqlSave, crcuo.mutation, crcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (crcuo *CycleRedeemCodeUpdateOne) SaveX(ctx context.Context) *CycleRedeemCode {
	node, err := crcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (crcuo *CycleRedeemCodeUpdateOne) Exec(ctx context.Context) error {
	_, err := crcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (crcuo *CycleRedeemCodeUpdateOne) ExecX(ctx context.Context) {
	if err := crcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (crcuo *CycleRedeemCodeUpdateOne) sqlSave(ctx context.Context) (_node *CycleRedeemCode, err error) {
	_spec := sqlgraph.NewUpdateSpec(cycleredeemcode.Table, cycleredeemcode.Columns, sqlgraph.NewFieldSpec(cycleredeemcode.FieldID, field.TypeUUID))
	id, ok := crcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CycleRedeemCode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := crcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cycleredeemcode.FieldID)
		for _, f := range fields {
			if !cycleredeemcode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cycleredeemcode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := crcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := crcuo.mutation.FkUserID(); ok {
		_spec.SetField(cycleredeemcode.FieldFkUserID, field.TypeUUID, value)
	}
	if crcuo.mutation.FkUserIDCleared() {
		_spec.ClearField(cycleredeemcode.FieldFkUserID, field.TypeUUID)
	}
	if value, ok := crcuo.mutation.RedeemCode(); ok {
		_spec.SetField(cycleredeemcode.FieldRedeemCode, field.TypeString, value)
	}
	if value, ok := crcuo.mutation.Cycle(); ok {
		_spec.SetField(cycleredeemcode.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := crcuo.mutation.AddedCycle(); ok {
		_spec.AddField(cycleredeemcode.FieldCycle, field.TypeFloat64, value)
	}
	if value, ok := crcuo.mutation.State(); ok {
		_spec.SetField(cycleredeemcode.FieldState, field.TypeBool, value)
	}
	if value, ok := crcuo.mutation.CreateTime(); ok {
		_spec.SetField(cycleredeemcode.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := crcuo.mutation.UseTime(); ok {
		_spec.SetField(cycleredeemcode.FieldUseTime, field.TypeTime, value)
	}
	if crcuo.mutation.UseTimeCleared() {
		_spec.ClearField(cycleredeemcode.FieldUseTime, field.TypeTime)
	}
	_node = &CycleRedeemCode{config: crcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, crcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cycleredeemcode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	crcuo.mutation.done = true
	return _node, nil
}
