// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleorder"
)

// CycleOrderCreate is the builder for creating a CycleOrder entity.
type CycleOrderCreate struct {
	config
	mutation *CycleOrderMutation
	hooks    []Hook
}

// SetFkUserID sets the "fk_user_id" field.
func (coc *CycleOrderCreate) SetFkUserID(u uuid.UUID) *CycleOrderCreate {
	coc.mutation.SetFkUserID(u)
	return coc
}

// SetOrderNo sets the "order_no" field.
func (coc *CycleOrderCreate) SetOrderNo(s string) *CycleOrderCreate {
	coc.mutation.SetOrderNo(s)
	return coc
}

// SetProductName sets the "product_name" field.
func (coc *CycleOrderCreate) SetProductName(s string) *CycleOrderCreate {
	coc.mutation.SetProductName(s)
	return coc
}

// SetProductDesc sets the "product_desc" field.
func (coc *CycleOrderCreate) SetProductDesc(s string) *CycleOrderCreate {
	coc.mutation.SetProductDesc(s)
	return coc
}

// SetSymbol sets the "symbol" field.
func (coc *CycleOrderCreate) SetSymbol(s string) *CycleOrderCreate {
	coc.mutation.SetSymbol(s)
	return coc
}

// SetCycle sets the "cycle" field.
func (coc *CycleOrderCreate) SetCycle(f float64) *CycleOrderCreate {
	coc.mutation.SetCycle(f)
	return coc
}

// SetResourceID sets the "resource_id" field.
func (coc *CycleOrderCreate) SetResourceID(s string) *CycleOrderCreate {
	coc.mutation.SetResourceID(s)
	return coc
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (coc *CycleOrderCreate) SetNillableResourceID(s *string) *CycleOrderCreate {
	if s != nil {
		coc.SetResourceID(*s)
	}
	return coc
}

// SetCreateTime sets the "create_time" field.
func (coc *CycleOrderCreate) SetCreateTime(t time.Time) *CycleOrderCreate {
	coc.mutation.SetCreateTime(t)
	return coc
}

// SetID sets the "id" field.
func (coc *CycleOrderCreate) SetID(u uuid.UUID) *CycleOrderCreate {
	coc.mutation.SetID(u)
	return coc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (coc *CycleOrderCreate) SetNillableID(u *uuid.UUID) *CycleOrderCreate {
	if u != nil {
		coc.SetID(*u)
	}
	return coc
}

// Mutation returns the CycleOrderMutation object of the builder.
func (coc *CycleOrderCreate) Mutation() *CycleOrderMutation {
	return coc.mutation
}

// Save creates the CycleOrder in the database.
func (coc *CycleOrderCreate) Save(ctx context.Context) (*CycleOrder, error) {
	coc.defaults()
	return withHooks(ctx, coc.sqlSave, coc.mutation, coc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (coc *CycleOrderCreate) SaveX(ctx context.Context) *CycleOrder {
	v, err := coc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (coc *CycleOrderCreate) Exec(ctx context.Context) error {
	_, err := coc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (coc *CycleOrderCreate) ExecX(ctx context.Context) {
	if err := coc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (coc *CycleOrderCreate) defaults() {
	if _, ok := coc.mutation.ID(); !ok {
		v := cycleorder.DefaultID()
		coc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (coc *CycleOrderCreate) check() error {
	if _, ok := coc.mutation.FkUserID(); !ok {
		return &ValidationError{Name: "fk_user_id", err: errors.New(`ent: missing required field "CycleOrder.fk_user_id"`)}
	}
	if _, ok := coc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "CycleOrder.order_no"`)}
	}
	if v, ok := coc.mutation.OrderNo(); ok {
		if err := cycleorder.OrderNoValidator(v); err != nil {
			return &ValidationError{Name: "order_no", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.order_no": %w`, err)}
		}
	}
	if _, ok := coc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`ent: missing required field "CycleOrder.product_name"`)}
	}
	if v, ok := coc.mutation.ProductName(); ok {
		if err := cycleorder.ProductNameValidator(v); err != nil {
			return &ValidationError{Name: "product_name", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_name": %w`, err)}
		}
	}
	if _, ok := coc.mutation.ProductDesc(); !ok {
		return &ValidationError{Name: "product_desc", err: errors.New(`ent: missing required field "CycleOrder.product_desc"`)}
	}
	if v, ok := coc.mutation.ProductDesc(); ok {
		if err := cycleorder.ProductDescValidator(v); err != nil {
			return &ValidationError{Name: "product_desc", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.product_desc": %w`, err)}
		}
	}
	if _, ok := coc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "CycleOrder.symbol"`)}
	}
	if v, ok := coc.mutation.Symbol(); ok {
		if err := cycleorder.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.symbol": %w`, err)}
		}
	}
	if _, ok := coc.mutation.Cycle(); !ok {
		return &ValidationError{Name: "cycle", err: errors.New(`ent: missing required field "CycleOrder.cycle"`)}
	}
	if v, ok := coc.mutation.ResourceID(); ok {
		if err := cycleorder.ResourceIDValidator(v); err != nil {
			return &ValidationError{Name: "resource_id", err: fmt.Errorf(`ent: validator failed for field "CycleOrder.resource_id": %w`, err)}
		}
	}
	if _, ok := coc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "CycleOrder.create_time"`)}
	}
	return nil
}

func (coc *CycleOrderCreate) sqlSave(ctx context.Context) (*CycleOrder, error) {
	if err := coc.check(); err != nil {
		return nil, err
	}
	_node, _spec := coc.createSpec()
	if err := sqlgraph.CreateNode(ctx, coc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	coc.mutation.id = &_node.ID
	coc.mutation.done = true
	return _node, nil
}

func (coc *CycleOrderCreate) createSpec() (*CycleOrder, *sqlgraph.CreateSpec) {
	var (
		_node = &CycleOrder{config: coc.config}
		_spec = sqlgraph.NewCreateSpec(cycleorder.Table, sqlgraph.NewFieldSpec(cycleorder.FieldID, field.TypeUUID))
	)
	if id, ok := coc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := coc.mutation.FkUserID(); ok {
		_spec.SetField(cycleorder.FieldFkUserID, field.TypeUUID, value)
		_node.FkUserID = value
	}
	if value, ok := coc.mutation.OrderNo(); ok {
		_spec.SetField(cycleorder.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := coc.mutation.ProductName(); ok {
		_spec.SetField(cycleorder.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := coc.mutation.ProductDesc(); ok {
		_spec.SetField(cycleorder.FieldProductDesc, field.TypeString, value)
		_node.ProductDesc = value
	}
	if value, ok := coc.mutation.Symbol(); ok {
		_spec.SetField(cycleorder.FieldSymbol, field.TypeString, value)
		_node.Symbol = value
	}
	if value, ok := coc.mutation.Cycle(); ok {
		_spec.SetField(cycleorder.FieldCycle, field.TypeFloat64, value)
		_node.Cycle = value
	}
	if value, ok := coc.mutation.ResourceID(); ok {
		_spec.SetField(cycleorder.FieldResourceID, field.TypeString, value)
		_node.ResourceID = &value
	}
	if value, ok := coc.mutation.CreateTime(); ok {
		_spec.SetField(cycleorder.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	return _node, _spec
}

// CycleOrderCreateBulk is the builder for creating many CycleOrder entities in bulk.
type CycleOrderCreateBulk struct {
	config
	builders []*CycleOrderCreate
}

// Save creates the CycleOrder entities in the database.
func (cocb *CycleOrderCreateBulk) Save(ctx context.Context) ([]*CycleOrder, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cocb.builders))
	nodes := make([]*CycleOrder, len(cocb.builders))
	mutators := make([]Mutator, len(cocb.builders))
	for i := range cocb.builders {
		func(i int, root context.Context) {
			builder := cocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CycleOrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cocb *CycleOrderCreateBulk) SaveX(ctx context.Context) []*CycleOrder {
	v, err := cocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cocb *CycleOrderCreateBulk) Exec(ctx context.Context) error {
	_, err := cocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cocb *CycleOrderCreateBulk) ExecX(ctx context.Context) {
	if err := cocb.Exec(ctx); err != nil {
		panic(err)
	}
}
