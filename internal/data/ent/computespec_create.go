// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
)

// ComputeSpecCreate is the builder for creating a ComputeSpec entity.
type ComputeSpecCreate struct {
	config
	mutation *ComputeSpecMutation
	hooks    []Hook
}

// SetCore sets the "core" field.
func (csc *ComputeSpecCreate) SetCore(i int) *ComputeSpecCreate {
	csc.mutation.SetCore(i)
	return csc
}

// SetMemory sets the "memory" field.
func (csc *ComputeSpecCreate) SetMemory(i int) *ComputeSpecCreate {
	csc.mutation.SetMemory(i)
	return csc
}

// SetID sets the "id" field.
func (csc *ComputeSpecCreate) SetID(i int32) *ComputeSpecCreate {
	csc.mutation.SetID(i)
	return csc
}

// Mutation returns the ComputeSpecMutation object of the builder.
func (csc *ComputeSpecCreate) Mutation() *ComputeSpecMutation {
	return csc.mutation
}

// Save creates the ComputeSpec in the database.
func (csc *ComputeSpecCreate) Save(ctx context.Context) (*ComputeSpec, error) {
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *ComputeSpecCreate) SaveX(ctx context.Context) *ComputeSpec {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *ComputeSpecCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *ComputeSpecCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *ComputeSpecCreate) check() error {
	if _, ok := csc.mutation.Core(); !ok {
		return &ValidationError{Name: "core", err: errors.New(`ent: missing required field "ComputeSpec.core"`)}
	}
	if _, ok := csc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "ComputeSpec.memory"`)}
	}
	return nil
}

func (csc *ComputeSpecCreate) sqlSave(ctx context.Context) (*ComputeSpec, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int32(id)
	}
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *ComputeSpecCreate) createSpec() (*ComputeSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &ComputeSpec{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(computespec.Table, sqlgraph.NewFieldSpec(computespec.FieldID, field.TypeInt32))
	)
	if id, ok := csc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := csc.mutation.Core(); ok {
		_spec.SetField(computespec.FieldCore, field.TypeInt, value)
		_node.Core = value
	}
	if value, ok := csc.mutation.Memory(); ok {
		_spec.SetField(computespec.FieldMemory, field.TypeInt, value)
		_node.Memory = value
	}
	return _node, _spec
}

// ComputeSpecCreateBulk is the builder for creating many ComputeSpec entities in bulk.
type ComputeSpecCreateBulk struct {
	config
	builders []*ComputeSpecCreate
}

// Save creates the ComputeSpec entities in the database.
func (cscb *ComputeSpecCreateBulk) Save(ctx context.Context) ([]*ComputeSpec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*ComputeSpec, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ComputeSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *ComputeSpecCreateBulk) SaveX(ctx context.Context) []*ComputeSpec {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *ComputeSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *ComputeSpecCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
