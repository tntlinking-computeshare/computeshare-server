// Code generated by ent, DO NOT EDIT.

package cycleorder

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldID, id))
}

// FkUserID applies equality check predicate on the "fk_user_id" field. It's identical to FkUserIDEQ.
func FkUserID(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldFkUserID, v))
}

// OrderNo applies equality check predicate on the "order_no" field. It's identical to OrderNoEQ.
func OrderNo(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldOrderNo, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldProductName, v))
}

// ProductDesc applies equality check predicate on the "product_desc" field. It's identical to ProductDescEQ.
func ProductDesc(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldProductDesc, v))
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldSymbol, v))
}

// Cycle applies equality check predicate on the "cycle" field. It's identical to CycleEQ.
func Cycle(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldCycle, v))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldResourceID, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldCreateTime, v))
}

// FkUserIDEQ applies the EQ predicate on the "fk_user_id" field.
func FkUserIDEQ(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldFkUserID, v))
}

// FkUserIDNEQ applies the NEQ predicate on the "fk_user_id" field.
func FkUserIDNEQ(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldFkUserID, v))
}

// FkUserIDIn applies the In predicate on the "fk_user_id" field.
func FkUserIDIn(vs ...uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldFkUserID, vs...))
}

// FkUserIDNotIn applies the NotIn predicate on the "fk_user_id" field.
func FkUserIDNotIn(vs ...uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldFkUserID, vs...))
}

// FkUserIDGT applies the GT predicate on the "fk_user_id" field.
func FkUserIDGT(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldFkUserID, v))
}

// FkUserIDGTE applies the GTE predicate on the "fk_user_id" field.
func FkUserIDGTE(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldFkUserID, v))
}

// FkUserIDLT applies the LT predicate on the "fk_user_id" field.
func FkUserIDLT(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldFkUserID, v))
}

// FkUserIDLTE applies the LTE predicate on the "fk_user_id" field.
func FkUserIDLTE(v uuid.UUID) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldFkUserID, v))
}

// OrderNoEQ applies the EQ predicate on the "order_no" field.
func OrderNoEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldOrderNo, v))
}

// OrderNoNEQ applies the NEQ predicate on the "order_no" field.
func OrderNoNEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldOrderNo, v))
}

// OrderNoIn applies the In predicate on the "order_no" field.
func OrderNoIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldOrderNo, vs...))
}

// OrderNoNotIn applies the NotIn predicate on the "order_no" field.
func OrderNoNotIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldOrderNo, vs...))
}

// OrderNoGT applies the GT predicate on the "order_no" field.
func OrderNoGT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldOrderNo, v))
}

// OrderNoGTE applies the GTE predicate on the "order_no" field.
func OrderNoGTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldOrderNo, v))
}

// OrderNoLT applies the LT predicate on the "order_no" field.
func OrderNoLT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldOrderNo, v))
}

// OrderNoLTE applies the LTE predicate on the "order_no" field.
func OrderNoLTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldOrderNo, v))
}

// OrderNoContains applies the Contains predicate on the "order_no" field.
func OrderNoContains(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContains(FieldOrderNo, v))
}

// OrderNoHasPrefix applies the HasPrefix predicate on the "order_no" field.
func OrderNoHasPrefix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasPrefix(FieldOrderNo, v))
}

// OrderNoHasSuffix applies the HasSuffix predicate on the "order_no" field.
func OrderNoHasSuffix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasSuffix(FieldOrderNo, v))
}

// OrderNoEqualFold applies the EqualFold predicate on the "order_no" field.
func OrderNoEqualFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEqualFold(FieldOrderNo, v))
}

// OrderNoContainsFold applies the ContainsFold predicate on the "order_no" field.
func OrderNoContainsFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContainsFold(FieldOrderNo, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContainsFold(FieldProductName, v))
}

// ProductDescEQ applies the EQ predicate on the "product_desc" field.
func ProductDescEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldProductDesc, v))
}

// ProductDescNEQ applies the NEQ predicate on the "product_desc" field.
func ProductDescNEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldProductDesc, v))
}

// ProductDescIn applies the In predicate on the "product_desc" field.
func ProductDescIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldProductDesc, vs...))
}

// ProductDescNotIn applies the NotIn predicate on the "product_desc" field.
func ProductDescNotIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldProductDesc, vs...))
}

// ProductDescGT applies the GT predicate on the "product_desc" field.
func ProductDescGT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldProductDesc, v))
}

// ProductDescGTE applies the GTE predicate on the "product_desc" field.
func ProductDescGTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldProductDesc, v))
}

// ProductDescLT applies the LT predicate on the "product_desc" field.
func ProductDescLT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldProductDesc, v))
}

// ProductDescLTE applies the LTE predicate on the "product_desc" field.
func ProductDescLTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldProductDesc, v))
}

// ProductDescContains applies the Contains predicate on the "product_desc" field.
func ProductDescContains(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContains(FieldProductDesc, v))
}

// ProductDescHasPrefix applies the HasPrefix predicate on the "product_desc" field.
func ProductDescHasPrefix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasPrefix(FieldProductDesc, v))
}

// ProductDescHasSuffix applies the HasSuffix predicate on the "product_desc" field.
func ProductDescHasSuffix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasSuffix(FieldProductDesc, v))
}

// ProductDescEqualFold applies the EqualFold predicate on the "product_desc" field.
func ProductDescEqualFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEqualFold(FieldProductDesc, v))
}

// ProductDescContainsFold applies the ContainsFold predicate on the "product_desc" field.
func ProductDescContainsFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContainsFold(FieldProductDesc, v))
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldSymbol, v))
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldSymbol, v))
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldSymbol, vs...))
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldSymbol, vs...))
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldSymbol, v))
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldSymbol, v))
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldSymbol, v))
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldSymbol, v))
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContains(FieldSymbol, v))
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasPrefix(FieldSymbol, v))
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasSuffix(FieldSymbol, v))
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEqualFold(FieldSymbol, v))
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContainsFold(FieldSymbol, v))
}

// CycleEQ applies the EQ predicate on the "cycle" field.
func CycleEQ(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldCycle, v))
}

// CycleNEQ applies the NEQ predicate on the "cycle" field.
func CycleNEQ(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldCycle, v))
}

// CycleIn applies the In predicate on the "cycle" field.
func CycleIn(vs ...float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldCycle, vs...))
}

// CycleNotIn applies the NotIn predicate on the "cycle" field.
func CycleNotIn(vs ...float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldCycle, vs...))
}

// CycleGT applies the GT predicate on the "cycle" field.
func CycleGT(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldCycle, v))
}

// CycleGTE applies the GTE predicate on the "cycle" field.
func CycleGTE(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldCycle, v))
}

// CycleLT applies the LT predicate on the "cycle" field.
func CycleLT(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldCycle, v))
}

// CycleLTE applies the LTE predicate on the "cycle" field.
func CycleLTE(v float64) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldCycle, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDIsNil applies the IsNil predicate on the "resource_id" field.
func ResourceIDIsNil() predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIsNull(FieldResourceID))
}

// ResourceIDNotNil applies the NotNil predicate on the "resource_id" field.
func ResourceIDNotNil() predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotNull(FieldResourceID))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldContainsFold(FieldResourceID, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.CycleOrder {
	return predicate.CycleOrder(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CycleOrder) predicate.CycleOrder {
	return predicate.CycleOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CycleOrder) predicate.CycleOrder {
	return predicate.CycleOrder(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CycleOrder) predicate.CycleOrder {
	return predicate.CycleOrder(func(s *sql.Selector) {
		p(s.Not())
	})
}
