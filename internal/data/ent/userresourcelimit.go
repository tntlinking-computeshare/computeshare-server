// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/userresourcelimit"
)

// UserResourceLimit is the model entity for the UserResourceLimit schema.
type UserResourceLimit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// 用户id
	FkUserID uuid.UUID `json:"fk_user_id,omitempty"`
	// MaxCPU holds the value of the "max_cpu" field.
	MaxCPU int32 `json:"max_cpu,omitempty"`
	// MaxMemory holds the value of the "max_memory" field.
	MaxMemory int32 `json:"max_memory,omitempty"`
	// MaxNetworkMapping holds the value of the "max_network_mapping" field.
	MaxNetworkMapping int32 `json:"max_network_mapping,omitempty"`
	selectValues      sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserResourceLimit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userresourcelimit.FieldMaxCPU, userresourcelimit.FieldMaxMemory, userresourcelimit.FieldMaxNetworkMapping:
			values[i] = new(sql.NullInt64)
		case userresourcelimit.FieldID, userresourcelimit.FieldFkUserID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserResourceLimit fields.
func (url *UserResourceLimit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userresourcelimit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				url.ID = *value
			}
		case userresourcelimit.FieldFkUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field fk_user_id", values[i])
			} else if value != nil {
				url.FkUserID = *value
			}
		case userresourcelimit.FieldMaxCPU:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_cpu", values[i])
			} else if value.Valid {
				url.MaxCPU = int32(value.Int64)
			}
		case userresourcelimit.FieldMaxMemory:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_memory", values[i])
			} else if value.Valid {
				url.MaxMemory = int32(value.Int64)
			}
		case userresourcelimit.FieldMaxNetworkMapping:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_network_mapping", values[i])
			} else if value.Valid {
				url.MaxNetworkMapping = int32(value.Int64)
			}
		default:
			url.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserResourceLimit.
// This includes values selected through modifiers, order, etc.
func (url *UserResourceLimit) Value(name string) (ent.Value, error) {
	return url.selectValues.Get(name)
}

// Update returns a builder for updating this UserResourceLimit.
// Note that you need to call UserResourceLimit.Unwrap() before calling this method if this UserResourceLimit
// was returned from a transaction, and the transaction was committed or rolled back.
func (url *UserResourceLimit) Update() *UserResourceLimitUpdateOne {
	return NewUserResourceLimitClient(url.config).UpdateOne(url)
}

// Unwrap unwraps the UserResourceLimit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (url *UserResourceLimit) Unwrap() *UserResourceLimit {
	_tx, ok := url.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserResourceLimit is not a transactional entity")
	}
	url.config.driver = _tx.drv
	return url
}

// String implements the fmt.Stringer.
func (url *UserResourceLimit) String() string {
	var builder strings.Builder
	builder.WriteString("UserResourceLimit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", url.ID))
	builder.WriteString("fk_user_id=")
	builder.WriteString(fmt.Sprintf("%v", url.FkUserID))
	builder.WriteString(", ")
	builder.WriteString("max_cpu=")
	builder.WriteString(fmt.Sprintf("%v", url.MaxCPU))
	builder.WriteString(", ")
	builder.WriteString("max_memory=")
	builder.WriteString(fmt.Sprintf("%v", url.MaxMemory))
	builder.WriteString(", ")
	builder.WriteString("max_network_mapping=")
	builder.WriteString(fmt.Sprintf("%v", url.MaxNetworkMapping))
	builder.WriteByte(')')
	return builder.String()
}

// UserResourceLimits is a parsable slice of UserResourceLimit.
type UserResourceLimits []*UserResourceLimit
