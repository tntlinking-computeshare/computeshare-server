// Code generated by ent, DO NOT EDIT.

package computeinstance

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/global/consts"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldID, id))
}

// Owner applies equality check predicate on the "owner" field. It's identical to OwnerEQ.
func Owner(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldOwner, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldName, v))
}

// Core applies equality check predicate on the "core" field. It's identical to CoreEQ.
func Core(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldCore, v))
}

// Memory applies equality check predicate on the "memory" field. It's identical to MemoryEQ.
func Memory(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldMemory, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldImage, v))
}

// ImageID applies equality check predicate on the "image_id" field. It's identical to ImageIDEQ.
func ImageID(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldImageID, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldPort, v))
}

// ExpirationTime applies equality check predicate on the "expiration_time" field. It's identical to ExpirationTimeEQ.
func ExpirationTime(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldExpirationTime, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldEQ(FieldStatus, vc))
}

// ContainerID applies equality check predicate on the "container_id" field. It's identical to ContainerIDEQ.
func ContainerID(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldContainerID, v))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldAgentID, v))
}

// VncIP applies equality check predicate on the "vnc_ip" field. It's identical to VncIPEQ.
func VncIP(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldVncIP, v))
}

// VncPort applies equality check predicate on the "vnc_port" field. It's identical to VncPortEQ.
func VncPort(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldVncPort, v))
}

// DockerCompose applies equality check predicate on the "docker_compose" field. It's identical to DockerComposeEQ.
func DockerCompose(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldDockerCompose, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldCreateTime, v))
}

// OwnerEQ applies the EQ predicate on the "owner" field.
func OwnerEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldOwner, v))
}

// OwnerNEQ applies the NEQ predicate on the "owner" field.
func OwnerNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldOwner, v))
}

// OwnerIn applies the In predicate on the "owner" field.
func OwnerIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldOwner, vs...))
}

// OwnerNotIn applies the NotIn predicate on the "owner" field.
func OwnerNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldOwner, vs...))
}

// OwnerGT applies the GT predicate on the "owner" field.
func OwnerGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldOwner, v))
}

// OwnerGTE applies the GTE predicate on the "owner" field.
func OwnerGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldOwner, v))
}

// OwnerLT applies the LT predicate on the "owner" field.
func OwnerLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldOwner, v))
}

// OwnerLTE applies the LTE predicate on the "owner" field.
func OwnerLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldOwner, v))
}

// OwnerContains applies the Contains predicate on the "owner" field.
func OwnerContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldOwner, v))
}

// OwnerHasPrefix applies the HasPrefix predicate on the "owner" field.
func OwnerHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldOwner, v))
}

// OwnerHasSuffix applies the HasSuffix predicate on the "owner" field.
func OwnerHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldOwner, v))
}

// OwnerEqualFold applies the EqualFold predicate on the "owner" field.
func OwnerEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldOwner, v))
}

// OwnerContainsFold applies the ContainsFold predicate on the "owner" field.
func OwnerContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldOwner, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldName, v))
}

// CoreEQ applies the EQ predicate on the "core" field.
func CoreEQ(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldCore, v))
}

// CoreNEQ applies the NEQ predicate on the "core" field.
func CoreNEQ(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldCore, v))
}

// CoreIn applies the In predicate on the "core" field.
func CoreIn(vs ...int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldCore, vs...))
}

// CoreNotIn applies the NotIn predicate on the "core" field.
func CoreNotIn(vs ...int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldCore, vs...))
}

// CoreGT applies the GT predicate on the "core" field.
func CoreGT(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldCore, v))
}

// CoreGTE applies the GTE predicate on the "core" field.
func CoreGTE(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldCore, v))
}

// CoreLT applies the LT predicate on the "core" field.
func CoreLT(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldCore, v))
}

// CoreLTE applies the LTE predicate on the "core" field.
func CoreLTE(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldCore, v))
}

// MemoryEQ applies the EQ predicate on the "memory" field.
func MemoryEQ(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldMemory, v))
}

// MemoryNEQ applies the NEQ predicate on the "memory" field.
func MemoryNEQ(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldMemory, v))
}

// MemoryIn applies the In predicate on the "memory" field.
func MemoryIn(vs ...int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldMemory, vs...))
}

// MemoryNotIn applies the NotIn predicate on the "memory" field.
func MemoryNotIn(vs ...int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldMemory, vs...))
}

// MemoryGT applies the GT predicate on the "memory" field.
func MemoryGT(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldMemory, v))
}

// MemoryGTE applies the GTE predicate on the "memory" field.
func MemoryGTE(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldMemory, v))
}

// MemoryLT applies the LT predicate on the "memory" field.
func MemoryLT(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldMemory, v))
}

// MemoryLTE applies the LTE predicate on the "memory" field.
func MemoryLTE(v int) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldMemory, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldImage, v))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldImage, v))
}

// ImageIDEQ applies the EQ predicate on the "image_id" field.
func ImageIDEQ(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldImageID, v))
}

// ImageIDNEQ applies the NEQ predicate on the "image_id" field.
func ImageIDNEQ(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldImageID, v))
}

// ImageIDIn applies the In predicate on the "image_id" field.
func ImageIDIn(vs ...int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldImageID, vs...))
}

// ImageIDNotIn applies the NotIn predicate on the "image_id" field.
func ImageIDNotIn(vs ...int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldImageID, vs...))
}

// ImageIDGT applies the GT predicate on the "image_id" field.
func ImageIDGT(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldImageID, v))
}

// ImageIDGTE applies the GTE predicate on the "image_id" field.
func ImageIDGTE(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldImageID, v))
}

// ImageIDLT applies the LT predicate on the "image_id" field.
func ImageIDLT(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldImageID, v))
}

// ImageIDLTE applies the LTE predicate on the "image_id" field.
func ImageIDLTE(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldImageID, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldPort, v))
}

// PortContains applies the Contains predicate on the "port" field.
func PortContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldPort, v))
}

// PortHasPrefix applies the HasPrefix predicate on the "port" field.
func PortHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldPort, v))
}

// PortHasSuffix applies the HasSuffix predicate on the "port" field.
func PortHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldPort, v))
}

// PortIsNil applies the IsNil predicate on the "port" field.
func PortIsNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIsNull(FieldPort))
}

// PortNotNil applies the NotNil predicate on the "port" field.
func PortNotNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotNull(FieldPort))
}

// PortEqualFold applies the EqualFold predicate on the "port" field.
func PortEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldPort, v))
}

// PortContainsFold applies the ContainsFold predicate on the "port" field.
func PortContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldPort, v))
}

// ExpirationTimeEQ applies the EQ predicate on the "expiration_time" field.
func ExpirationTimeEQ(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldExpirationTime, v))
}

// ExpirationTimeNEQ applies the NEQ predicate on the "expiration_time" field.
func ExpirationTimeNEQ(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldExpirationTime, v))
}

// ExpirationTimeIn applies the In predicate on the "expiration_time" field.
func ExpirationTimeIn(vs ...time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldExpirationTime, vs...))
}

// ExpirationTimeNotIn applies the NotIn predicate on the "expiration_time" field.
func ExpirationTimeNotIn(vs ...time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldExpirationTime, vs...))
}

// ExpirationTimeGT applies the GT predicate on the "expiration_time" field.
func ExpirationTimeGT(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldExpirationTime, v))
}

// ExpirationTimeGTE applies the GTE predicate on the "expiration_time" field.
func ExpirationTimeGTE(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldExpirationTime, v))
}

// ExpirationTimeLT applies the LT predicate on the "expiration_time" field.
func ExpirationTimeLT(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldExpirationTime, v))
}

// ExpirationTimeLTE applies the LTE predicate on the "expiration_time" field.
func ExpirationTimeLTE(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldExpirationTime, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...consts.InstanceStatus) predicate.ComputeInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.ComputeInstance(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...consts.InstanceStatus) predicate.ComputeInstance {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = int8(vs[i])
	}
	return predicate.ComputeInstance(sql.FieldNotIn(FieldStatus, v...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldGT(FieldStatus, vc))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldGTE(FieldStatus, vc))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldLT(FieldStatus, vc))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v consts.InstanceStatus) predicate.ComputeInstance {
	vc := int8(v)
	return predicate.ComputeInstance(sql.FieldLTE(FieldStatus, vc))
}

// ContainerIDEQ applies the EQ predicate on the "container_id" field.
func ContainerIDEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldContainerID, v))
}

// ContainerIDNEQ applies the NEQ predicate on the "container_id" field.
func ContainerIDNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldContainerID, v))
}

// ContainerIDIn applies the In predicate on the "container_id" field.
func ContainerIDIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldContainerID, vs...))
}

// ContainerIDNotIn applies the NotIn predicate on the "container_id" field.
func ContainerIDNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldContainerID, vs...))
}

// ContainerIDGT applies the GT predicate on the "container_id" field.
func ContainerIDGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldContainerID, v))
}

// ContainerIDGTE applies the GTE predicate on the "container_id" field.
func ContainerIDGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldContainerID, v))
}

// ContainerIDLT applies the LT predicate on the "container_id" field.
func ContainerIDLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldContainerID, v))
}

// ContainerIDLTE applies the LTE predicate on the "container_id" field.
func ContainerIDLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldContainerID, v))
}

// ContainerIDContains applies the Contains predicate on the "container_id" field.
func ContainerIDContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldContainerID, v))
}

// ContainerIDHasPrefix applies the HasPrefix predicate on the "container_id" field.
func ContainerIDHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldContainerID, v))
}

// ContainerIDHasSuffix applies the HasSuffix predicate on the "container_id" field.
func ContainerIDHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldContainerID, v))
}

// ContainerIDIsNil applies the IsNil predicate on the "container_id" field.
func ContainerIDIsNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIsNull(FieldContainerID))
}

// ContainerIDNotNil applies the NotNil predicate on the "container_id" field.
func ContainerIDNotNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotNull(FieldContainerID))
}

// ContainerIDEqualFold applies the EqualFold predicate on the "container_id" field.
func ContainerIDEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldContainerID, v))
}

// ContainerIDContainsFold applies the ContainsFold predicate on the "container_id" field.
func ContainerIDContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldContainerID, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldAgentID, vs...))
}

// AgentIDGT applies the GT predicate on the "agent_id" field.
func AgentIDGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldAgentID, v))
}

// AgentIDGTE applies the GTE predicate on the "agent_id" field.
func AgentIDGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldAgentID, v))
}

// AgentIDLT applies the LT predicate on the "agent_id" field.
func AgentIDLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldAgentID, v))
}

// AgentIDLTE applies the LTE predicate on the "agent_id" field.
func AgentIDLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldAgentID, v))
}

// AgentIDContains applies the Contains predicate on the "agent_id" field.
func AgentIDContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldAgentID, v))
}

// AgentIDHasPrefix applies the HasPrefix predicate on the "agent_id" field.
func AgentIDHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldAgentID, v))
}

// AgentIDHasSuffix applies the HasSuffix predicate on the "agent_id" field.
func AgentIDHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldAgentID, v))
}

// AgentIDIsNil applies the IsNil predicate on the "agent_id" field.
func AgentIDIsNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIsNull(FieldAgentID))
}

// AgentIDNotNil applies the NotNil predicate on the "agent_id" field.
func AgentIDNotNil() predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotNull(FieldAgentID))
}

// AgentIDEqualFold applies the EqualFold predicate on the "agent_id" field.
func AgentIDEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldAgentID, v))
}

// AgentIDContainsFold applies the ContainsFold predicate on the "agent_id" field.
func AgentIDContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldAgentID, v))
}

// VncIPEQ applies the EQ predicate on the "vnc_ip" field.
func VncIPEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldVncIP, v))
}

// VncIPNEQ applies the NEQ predicate on the "vnc_ip" field.
func VncIPNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldVncIP, v))
}

// VncIPIn applies the In predicate on the "vnc_ip" field.
func VncIPIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldVncIP, vs...))
}

// VncIPNotIn applies the NotIn predicate on the "vnc_ip" field.
func VncIPNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldVncIP, vs...))
}

// VncIPGT applies the GT predicate on the "vnc_ip" field.
func VncIPGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldVncIP, v))
}

// VncIPGTE applies the GTE predicate on the "vnc_ip" field.
func VncIPGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldVncIP, v))
}

// VncIPLT applies the LT predicate on the "vnc_ip" field.
func VncIPLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldVncIP, v))
}

// VncIPLTE applies the LTE predicate on the "vnc_ip" field.
func VncIPLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldVncIP, v))
}

// VncIPContains applies the Contains predicate on the "vnc_ip" field.
func VncIPContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldVncIP, v))
}

// VncIPHasPrefix applies the HasPrefix predicate on the "vnc_ip" field.
func VncIPHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldVncIP, v))
}

// VncIPHasSuffix applies the HasSuffix predicate on the "vnc_ip" field.
func VncIPHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldVncIP, v))
}

// VncIPEqualFold applies the EqualFold predicate on the "vnc_ip" field.
func VncIPEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldVncIP, v))
}

// VncIPContainsFold applies the ContainsFold predicate on the "vnc_ip" field.
func VncIPContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldVncIP, v))
}

// VncPortEQ applies the EQ predicate on the "vnc_port" field.
func VncPortEQ(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldVncPort, v))
}

// VncPortNEQ applies the NEQ predicate on the "vnc_port" field.
func VncPortNEQ(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldVncPort, v))
}

// VncPortIn applies the In predicate on the "vnc_port" field.
func VncPortIn(vs ...int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldVncPort, vs...))
}

// VncPortNotIn applies the NotIn predicate on the "vnc_port" field.
func VncPortNotIn(vs ...int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldVncPort, vs...))
}

// VncPortGT applies the GT predicate on the "vnc_port" field.
func VncPortGT(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldVncPort, v))
}

// VncPortGTE applies the GTE predicate on the "vnc_port" field.
func VncPortGTE(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldVncPort, v))
}

// VncPortLT applies the LT predicate on the "vnc_port" field.
func VncPortLT(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldVncPort, v))
}

// VncPortLTE applies the LTE predicate on the "vnc_port" field.
func VncPortLTE(v int32) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldVncPort, v))
}

// DockerComposeEQ applies the EQ predicate on the "docker_compose" field.
func DockerComposeEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldDockerCompose, v))
}

// DockerComposeNEQ applies the NEQ predicate on the "docker_compose" field.
func DockerComposeNEQ(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldDockerCompose, v))
}

// DockerComposeIn applies the In predicate on the "docker_compose" field.
func DockerComposeIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldDockerCompose, vs...))
}

// DockerComposeNotIn applies the NotIn predicate on the "docker_compose" field.
func DockerComposeNotIn(vs ...string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldDockerCompose, vs...))
}

// DockerComposeGT applies the GT predicate on the "docker_compose" field.
func DockerComposeGT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldDockerCompose, v))
}

// DockerComposeGTE applies the GTE predicate on the "docker_compose" field.
func DockerComposeGTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldDockerCompose, v))
}

// DockerComposeLT applies the LT predicate on the "docker_compose" field.
func DockerComposeLT(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldDockerCompose, v))
}

// DockerComposeLTE applies the LTE predicate on the "docker_compose" field.
func DockerComposeLTE(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldDockerCompose, v))
}

// DockerComposeContains applies the Contains predicate on the "docker_compose" field.
func DockerComposeContains(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContains(FieldDockerCompose, v))
}

// DockerComposeHasPrefix applies the HasPrefix predicate on the "docker_compose" field.
func DockerComposeHasPrefix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasPrefix(FieldDockerCompose, v))
}

// DockerComposeHasSuffix applies the HasSuffix predicate on the "docker_compose" field.
func DockerComposeHasSuffix(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldHasSuffix(FieldDockerCompose, v))
}

// DockerComposeEqualFold applies the EqualFold predicate on the "docker_compose" field.
func DockerComposeEqualFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEqualFold(FieldDockerCompose, v))
}

// DockerComposeContainsFold applies the ContainsFold predicate on the "docker_compose" field.
func DockerComposeContainsFold(v string) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldContainsFold(FieldDockerCompose, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ComputeInstance {
	return predicate.ComputeInstance(sql.FieldLTE(FieldCreateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ComputeInstance) predicate.ComputeInstance {
	return predicate.ComputeInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ComputeInstance) predicate.ComputeInstance {
	return predicate.ComputeInstance(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ComputeInstance) predicate.ComputeInstance {
	return predicate.ComputeInstance(func(s *sql.Selector) {
		p(s.Not())
	})
}
