// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/agent"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/alipayorderrollback"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeimage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computeinstance"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespec"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/computespecprice"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycle"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleorder"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerecharge"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycleredeemcode"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cyclerenewal"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/cycletransaction"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/domainbinding"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/employee"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gateway"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/gatewayport"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/networkmapping"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3bucket"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/s3user"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/script"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/scriptexecutionrecord"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storage"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/storageprovider"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/task"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/user"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/userresourcelimit"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Agent is the client for interacting with the Agent builders.
	Agent *AgentClient
	// AlipayOrderRollback is the client for interacting with the AlipayOrderRollback builders.
	AlipayOrderRollback *AlipayOrderRollbackClient
	// ComputeImage is the client for interacting with the ComputeImage builders.
	ComputeImage *ComputeImageClient
	// ComputeInstance is the client for interacting with the ComputeInstance builders.
	ComputeInstance *ComputeInstanceClient
	// ComputeSpec is the client for interacting with the ComputeSpec builders.
	ComputeSpec *ComputeSpecClient
	// ComputeSpecPrice is the client for interacting with the ComputeSpecPrice builders.
	ComputeSpecPrice *ComputeSpecPriceClient
	// Cycle is the client for interacting with the Cycle builders.
	Cycle *CycleClient
	// CycleOrder is the client for interacting with the CycleOrder builders.
	CycleOrder *CycleOrderClient
	// CycleRecharge is the client for interacting with the CycleRecharge builders.
	CycleRecharge *CycleRechargeClient
	// CycleRedeemCode is the client for interacting with the CycleRedeemCode builders.
	CycleRedeemCode *CycleRedeemCodeClient
	// CycleRenewal is the client for interacting with the CycleRenewal builders.
	CycleRenewal *CycleRenewalClient
	// CycleTransaction is the client for interacting with the CycleTransaction builders.
	CycleTransaction *CycleTransactionClient
	// DomainBinding is the client for interacting with the DomainBinding builders.
	DomainBinding *DomainBindingClient
	// Employee is the client for interacting with the Employee builders.
	Employee *EmployeeClient
	// Gateway is the client for interacting with the Gateway builders.
	Gateway *GatewayClient
	// GatewayPort is the client for interacting with the GatewayPort builders.
	GatewayPort *GatewayPortClient
	// NetworkMapping is the client for interacting with the NetworkMapping builders.
	NetworkMapping *NetworkMappingClient
	// S3Bucket is the client for interacting with the S3Bucket builders.
	S3Bucket *S3BucketClient
	// S3User is the client for interacting with the S3User builders.
	S3User *S3UserClient
	// Script is the client for interacting with the Script builders.
	Script *ScriptClient
	// ScriptExecutionRecord is the client for interacting with the ScriptExecutionRecord builders.
	ScriptExecutionRecord *ScriptExecutionRecordClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// StorageProvider is the client for interacting with the StorageProvider builders.
	StorageProvider *StorageProviderClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserResourceLimit is the client for interacting with the UserResourceLimit builders.
	UserResourceLimit *UserResourceLimitClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Agent = NewAgentClient(c.config)
	c.AlipayOrderRollback = NewAlipayOrderRollbackClient(c.config)
	c.ComputeImage = NewComputeImageClient(c.config)
	c.ComputeInstance = NewComputeInstanceClient(c.config)
	c.ComputeSpec = NewComputeSpecClient(c.config)
	c.ComputeSpecPrice = NewComputeSpecPriceClient(c.config)
	c.Cycle = NewCycleClient(c.config)
	c.CycleOrder = NewCycleOrderClient(c.config)
	c.CycleRecharge = NewCycleRechargeClient(c.config)
	c.CycleRedeemCode = NewCycleRedeemCodeClient(c.config)
	c.CycleRenewal = NewCycleRenewalClient(c.config)
	c.CycleTransaction = NewCycleTransactionClient(c.config)
	c.DomainBinding = NewDomainBindingClient(c.config)
	c.Employee = NewEmployeeClient(c.config)
	c.Gateway = NewGatewayClient(c.config)
	c.GatewayPort = NewGatewayPortClient(c.config)
	c.NetworkMapping = NewNetworkMappingClient(c.config)
	c.S3Bucket = NewS3BucketClient(c.config)
	c.S3User = NewS3UserClient(c.config)
	c.Script = NewScriptClient(c.config)
	c.ScriptExecutionRecord = NewScriptExecutionRecordClient(c.config)
	c.Storage = NewStorageClient(c.config)
	c.StorageProvider = NewStorageProviderClient(c.config)
	c.Task = NewTaskClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserResourceLimit = NewUserResourceLimitClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		AlipayOrderRollback:   NewAlipayOrderRollbackClient(cfg),
		ComputeImage:          NewComputeImageClient(cfg),
		ComputeInstance:       NewComputeInstanceClient(cfg),
		ComputeSpec:           NewComputeSpecClient(cfg),
		ComputeSpecPrice:      NewComputeSpecPriceClient(cfg),
		Cycle:                 NewCycleClient(cfg),
		CycleOrder:            NewCycleOrderClient(cfg),
		CycleRecharge:         NewCycleRechargeClient(cfg),
		CycleRedeemCode:       NewCycleRedeemCodeClient(cfg),
		CycleRenewal:          NewCycleRenewalClient(cfg),
		CycleTransaction:      NewCycleTransactionClient(cfg),
		DomainBinding:         NewDomainBindingClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Gateway:               NewGatewayClient(cfg),
		GatewayPort:           NewGatewayPortClient(cfg),
		NetworkMapping:        NewNetworkMappingClient(cfg),
		S3Bucket:              NewS3BucketClient(cfg),
		S3User:                NewS3UserClient(cfg),
		Script:                NewScriptClient(cfg),
		ScriptExecutionRecord: NewScriptExecutionRecordClient(cfg),
		Storage:               NewStorageClient(cfg),
		StorageProvider:       NewStorageProviderClient(cfg),
		Task:                  NewTaskClient(cfg),
		User:                  NewUserClient(cfg),
		UserResourceLimit:     NewUserResourceLimitClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                   ctx,
		config:                cfg,
		Agent:                 NewAgentClient(cfg),
		AlipayOrderRollback:   NewAlipayOrderRollbackClient(cfg),
		ComputeImage:          NewComputeImageClient(cfg),
		ComputeInstance:       NewComputeInstanceClient(cfg),
		ComputeSpec:           NewComputeSpecClient(cfg),
		ComputeSpecPrice:      NewComputeSpecPriceClient(cfg),
		Cycle:                 NewCycleClient(cfg),
		CycleOrder:            NewCycleOrderClient(cfg),
		CycleRecharge:         NewCycleRechargeClient(cfg),
		CycleRedeemCode:       NewCycleRedeemCodeClient(cfg),
		CycleRenewal:          NewCycleRenewalClient(cfg),
		CycleTransaction:      NewCycleTransactionClient(cfg),
		DomainBinding:         NewDomainBindingClient(cfg),
		Employee:              NewEmployeeClient(cfg),
		Gateway:               NewGatewayClient(cfg),
		GatewayPort:           NewGatewayPortClient(cfg),
		NetworkMapping:        NewNetworkMappingClient(cfg),
		S3Bucket:              NewS3BucketClient(cfg),
		S3User:                NewS3UserClient(cfg),
		Script:                NewScriptClient(cfg),
		ScriptExecutionRecord: NewScriptExecutionRecordClient(cfg),
		Storage:               NewStorageClient(cfg),
		StorageProvider:       NewStorageProviderClient(cfg),
		Task:                  NewTaskClient(cfg),
		User:                  NewUserClient(cfg),
		UserResourceLimit:     NewUserResourceLimitClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Agent.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Agent, c.AlipayOrderRollback, c.ComputeImage, c.ComputeInstance,
		c.ComputeSpec, c.ComputeSpecPrice, c.Cycle, c.CycleOrder, c.CycleRecharge,
		c.CycleRedeemCode, c.CycleRenewal, c.CycleTransaction, c.DomainBinding,
		c.Employee, c.Gateway, c.GatewayPort, c.NetworkMapping, c.S3Bucket, c.S3User,
		c.Script, c.ScriptExecutionRecord, c.Storage, c.StorageProvider, c.Task,
		c.User, c.UserResourceLimit,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Agent, c.AlipayOrderRollback, c.ComputeImage, c.ComputeInstance,
		c.ComputeSpec, c.ComputeSpecPrice, c.Cycle, c.CycleOrder, c.CycleRecharge,
		c.CycleRedeemCode, c.CycleRenewal, c.CycleTransaction, c.DomainBinding,
		c.Employee, c.Gateway, c.GatewayPort, c.NetworkMapping, c.S3Bucket, c.S3User,
		c.Script, c.ScriptExecutionRecord, c.Storage, c.StorageProvider, c.Task,
		c.User, c.UserResourceLimit,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AgentMutation:
		return c.Agent.mutate(ctx, m)
	case *AlipayOrderRollbackMutation:
		return c.AlipayOrderRollback.mutate(ctx, m)
	case *ComputeImageMutation:
		return c.ComputeImage.mutate(ctx, m)
	case *ComputeInstanceMutation:
		return c.ComputeInstance.mutate(ctx, m)
	case *ComputeSpecMutation:
		return c.ComputeSpec.mutate(ctx, m)
	case *ComputeSpecPriceMutation:
		return c.ComputeSpecPrice.mutate(ctx, m)
	case *CycleMutation:
		return c.Cycle.mutate(ctx, m)
	case *CycleOrderMutation:
		return c.CycleOrder.mutate(ctx, m)
	case *CycleRechargeMutation:
		return c.CycleRecharge.mutate(ctx, m)
	case *CycleRedeemCodeMutation:
		return c.CycleRedeemCode.mutate(ctx, m)
	case *CycleRenewalMutation:
		return c.CycleRenewal.mutate(ctx, m)
	case *CycleTransactionMutation:
		return c.CycleTransaction.mutate(ctx, m)
	case *DomainBindingMutation:
		return c.DomainBinding.mutate(ctx, m)
	case *EmployeeMutation:
		return c.Employee.mutate(ctx, m)
	case *GatewayMutation:
		return c.Gateway.mutate(ctx, m)
	case *GatewayPortMutation:
		return c.GatewayPort.mutate(ctx, m)
	case *NetworkMappingMutation:
		return c.NetworkMapping.mutate(ctx, m)
	case *S3BucketMutation:
		return c.S3Bucket.mutate(ctx, m)
	case *S3UserMutation:
		return c.S3User.mutate(ctx, m)
	case *ScriptMutation:
		return c.Script.mutate(ctx, m)
	case *ScriptExecutionRecordMutation:
		return c.ScriptExecutionRecord.mutate(ctx, m)
	case *StorageMutation:
		return c.Storage.mutate(ctx, m)
	case *StorageProviderMutation:
		return c.StorageProvider.mutate(ctx, m)
	case *TaskMutation:
		return c.Task.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserResourceLimitMutation:
		return c.UserResourceLimit.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AgentClient is a client for the Agent schema.
type AgentClient struct {
	config
}

// NewAgentClient returns a client for the Agent from the given config.
func NewAgentClient(c config) *AgentClient {
	return &AgentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `agent.Hooks(f(g(h())))`.
func (c *AgentClient) Use(hooks ...Hook) {
	c.hooks.Agent = append(c.hooks.Agent, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `agent.Intercept(f(g(h())))`.
func (c *AgentClient) Intercept(interceptors ...Interceptor) {
	c.inters.Agent = append(c.inters.Agent, interceptors...)
}

// Create returns a builder for creating a Agent entity.
func (c *AgentClient) Create() *AgentCreate {
	mutation := newAgentMutation(c.config, OpCreate)
	return &AgentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Agent entities.
func (c *AgentClient) CreateBulk(builders ...*AgentCreate) *AgentCreateBulk {
	return &AgentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Agent.
func (c *AgentClient) Update() *AgentUpdate {
	mutation := newAgentMutation(c.config, OpUpdate)
	return &AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AgentClient) UpdateOne(a *Agent) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgent(a))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AgentClient) UpdateOneID(id uuid.UUID) *AgentUpdateOne {
	mutation := newAgentMutation(c.config, OpUpdateOne, withAgentID(id))
	return &AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Agent.
func (c *AgentClient) Delete() *AgentDelete {
	mutation := newAgentMutation(c.config, OpDelete)
	return &AgentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AgentClient) DeleteOne(a *Agent) *AgentDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AgentClient) DeleteOneID(id uuid.UUID) *AgentDeleteOne {
	builder := c.Delete().Where(agent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AgentDeleteOne{builder}
}

// Query returns a query builder for Agent.
func (c *AgentClient) Query() *AgentQuery {
	return &AgentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAgent},
		inters: c.Interceptors(),
	}
}

// Get returns a Agent entity by its id.
func (c *AgentClient) Get(ctx context.Context, id uuid.UUID) (*Agent, error) {
	return c.Query().Where(agent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AgentClient) GetX(ctx context.Context, id uuid.UUID) *Agent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AgentClient) Hooks() []Hook {
	return c.hooks.Agent
}

// Interceptors returns the client interceptors.
func (c *AgentClient) Interceptors() []Interceptor {
	return c.inters.Agent
}

func (c *AgentClient) mutate(ctx context.Context, m *AgentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AgentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AgentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AgentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AgentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Agent mutation op: %q", m.Op())
	}
}

// AlipayOrderRollbackClient is a client for the AlipayOrderRollback schema.
type AlipayOrderRollbackClient struct {
	config
}

// NewAlipayOrderRollbackClient returns a client for the AlipayOrderRollback from the given config.
func NewAlipayOrderRollbackClient(c config) *AlipayOrderRollbackClient {
	return &AlipayOrderRollbackClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `alipayorderrollback.Hooks(f(g(h())))`.
func (c *AlipayOrderRollbackClient) Use(hooks ...Hook) {
	c.hooks.AlipayOrderRollback = append(c.hooks.AlipayOrderRollback, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `alipayorderrollback.Intercept(f(g(h())))`.
func (c *AlipayOrderRollbackClient) Intercept(interceptors ...Interceptor) {
	c.inters.AlipayOrderRollback = append(c.inters.AlipayOrderRollback, interceptors...)
}

// Create returns a builder for creating a AlipayOrderRollback entity.
func (c *AlipayOrderRollbackClient) Create() *AlipayOrderRollbackCreate {
	mutation := newAlipayOrderRollbackMutation(c.config, OpCreate)
	return &AlipayOrderRollbackCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AlipayOrderRollback entities.
func (c *AlipayOrderRollbackClient) CreateBulk(builders ...*AlipayOrderRollbackCreate) *AlipayOrderRollbackCreateBulk {
	return &AlipayOrderRollbackCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AlipayOrderRollback.
func (c *AlipayOrderRollbackClient) Update() *AlipayOrderRollbackUpdate {
	mutation := newAlipayOrderRollbackMutation(c.config, OpUpdate)
	return &AlipayOrderRollbackUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AlipayOrderRollbackClient) UpdateOne(aor *AlipayOrderRollback) *AlipayOrderRollbackUpdateOne {
	mutation := newAlipayOrderRollbackMutation(c.config, OpUpdateOne, withAlipayOrderRollback(aor))
	return &AlipayOrderRollbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AlipayOrderRollbackClient) UpdateOneID(id int) *AlipayOrderRollbackUpdateOne {
	mutation := newAlipayOrderRollbackMutation(c.config, OpUpdateOne, withAlipayOrderRollbackID(id))
	return &AlipayOrderRollbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AlipayOrderRollback.
func (c *AlipayOrderRollbackClient) Delete() *AlipayOrderRollbackDelete {
	mutation := newAlipayOrderRollbackMutation(c.config, OpDelete)
	return &AlipayOrderRollbackDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AlipayOrderRollbackClient) DeleteOne(aor *AlipayOrderRollback) *AlipayOrderRollbackDeleteOne {
	return c.DeleteOneID(aor.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AlipayOrderRollbackClient) DeleteOneID(id int) *AlipayOrderRollbackDeleteOne {
	builder := c.Delete().Where(alipayorderrollback.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AlipayOrderRollbackDeleteOne{builder}
}

// Query returns a query builder for AlipayOrderRollback.
func (c *AlipayOrderRollbackClient) Query() *AlipayOrderRollbackQuery {
	return &AlipayOrderRollbackQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAlipayOrderRollback},
		inters: c.Interceptors(),
	}
}

// Get returns a AlipayOrderRollback entity by its id.
func (c *AlipayOrderRollbackClient) Get(ctx context.Context, id int) (*AlipayOrderRollback, error) {
	return c.Query().Where(alipayorderrollback.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AlipayOrderRollbackClient) GetX(ctx context.Context, id int) *AlipayOrderRollback {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AlipayOrderRollbackClient) Hooks() []Hook {
	return c.hooks.AlipayOrderRollback
}

// Interceptors returns the client interceptors.
func (c *AlipayOrderRollbackClient) Interceptors() []Interceptor {
	return c.inters.AlipayOrderRollback
}

func (c *AlipayOrderRollbackClient) mutate(ctx context.Context, m *AlipayOrderRollbackMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AlipayOrderRollbackCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AlipayOrderRollbackUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AlipayOrderRollbackUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AlipayOrderRollbackDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AlipayOrderRollback mutation op: %q", m.Op())
	}
}

// ComputeImageClient is a client for the ComputeImage schema.
type ComputeImageClient struct {
	config
}

// NewComputeImageClient returns a client for the ComputeImage from the given config.
func NewComputeImageClient(c config) *ComputeImageClient {
	return &ComputeImageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computeimage.Hooks(f(g(h())))`.
func (c *ComputeImageClient) Use(hooks ...Hook) {
	c.hooks.ComputeImage = append(c.hooks.ComputeImage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computeimage.Intercept(f(g(h())))`.
func (c *ComputeImageClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeImage = append(c.inters.ComputeImage, interceptors...)
}

// Create returns a builder for creating a ComputeImage entity.
func (c *ComputeImageClient) Create() *ComputeImageCreate {
	mutation := newComputeImageMutation(c.config, OpCreate)
	return &ComputeImageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeImage entities.
func (c *ComputeImageClient) CreateBulk(builders ...*ComputeImageCreate) *ComputeImageCreateBulk {
	return &ComputeImageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeImage.
func (c *ComputeImageClient) Update() *ComputeImageUpdate {
	mutation := newComputeImageMutation(c.config, OpUpdate)
	return &ComputeImageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeImageClient) UpdateOne(ci *ComputeImage) *ComputeImageUpdateOne {
	mutation := newComputeImageMutation(c.config, OpUpdateOne, withComputeImage(ci))
	return &ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeImageClient) UpdateOneID(id int32) *ComputeImageUpdateOne {
	mutation := newComputeImageMutation(c.config, OpUpdateOne, withComputeImageID(id))
	return &ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeImage.
func (c *ComputeImageClient) Delete() *ComputeImageDelete {
	mutation := newComputeImageMutation(c.config, OpDelete)
	return &ComputeImageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeImageClient) DeleteOne(ci *ComputeImage) *ComputeImageDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeImageClient) DeleteOneID(id int32) *ComputeImageDeleteOne {
	builder := c.Delete().Where(computeimage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeImageDeleteOne{builder}
}

// Query returns a query builder for ComputeImage.
func (c *ComputeImageClient) Query() *ComputeImageQuery {
	return &ComputeImageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeImage},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeImage entity by its id.
func (c *ComputeImageClient) Get(ctx context.Context, id int32) (*ComputeImage, error) {
	return c.Query().Where(computeimage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeImageClient) GetX(ctx context.Context, id int32) *ComputeImage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeImageClient) Hooks() []Hook {
	return c.hooks.ComputeImage
}

// Interceptors returns the client interceptors.
func (c *ComputeImageClient) Interceptors() []Interceptor {
	return c.inters.ComputeImage
}

func (c *ComputeImageClient) mutate(ctx context.Context, m *ComputeImageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeImageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeImageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeImageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeImageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeImage mutation op: %q", m.Op())
	}
}

// ComputeInstanceClient is a client for the ComputeInstance schema.
type ComputeInstanceClient struct {
	config
}

// NewComputeInstanceClient returns a client for the ComputeInstance from the given config.
func NewComputeInstanceClient(c config) *ComputeInstanceClient {
	return &ComputeInstanceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computeinstance.Hooks(f(g(h())))`.
func (c *ComputeInstanceClient) Use(hooks ...Hook) {
	c.hooks.ComputeInstance = append(c.hooks.ComputeInstance, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computeinstance.Intercept(f(g(h())))`.
func (c *ComputeInstanceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeInstance = append(c.inters.ComputeInstance, interceptors...)
}

// Create returns a builder for creating a ComputeInstance entity.
func (c *ComputeInstanceClient) Create() *ComputeInstanceCreate {
	mutation := newComputeInstanceMutation(c.config, OpCreate)
	return &ComputeInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeInstance entities.
func (c *ComputeInstanceClient) CreateBulk(builders ...*ComputeInstanceCreate) *ComputeInstanceCreateBulk {
	return &ComputeInstanceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeInstance.
func (c *ComputeInstanceClient) Update() *ComputeInstanceUpdate {
	mutation := newComputeInstanceMutation(c.config, OpUpdate)
	return &ComputeInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeInstanceClient) UpdateOne(ci *ComputeInstance) *ComputeInstanceUpdateOne {
	mutation := newComputeInstanceMutation(c.config, OpUpdateOne, withComputeInstance(ci))
	return &ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeInstanceClient) UpdateOneID(id uuid.UUID) *ComputeInstanceUpdateOne {
	mutation := newComputeInstanceMutation(c.config, OpUpdateOne, withComputeInstanceID(id))
	return &ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeInstance.
func (c *ComputeInstanceClient) Delete() *ComputeInstanceDelete {
	mutation := newComputeInstanceMutation(c.config, OpDelete)
	return &ComputeInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeInstanceClient) DeleteOne(ci *ComputeInstance) *ComputeInstanceDeleteOne {
	return c.DeleteOneID(ci.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeInstanceClient) DeleteOneID(id uuid.UUID) *ComputeInstanceDeleteOne {
	builder := c.Delete().Where(computeinstance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeInstanceDeleteOne{builder}
}

// Query returns a query builder for ComputeInstance.
func (c *ComputeInstanceClient) Query() *ComputeInstanceQuery {
	return &ComputeInstanceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeInstance},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeInstance entity by its id.
func (c *ComputeInstanceClient) Get(ctx context.Context, id uuid.UUID) (*ComputeInstance, error) {
	return c.Query().Where(computeinstance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeInstanceClient) GetX(ctx context.Context, id uuid.UUID) *ComputeInstance {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeInstanceClient) Hooks() []Hook {
	return c.hooks.ComputeInstance
}

// Interceptors returns the client interceptors.
func (c *ComputeInstanceClient) Interceptors() []Interceptor {
	return c.inters.ComputeInstance
}

func (c *ComputeInstanceClient) mutate(ctx context.Context, m *ComputeInstanceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeInstanceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeInstanceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeInstanceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeInstanceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeInstance mutation op: %q", m.Op())
	}
}

// ComputeSpecClient is a client for the ComputeSpec schema.
type ComputeSpecClient struct {
	config
}

// NewComputeSpecClient returns a client for the ComputeSpec from the given config.
func NewComputeSpecClient(c config) *ComputeSpecClient {
	return &ComputeSpecClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computespec.Hooks(f(g(h())))`.
func (c *ComputeSpecClient) Use(hooks ...Hook) {
	c.hooks.ComputeSpec = append(c.hooks.ComputeSpec, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computespec.Intercept(f(g(h())))`.
func (c *ComputeSpecClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeSpec = append(c.inters.ComputeSpec, interceptors...)
}

// Create returns a builder for creating a ComputeSpec entity.
func (c *ComputeSpecClient) Create() *ComputeSpecCreate {
	mutation := newComputeSpecMutation(c.config, OpCreate)
	return &ComputeSpecCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeSpec entities.
func (c *ComputeSpecClient) CreateBulk(builders ...*ComputeSpecCreate) *ComputeSpecCreateBulk {
	return &ComputeSpecCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeSpec.
func (c *ComputeSpecClient) Update() *ComputeSpecUpdate {
	mutation := newComputeSpecMutation(c.config, OpUpdate)
	return &ComputeSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeSpecClient) UpdateOne(cs *ComputeSpec) *ComputeSpecUpdateOne {
	mutation := newComputeSpecMutation(c.config, OpUpdateOne, withComputeSpec(cs))
	return &ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeSpecClient) UpdateOneID(id int32) *ComputeSpecUpdateOne {
	mutation := newComputeSpecMutation(c.config, OpUpdateOne, withComputeSpecID(id))
	return &ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeSpec.
func (c *ComputeSpecClient) Delete() *ComputeSpecDelete {
	mutation := newComputeSpecMutation(c.config, OpDelete)
	return &ComputeSpecDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeSpecClient) DeleteOne(cs *ComputeSpec) *ComputeSpecDeleteOne {
	return c.DeleteOneID(cs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeSpecClient) DeleteOneID(id int32) *ComputeSpecDeleteOne {
	builder := c.Delete().Where(computespec.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeSpecDeleteOne{builder}
}

// Query returns a query builder for ComputeSpec.
func (c *ComputeSpecClient) Query() *ComputeSpecQuery {
	return &ComputeSpecQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeSpec},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeSpec entity by its id.
func (c *ComputeSpecClient) Get(ctx context.Context, id int32) (*ComputeSpec, error) {
	return c.Query().Where(computespec.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeSpecClient) GetX(ctx context.Context, id int32) *ComputeSpec {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeSpecClient) Hooks() []Hook {
	return c.hooks.ComputeSpec
}

// Interceptors returns the client interceptors.
func (c *ComputeSpecClient) Interceptors() []Interceptor {
	return c.inters.ComputeSpec
}

func (c *ComputeSpecClient) mutate(ctx context.Context, m *ComputeSpecMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeSpecCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeSpecUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeSpecUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeSpecDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeSpec mutation op: %q", m.Op())
	}
}

// ComputeSpecPriceClient is a client for the ComputeSpecPrice schema.
type ComputeSpecPriceClient struct {
	config
}

// NewComputeSpecPriceClient returns a client for the ComputeSpecPrice from the given config.
func NewComputeSpecPriceClient(c config) *ComputeSpecPriceClient {
	return &ComputeSpecPriceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `computespecprice.Hooks(f(g(h())))`.
func (c *ComputeSpecPriceClient) Use(hooks ...Hook) {
	c.hooks.ComputeSpecPrice = append(c.hooks.ComputeSpecPrice, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `computespecprice.Intercept(f(g(h())))`.
func (c *ComputeSpecPriceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ComputeSpecPrice = append(c.inters.ComputeSpecPrice, interceptors...)
}

// Create returns a builder for creating a ComputeSpecPrice entity.
func (c *ComputeSpecPriceClient) Create() *ComputeSpecPriceCreate {
	mutation := newComputeSpecPriceMutation(c.config, OpCreate)
	return &ComputeSpecPriceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ComputeSpecPrice entities.
func (c *ComputeSpecPriceClient) CreateBulk(builders ...*ComputeSpecPriceCreate) *ComputeSpecPriceCreateBulk {
	return &ComputeSpecPriceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ComputeSpecPrice.
func (c *ComputeSpecPriceClient) Update() *ComputeSpecPriceUpdate {
	mutation := newComputeSpecPriceMutation(c.config, OpUpdate)
	return &ComputeSpecPriceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ComputeSpecPriceClient) UpdateOne(csp *ComputeSpecPrice) *ComputeSpecPriceUpdateOne {
	mutation := newComputeSpecPriceMutation(c.config, OpUpdateOne, withComputeSpecPrice(csp))
	return &ComputeSpecPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ComputeSpecPriceClient) UpdateOneID(id int32) *ComputeSpecPriceUpdateOne {
	mutation := newComputeSpecPriceMutation(c.config, OpUpdateOne, withComputeSpecPriceID(id))
	return &ComputeSpecPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ComputeSpecPrice.
func (c *ComputeSpecPriceClient) Delete() *ComputeSpecPriceDelete {
	mutation := newComputeSpecPriceMutation(c.config, OpDelete)
	return &ComputeSpecPriceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ComputeSpecPriceClient) DeleteOne(csp *ComputeSpecPrice) *ComputeSpecPriceDeleteOne {
	return c.DeleteOneID(csp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ComputeSpecPriceClient) DeleteOneID(id int32) *ComputeSpecPriceDeleteOne {
	builder := c.Delete().Where(computespecprice.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ComputeSpecPriceDeleteOne{builder}
}

// Query returns a query builder for ComputeSpecPrice.
func (c *ComputeSpecPriceClient) Query() *ComputeSpecPriceQuery {
	return &ComputeSpecPriceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeComputeSpecPrice},
		inters: c.Interceptors(),
	}
}

// Get returns a ComputeSpecPrice entity by its id.
func (c *ComputeSpecPriceClient) Get(ctx context.Context, id int32) (*ComputeSpecPrice, error) {
	return c.Query().Where(computespecprice.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ComputeSpecPriceClient) GetX(ctx context.Context, id int32) *ComputeSpecPrice {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ComputeSpecPriceClient) Hooks() []Hook {
	return c.hooks.ComputeSpecPrice
}

// Interceptors returns the client interceptors.
func (c *ComputeSpecPriceClient) Interceptors() []Interceptor {
	return c.inters.ComputeSpecPrice
}

func (c *ComputeSpecPriceClient) mutate(ctx context.Context, m *ComputeSpecPriceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ComputeSpecPriceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ComputeSpecPriceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ComputeSpecPriceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ComputeSpecPriceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ComputeSpecPrice mutation op: %q", m.Op())
	}
}

// CycleClient is a client for the Cycle schema.
type CycleClient struct {
	config
}

// NewCycleClient returns a client for the Cycle from the given config.
func NewCycleClient(c config) *CycleClient {
	return &CycleClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cycle.Hooks(f(g(h())))`.
func (c *CycleClient) Use(hooks ...Hook) {
	c.hooks.Cycle = append(c.hooks.Cycle, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cycle.Intercept(f(g(h())))`.
func (c *CycleClient) Intercept(interceptors ...Interceptor) {
	c.inters.Cycle = append(c.inters.Cycle, interceptors...)
}

// Create returns a builder for creating a Cycle entity.
func (c *CycleClient) Create() *CycleCreate {
	mutation := newCycleMutation(c.config, OpCreate)
	return &CycleCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Cycle entities.
func (c *CycleClient) CreateBulk(builders ...*CycleCreate) *CycleCreateBulk {
	return &CycleCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Cycle.
func (c *CycleClient) Update() *CycleUpdate {
	mutation := newCycleMutation(c.config, OpUpdate)
	return &CycleUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleClient) UpdateOne(cy *Cycle) *CycleUpdateOne {
	mutation := newCycleMutation(c.config, OpUpdateOne, withCycle(cy))
	return &CycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleClient) UpdateOneID(id uuid.UUID) *CycleUpdateOne {
	mutation := newCycleMutation(c.config, OpUpdateOne, withCycleID(id))
	return &CycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Cycle.
func (c *CycleClient) Delete() *CycleDelete {
	mutation := newCycleMutation(c.config, OpDelete)
	return &CycleDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleClient) DeleteOne(cy *Cycle) *CycleDeleteOne {
	return c.DeleteOneID(cy.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleClient) DeleteOneID(id uuid.UUID) *CycleDeleteOne {
	builder := c.Delete().Where(cycle.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleDeleteOne{builder}
}

// Query returns a query builder for Cycle.
func (c *CycleClient) Query() *CycleQuery {
	return &CycleQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycle},
		inters: c.Interceptors(),
	}
}

// Get returns a Cycle entity by its id.
func (c *CycleClient) Get(ctx context.Context, id uuid.UUID) (*Cycle, error) {
	return c.Query().Where(cycle.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleClient) GetX(ctx context.Context, id uuid.UUID) *Cycle {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleClient) Hooks() []Hook {
	return c.hooks.Cycle
}

// Interceptors returns the client interceptors.
func (c *CycleClient) Interceptors() []Interceptor {
	return c.inters.Cycle
}

func (c *CycleClient) mutate(ctx context.Context, m *CycleMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Cycle mutation op: %q", m.Op())
	}
}

// CycleOrderClient is a client for the CycleOrder schema.
type CycleOrderClient struct {
	config
}

// NewCycleOrderClient returns a client for the CycleOrder from the given config.
func NewCycleOrderClient(c config) *CycleOrderClient {
	return &CycleOrderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cycleorder.Hooks(f(g(h())))`.
func (c *CycleOrderClient) Use(hooks ...Hook) {
	c.hooks.CycleOrder = append(c.hooks.CycleOrder, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cycleorder.Intercept(f(g(h())))`.
func (c *CycleOrderClient) Intercept(interceptors ...Interceptor) {
	c.inters.CycleOrder = append(c.inters.CycleOrder, interceptors...)
}

// Create returns a builder for creating a CycleOrder entity.
func (c *CycleOrderClient) Create() *CycleOrderCreate {
	mutation := newCycleOrderMutation(c.config, OpCreate)
	return &CycleOrderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CycleOrder entities.
func (c *CycleOrderClient) CreateBulk(builders ...*CycleOrderCreate) *CycleOrderCreateBulk {
	return &CycleOrderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CycleOrder.
func (c *CycleOrderClient) Update() *CycleOrderUpdate {
	mutation := newCycleOrderMutation(c.config, OpUpdate)
	return &CycleOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleOrderClient) UpdateOne(co *CycleOrder) *CycleOrderUpdateOne {
	mutation := newCycleOrderMutation(c.config, OpUpdateOne, withCycleOrder(co))
	return &CycleOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleOrderClient) UpdateOneID(id uuid.UUID) *CycleOrderUpdateOne {
	mutation := newCycleOrderMutation(c.config, OpUpdateOne, withCycleOrderID(id))
	return &CycleOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CycleOrder.
func (c *CycleOrderClient) Delete() *CycleOrderDelete {
	mutation := newCycleOrderMutation(c.config, OpDelete)
	return &CycleOrderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleOrderClient) DeleteOne(co *CycleOrder) *CycleOrderDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleOrderClient) DeleteOneID(id uuid.UUID) *CycleOrderDeleteOne {
	builder := c.Delete().Where(cycleorder.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleOrderDeleteOne{builder}
}

// Query returns a query builder for CycleOrder.
func (c *CycleOrderClient) Query() *CycleOrderQuery {
	return &CycleOrderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycleOrder},
		inters: c.Interceptors(),
	}
}

// Get returns a CycleOrder entity by its id.
func (c *CycleOrderClient) Get(ctx context.Context, id uuid.UUID) (*CycleOrder, error) {
	return c.Query().Where(cycleorder.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleOrderClient) GetX(ctx context.Context, id uuid.UUID) *CycleOrder {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleOrderClient) Hooks() []Hook {
	return c.hooks.CycleOrder
}

// Interceptors returns the client interceptors.
func (c *CycleOrderClient) Interceptors() []Interceptor {
	return c.inters.CycleOrder
}

func (c *CycleOrderClient) mutate(ctx context.Context, m *CycleOrderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleOrderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleOrderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleOrderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleOrderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CycleOrder mutation op: %q", m.Op())
	}
}

// CycleRechargeClient is a client for the CycleRecharge schema.
type CycleRechargeClient struct {
	config
}

// NewCycleRechargeClient returns a client for the CycleRecharge from the given config.
func NewCycleRechargeClient(c config) *CycleRechargeClient {
	return &CycleRechargeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cyclerecharge.Hooks(f(g(h())))`.
func (c *CycleRechargeClient) Use(hooks ...Hook) {
	c.hooks.CycleRecharge = append(c.hooks.CycleRecharge, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cyclerecharge.Intercept(f(g(h())))`.
func (c *CycleRechargeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CycleRecharge = append(c.inters.CycleRecharge, interceptors...)
}

// Create returns a builder for creating a CycleRecharge entity.
func (c *CycleRechargeClient) Create() *CycleRechargeCreate {
	mutation := newCycleRechargeMutation(c.config, OpCreate)
	return &CycleRechargeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CycleRecharge entities.
func (c *CycleRechargeClient) CreateBulk(builders ...*CycleRechargeCreate) *CycleRechargeCreateBulk {
	return &CycleRechargeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CycleRecharge.
func (c *CycleRechargeClient) Update() *CycleRechargeUpdate {
	mutation := newCycleRechargeMutation(c.config, OpUpdate)
	return &CycleRechargeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleRechargeClient) UpdateOne(cr *CycleRecharge) *CycleRechargeUpdateOne {
	mutation := newCycleRechargeMutation(c.config, OpUpdateOne, withCycleRecharge(cr))
	return &CycleRechargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleRechargeClient) UpdateOneID(id uuid.UUID) *CycleRechargeUpdateOne {
	mutation := newCycleRechargeMutation(c.config, OpUpdateOne, withCycleRechargeID(id))
	return &CycleRechargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CycleRecharge.
func (c *CycleRechargeClient) Delete() *CycleRechargeDelete {
	mutation := newCycleRechargeMutation(c.config, OpDelete)
	return &CycleRechargeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleRechargeClient) DeleteOne(cr *CycleRecharge) *CycleRechargeDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleRechargeClient) DeleteOneID(id uuid.UUID) *CycleRechargeDeleteOne {
	builder := c.Delete().Where(cyclerecharge.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleRechargeDeleteOne{builder}
}

// Query returns a query builder for CycleRecharge.
func (c *CycleRechargeClient) Query() *CycleRechargeQuery {
	return &CycleRechargeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycleRecharge},
		inters: c.Interceptors(),
	}
}

// Get returns a CycleRecharge entity by its id.
func (c *CycleRechargeClient) Get(ctx context.Context, id uuid.UUID) (*CycleRecharge, error) {
	return c.Query().Where(cyclerecharge.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleRechargeClient) GetX(ctx context.Context, id uuid.UUID) *CycleRecharge {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleRechargeClient) Hooks() []Hook {
	return c.hooks.CycleRecharge
}

// Interceptors returns the client interceptors.
func (c *CycleRechargeClient) Interceptors() []Interceptor {
	return c.inters.CycleRecharge
}

func (c *CycleRechargeClient) mutate(ctx context.Context, m *CycleRechargeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleRechargeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleRechargeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleRechargeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleRechargeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CycleRecharge mutation op: %q", m.Op())
	}
}

// CycleRedeemCodeClient is a client for the CycleRedeemCode schema.
type CycleRedeemCodeClient struct {
	config
}

// NewCycleRedeemCodeClient returns a client for the CycleRedeemCode from the given config.
func NewCycleRedeemCodeClient(c config) *CycleRedeemCodeClient {
	return &CycleRedeemCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cycleredeemcode.Hooks(f(g(h())))`.
func (c *CycleRedeemCodeClient) Use(hooks ...Hook) {
	c.hooks.CycleRedeemCode = append(c.hooks.CycleRedeemCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cycleredeemcode.Intercept(f(g(h())))`.
func (c *CycleRedeemCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.CycleRedeemCode = append(c.inters.CycleRedeemCode, interceptors...)
}

// Create returns a builder for creating a CycleRedeemCode entity.
func (c *CycleRedeemCodeClient) Create() *CycleRedeemCodeCreate {
	mutation := newCycleRedeemCodeMutation(c.config, OpCreate)
	return &CycleRedeemCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CycleRedeemCode entities.
func (c *CycleRedeemCodeClient) CreateBulk(builders ...*CycleRedeemCodeCreate) *CycleRedeemCodeCreateBulk {
	return &CycleRedeemCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CycleRedeemCode.
func (c *CycleRedeemCodeClient) Update() *CycleRedeemCodeUpdate {
	mutation := newCycleRedeemCodeMutation(c.config, OpUpdate)
	return &CycleRedeemCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleRedeemCodeClient) UpdateOne(crc *CycleRedeemCode) *CycleRedeemCodeUpdateOne {
	mutation := newCycleRedeemCodeMutation(c.config, OpUpdateOne, withCycleRedeemCode(crc))
	return &CycleRedeemCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleRedeemCodeClient) UpdateOneID(id uuid.UUID) *CycleRedeemCodeUpdateOne {
	mutation := newCycleRedeemCodeMutation(c.config, OpUpdateOne, withCycleRedeemCodeID(id))
	return &CycleRedeemCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CycleRedeemCode.
func (c *CycleRedeemCodeClient) Delete() *CycleRedeemCodeDelete {
	mutation := newCycleRedeemCodeMutation(c.config, OpDelete)
	return &CycleRedeemCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleRedeemCodeClient) DeleteOne(crc *CycleRedeemCode) *CycleRedeemCodeDeleteOne {
	return c.DeleteOneID(crc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleRedeemCodeClient) DeleteOneID(id uuid.UUID) *CycleRedeemCodeDeleteOne {
	builder := c.Delete().Where(cycleredeemcode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleRedeemCodeDeleteOne{builder}
}

// Query returns a query builder for CycleRedeemCode.
func (c *CycleRedeemCodeClient) Query() *CycleRedeemCodeQuery {
	return &CycleRedeemCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycleRedeemCode},
		inters: c.Interceptors(),
	}
}

// Get returns a CycleRedeemCode entity by its id.
func (c *CycleRedeemCodeClient) Get(ctx context.Context, id uuid.UUID) (*CycleRedeemCode, error) {
	return c.Query().Where(cycleredeemcode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleRedeemCodeClient) GetX(ctx context.Context, id uuid.UUID) *CycleRedeemCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleRedeemCodeClient) Hooks() []Hook {
	return c.hooks.CycleRedeemCode
}

// Interceptors returns the client interceptors.
func (c *CycleRedeemCodeClient) Interceptors() []Interceptor {
	return c.inters.CycleRedeemCode
}

func (c *CycleRedeemCodeClient) mutate(ctx context.Context, m *CycleRedeemCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleRedeemCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleRedeemCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleRedeemCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleRedeemCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CycleRedeemCode mutation op: %q", m.Op())
	}
}

// CycleRenewalClient is a client for the CycleRenewal schema.
type CycleRenewalClient struct {
	config
}

// NewCycleRenewalClient returns a client for the CycleRenewal from the given config.
func NewCycleRenewalClient(c config) *CycleRenewalClient {
	return &CycleRenewalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cyclerenewal.Hooks(f(g(h())))`.
func (c *CycleRenewalClient) Use(hooks ...Hook) {
	c.hooks.CycleRenewal = append(c.hooks.CycleRenewal, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cyclerenewal.Intercept(f(g(h())))`.
func (c *CycleRenewalClient) Intercept(interceptors ...Interceptor) {
	c.inters.CycleRenewal = append(c.inters.CycleRenewal, interceptors...)
}

// Create returns a builder for creating a CycleRenewal entity.
func (c *CycleRenewalClient) Create() *CycleRenewalCreate {
	mutation := newCycleRenewalMutation(c.config, OpCreate)
	return &CycleRenewalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CycleRenewal entities.
func (c *CycleRenewalClient) CreateBulk(builders ...*CycleRenewalCreate) *CycleRenewalCreateBulk {
	return &CycleRenewalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CycleRenewal.
func (c *CycleRenewalClient) Update() *CycleRenewalUpdate {
	mutation := newCycleRenewalMutation(c.config, OpUpdate)
	return &CycleRenewalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleRenewalClient) UpdateOne(cr *CycleRenewal) *CycleRenewalUpdateOne {
	mutation := newCycleRenewalMutation(c.config, OpUpdateOne, withCycleRenewal(cr))
	return &CycleRenewalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleRenewalClient) UpdateOneID(id uuid.UUID) *CycleRenewalUpdateOne {
	mutation := newCycleRenewalMutation(c.config, OpUpdateOne, withCycleRenewalID(id))
	return &CycleRenewalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CycleRenewal.
func (c *CycleRenewalClient) Delete() *CycleRenewalDelete {
	mutation := newCycleRenewalMutation(c.config, OpDelete)
	return &CycleRenewalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleRenewalClient) DeleteOne(cr *CycleRenewal) *CycleRenewalDeleteOne {
	return c.DeleteOneID(cr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleRenewalClient) DeleteOneID(id uuid.UUID) *CycleRenewalDeleteOne {
	builder := c.Delete().Where(cyclerenewal.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleRenewalDeleteOne{builder}
}

// Query returns a query builder for CycleRenewal.
func (c *CycleRenewalClient) Query() *CycleRenewalQuery {
	return &CycleRenewalQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycleRenewal},
		inters: c.Interceptors(),
	}
}

// Get returns a CycleRenewal entity by its id.
func (c *CycleRenewalClient) Get(ctx context.Context, id uuid.UUID) (*CycleRenewal, error) {
	return c.Query().Where(cyclerenewal.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleRenewalClient) GetX(ctx context.Context, id uuid.UUID) *CycleRenewal {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleRenewalClient) Hooks() []Hook {
	return c.hooks.CycleRenewal
}

// Interceptors returns the client interceptors.
func (c *CycleRenewalClient) Interceptors() []Interceptor {
	return c.inters.CycleRenewal
}

func (c *CycleRenewalClient) mutate(ctx context.Context, m *CycleRenewalMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleRenewalCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleRenewalUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleRenewalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleRenewalDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CycleRenewal mutation op: %q", m.Op())
	}
}

// CycleTransactionClient is a client for the CycleTransaction schema.
type CycleTransactionClient struct {
	config
}

// NewCycleTransactionClient returns a client for the CycleTransaction from the given config.
func NewCycleTransactionClient(c config) *CycleTransactionClient {
	return &CycleTransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cycletransaction.Hooks(f(g(h())))`.
func (c *CycleTransactionClient) Use(hooks ...Hook) {
	c.hooks.CycleTransaction = append(c.hooks.CycleTransaction, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cycletransaction.Intercept(f(g(h())))`.
func (c *CycleTransactionClient) Intercept(interceptors ...Interceptor) {
	c.inters.CycleTransaction = append(c.inters.CycleTransaction, interceptors...)
}

// Create returns a builder for creating a CycleTransaction entity.
func (c *CycleTransactionClient) Create() *CycleTransactionCreate {
	mutation := newCycleTransactionMutation(c.config, OpCreate)
	return &CycleTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CycleTransaction entities.
func (c *CycleTransactionClient) CreateBulk(builders ...*CycleTransactionCreate) *CycleTransactionCreateBulk {
	return &CycleTransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CycleTransaction.
func (c *CycleTransactionClient) Update() *CycleTransactionUpdate {
	mutation := newCycleTransactionMutation(c.config, OpUpdate)
	return &CycleTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CycleTransactionClient) UpdateOne(ct *CycleTransaction) *CycleTransactionUpdateOne {
	mutation := newCycleTransactionMutation(c.config, OpUpdateOne, withCycleTransaction(ct))
	return &CycleTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CycleTransactionClient) UpdateOneID(id uuid.UUID) *CycleTransactionUpdateOne {
	mutation := newCycleTransactionMutation(c.config, OpUpdateOne, withCycleTransactionID(id))
	return &CycleTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CycleTransaction.
func (c *CycleTransactionClient) Delete() *CycleTransactionDelete {
	mutation := newCycleTransactionMutation(c.config, OpDelete)
	return &CycleTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CycleTransactionClient) DeleteOne(ct *CycleTransaction) *CycleTransactionDeleteOne {
	return c.DeleteOneID(ct.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CycleTransactionClient) DeleteOneID(id uuid.UUID) *CycleTransactionDeleteOne {
	builder := c.Delete().Where(cycletransaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CycleTransactionDeleteOne{builder}
}

// Query returns a query builder for CycleTransaction.
func (c *CycleTransactionClient) Query() *CycleTransactionQuery {
	return &CycleTransactionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCycleTransaction},
		inters: c.Interceptors(),
	}
}

// Get returns a CycleTransaction entity by its id.
func (c *CycleTransactionClient) Get(ctx context.Context, id uuid.UUID) (*CycleTransaction, error) {
	return c.Query().Where(cycletransaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CycleTransactionClient) GetX(ctx context.Context, id uuid.UUID) *CycleTransaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CycleTransactionClient) Hooks() []Hook {
	return c.hooks.CycleTransaction
}

// Interceptors returns the client interceptors.
func (c *CycleTransactionClient) Interceptors() []Interceptor {
	return c.inters.CycleTransaction
}

func (c *CycleTransactionClient) mutate(ctx context.Context, m *CycleTransactionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CycleTransactionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CycleTransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CycleTransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CycleTransactionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CycleTransaction mutation op: %q", m.Op())
	}
}

// DomainBindingClient is a client for the DomainBinding schema.
type DomainBindingClient struct {
	config
}

// NewDomainBindingClient returns a client for the DomainBinding from the given config.
func NewDomainBindingClient(c config) *DomainBindingClient {
	return &DomainBindingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `domainbinding.Hooks(f(g(h())))`.
func (c *DomainBindingClient) Use(hooks ...Hook) {
	c.hooks.DomainBinding = append(c.hooks.DomainBinding, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `domainbinding.Intercept(f(g(h())))`.
func (c *DomainBindingClient) Intercept(interceptors ...Interceptor) {
	c.inters.DomainBinding = append(c.inters.DomainBinding, interceptors...)
}

// Create returns a builder for creating a DomainBinding entity.
func (c *DomainBindingClient) Create() *DomainBindingCreate {
	mutation := newDomainBindingMutation(c.config, OpCreate)
	return &DomainBindingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DomainBinding entities.
func (c *DomainBindingClient) CreateBulk(builders ...*DomainBindingCreate) *DomainBindingCreateBulk {
	return &DomainBindingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DomainBinding.
func (c *DomainBindingClient) Update() *DomainBindingUpdate {
	mutation := newDomainBindingMutation(c.config, OpUpdate)
	return &DomainBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DomainBindingClient) UpdateOne(db *DomainBinding) *DomainBindingUpdateOne {
	mutation := newDomainBindingMutation(c.config, OpUpdateOne, withDomainBinding(db))
	return &DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DomainBindingClient) UpdateOneID(id uuid.UUID) *DomainBindingUpdateOne {
	mutation := newDomainBindingMutation(c.config, OpUpdateOne, withDomainBindingID(id))
	return &DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DomainBinding.
func (c *DomainBindingClient) Delete() *DomainBindingDelete {
	mutation := newDomainBindingMutation(c.config, OpDelete)
	return &DomainBindingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DomainBindingClient) DeleteOne(db *DomainBinding) *DomainBindingDeleteOne {
	return c.DeleteOneID(db.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DomainBindingClient) DeleteOneID(id uuid.UUID) *DomainBindingDeleteOne {
	builder := c.Delete().Where(domainbinding.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DomainBindingDeleteOne{builder}
}

// Query returns a query builder for DomainBinding.
func (c *DomainBindingClient) Query() *DomainBindingQuery {
	return &DomainBindingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDomainBinding},
		inters: c.Interceptors(),
	}
}

// Get returns a DomainBinding entity by its id.
func (c *DomainBindingClient) Get(ctx context.Context, id uuid.UUID) (*DomainBinding, error) {
	return c.Query().Where(domainbinding.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DomainBindingClient) GetX(ctx context.Context, id uuid.UUID) *DomainBinding {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DomainBindingClient) Hooks() []Hook {
	return c.hooks.DomainBinding
}

// Interceptors returns the client interceptors.
func (c *DomainBindingClient) Interceptors() []Interceptor {
	return c.inters.DomainBinding
}

func (c *DomainBindingClient) mutate(ctx context.Context, m *DomainBindingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DomainBindingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DomainBindingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DomainBindingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DomainBindingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DomainBinding mutation op: %q", m.Op())
	}
}

// EmployeeClient is a client for the Employee schema.
type EmployeeClient struct {
	config
}

// NewEmployeeClient returns a client for the Employee from the given config.
func NewEmployeeClient(c config) *EmployeeClient {
	return &EmployeeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `employee.Hooks(f(g(h())))`.
func (c *EmployeeClient) Use(hooks ...Hook) {
	c.hooks.Employee = append(c.hooks.Employee, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `employee.Intercept(f(g(h())))`.
func (c *EmployeeClient) Intercept(interceptors ...Interceptor) {
	c.inters.Employee = append(c.inters.Employee, interceptors...)
}

// Create returns a builder for creating a Employee entity.
func (c *EmployeeClient) Create() *EmployeeCreate {
	mutation := newEmployeeMutation(c.config, OpCreate)
	return &EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Employee entities.
func (c *EmployeeClient) CreateBulk(builders ...*EmployeeCreate) *EmployeeCreateBulk {
	return &EmployeeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Employee.
func (c *EmployeeClient) Update() *EmployeeUpdate {
	mutation := newEmployeeMutation(c.config, OpUpdate)
	return &EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmployeeClient) UpdateOne(e *Employee) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployee(e))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmployeeClient) UpdateOneID(id int) *EmployeeUpdateOne {
	mutation := newEmployeeMutation(c.config, OpUpdateOne, withEmployeeID(id))
	return &EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Employee.
func (c *EmployeeClient) Delete() *EmployeeDelete {
	mutation := newEmployeeMutation(c.config, OpDelete)
	return &EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmployeeClient) DeleteOne(e *Employee) *EmployeeDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmployeeClient) DeleteOneID(id int) *EmployeeDeleteOne {
	builder := c.Delete().Where(employee.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmployeeDeleteOne{builder}
}

// Query returns a query builder for Employee.
func (c *EmployeeClient) Query() *EmployeeQuery {
	return &EmployeeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmployee},
		inters: c.Interceptors(),
	}
}

// Get returns a Employee entity by its id.
func (c *EmployeeClient) Get(ctx context.Context, id int) (*Employee, error) {
	return c.Query().Where(employee.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmployeeClient) GetX(ctx context.Context, id int) *Employee {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmployeeClient) Hooks() []Hook {
	return c.hooks.Employee
}

// Interceptors returns the client interceptors.
func (c *EmployeeClient) Interceptors() []Interceptor {
	return c.inters.Employee
}

func (c *EmployeeClient) mutate(ctx context.Context, m *EmployeeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmployeeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmployeeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmployeeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmployeeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Employee mutation op: %q", m.Op())
	}
}

// GatewayClient is a client for the Gateway schema.
type GatewayClient struct {
	config
}

// NewGatewayClient returns a client for the Gateway from the given config.
func NewGatewayClient(c config) *GatewayClient {
	return &GatewayClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gateway.Hooks(f(g(h())))`.
func (c *GatewayClient) Use(hooks ...Hook) {
	c.hooks.Gateway = append(c.hooks.Gateway, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gateway.Intercept(f(g(h())))`.
func (c *GatewayClient) Intercept(interceptors ...Interceptor) {
	c.inters.Gateway = append(c.inters.Gateway, interceptors...)
}

// Create returns a builder for creating a Gateway entity.
func (c *GatewayClient) Create() *GatewayCreate {
	mutation := newGatewayMutation(c.config, OpCreate)
	return &GatewayCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gateway entities.
func (c *GatewayClient) CreateBulk(builders ...*GatewayCreate) *GatewayCreateBulk {
	return &GatewayCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gateway.
func (c *GatewayClient) Update() *GatewayUpdate {
	mutation := newGatewayMutation(c.config, OpUpdate)
	return &GatewayUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GatewayClient) UpdateOne(ga *Gateway) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGateway(ga))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GatewayClient) UpdateOneID(id uuid.UUID) *GatewayUpdateOne {
	mutation := newGatewayMutation(c.config, OpUpdateOne, withGatewayID(id))
	return &GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gateway.
func (c *GatewayClient) Delete() *GatewayDelete {
	mutation := newGatewayMutation(c.config, OpDelete)
	return &GatewayDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GatewayClient) DeleteOne(ga *Gateway) *GatewayDeleteOne {
	return c.DeleteOneID(ga.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GatewayClient) DeleteOneID(id uuid.UUID) *GatewayDeleteOne {
	builder := c.Delete().Where(gateway.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GatewayDeleteOne{builder}
}

// Query returns a query builder for Gateway.
func (c *GatewayClient) Query() *GatewayQuery {
	return &GatewayQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGateway},
		inters: c.Interceptors(),
	}
}

// Get returns a Gateway entity by its id.
func (c *GatewayClient) Get(ctx context.Context, id uuid.UUID) (*Gateway, error) {
	return c.Query().Where(gateway.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GatewayClient) GetX(ctx context.Context, id uuid.UUID) *Gateway {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GatewayClient) Hooks() []Hook {
	return c.hooks.Gateway
}

// Interceptors returns the client interceptors.
func (c *GatewayClient) Interceptors() []Interceptor {
	return c.inters.Gateway
}

func (c *GatewayClient) mutate(ctx context.Context, m *GatewayMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GatewayCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GatewayUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GatewayUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GatewayDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Gateway mutation op: %q", m.Op())
	}
}

// GatewayPortClient is a client for the GatewayPort schema.
type GatewayPortClient struct {
	config
}

// NewGatewayPortClient returns a client for the GatewayPort from the given config.
func NewGatewayPortClient(c config) *GatewayPortClient {
	return &GatewayPortClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gatewayport.Hooks(f(g(h())))`.
func (c *GatewayPortClient) Use(hooks ...Hook) {
	c.hooks.GatewayPort = append(c.hooks.GatewayPort, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `gatewayport.Intercept(f(g(h())))`.
func (c *GatewayPortClient) Intercept(interceptors ...Interceptor) {
	c.inters.GatewayPort = append(c.inters.GatewayPort, interceptors...)
}

// Create returns a builder for creating a GatewayPort entity.
func (c *GatewayPortClient) Create() *GatewayPortCreate {
	mutation := newGatewayPortMutation(c.config, OpCreate)
	return &GatewayPortCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GatewayPort entities.
func (c *GatewayPortClient) CreateBulk(builders ...*GatewayPortCreate) *GatewayPortCreateBulk {
	return &GatewayPortCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GatewayPort.
func (c *GatewayPortClient) Update() *GatewayPortUpdate {
	mutation := newGatewayPortMutation(c.config, OpUpdate)
	return &GatewayPortUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GatewayPortClient) UpdateOne(gp *GatewayPort) *GatewayPortUpdateOne {
	mutation := newGatewayPortMutation(c.config, OpUpdateOne, withGatewayPort(gp))
	return &GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GatewayPortClient) UpdateOneID(id uuid.UUID) *GatewayPortUpdateOne {
	mutation := newGatewayPortMutation(c.config, OpUpdateOne, withGatewayPortID(id))
	return &GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GatewayPort.
func (c *GatewayPortClient) Delete() *GatewayPortDelete {
	mutation := newGatewayPortMutation(c.config, OpDelete)
	return &GatewayPortDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GatewayPortClient) DeleteOne(gp *GatewayPort) *GatewayPortDeleteOne {
	return c.DeleteOneID(gp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GatewayPortClient) DeleteOneID(id uuid.UUID) *GatewayPortDeleteOne {
	builder := c.Delete().Where(gatewayport.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GatewayPortDeleteOne{builder}
}

// Query returns a query builder for GatewayPort.
func (c *GatewayPortClient) Query() *GatewayPortQuery {
	return &GatewayPortQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGatewayPort},
		inters: c.Interceptors(),
	}
}

// Get returns a GatewayPort entity by its id.
func (c *GatewayPortClient) Get(ctx context.Context, id uuid.UUID) (*GatewayPort, error) {
	return c.Query().Where(gatewayport.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GatewayPortClient) GetX(ctx context.Context, id uuid.UUID) *GatewayPort {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GatewayPortClient) Hooks() []Hook {
	return c.hooks.GatewayPort
}

// Interceptors returns the client interceptors.
func (c *GatewayPortClient) Interceptors() []Interceptor {
	return c.inters.GatewayPort
}

func (c *GatewayPortClient) mutate(ctx context.Context, m *GatewayPortMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GatewayPortCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GatewayPortUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GatewayPortUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GatewayPortDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown GatewayPort mutation op: %q", m.Op())
	}
}

// NetworkMappingClient is a client for the NetworkMapping schema.
type NetworkMappingClient struct {
	config
}

// NewNetworkMappingClient returns a client for the NetworkMapping from the given config.
func NewNetworkMappingClient(c config) *NetworkMappingClient {
	return &NetworkMappingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networkmapping.Hooks(f(g(h())))`.
func (c *NetworkMappingClient) Use(hooks ...Hook) {
	c.hooks.NetworkMapping = append(c.hooks.NetworkMapping, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `networkmapping.Intercept(f(g(h())))`.
func (c *NetworkMappingClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetworkMapping = append(c.inters.NetworkMapping, interceptors...)
}

// Create returns a builder for creating a NetworkMapping entity.
func (c *NetworkMappingClient) Create() *NetworkMappingCreate {
	mutation := newNetworkMappingMutation(c.config, OpCreate)
	return &NetworkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkMapping entities.
func (c *NetworkMappingClient) CreateBulk(builders ...*NetworkMappingCreate) *NetworkMappingCreateBulk {
	return &NetworkMappingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkMapping.
func (c *NetworkMappingClient) Update() *NetworkMappingUpdate {
	mutation := newNetworkMappingMutation(c.config, OpUpdate)
	return &NetworkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkMappingClient) UpdateOne(nm *NetworkMapping) *NetworkMappingUpdateOne {
	mutation := newNetworkMappingMutation(c.config, OpUpdateOne, withNetworkMapping(nm))
	return &NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkMappingClient) UpdateOneID(id uuid.UUID) *NetworkMappingUpdateOne {
	mutation := newNetworkMappingMutation(c.config, OpUpdateOne, withNetworkMappingID(id))
	return &NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkMapping.
func (c *NetworkMappingClient) Delete() *NetworkMappingDelete {
	mutation := newNetworkMappingMutation(c.config, OpDelete)
	return &NetworkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkMappingClient) DeleteOne(nm *NetworkMapping) *NetworkMappingDeleteOne {
	return c.DeleteOneID(nm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkMappingClient) DeleteOneID(id uuid.UUID) *NetworkMappingDeleteOne {
	builder := c.Delete().Where(networkmapping.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkMappingDeleteOne{builder}
}

// Query returns a query builder for NetworkMapping.
func (c *NetworkMappingClient) Query() *NetworkMappingQuery {
	return &NetworkMappingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetworkMapping},
		inters: c.Interceptors(),
	}
}

// Get returns a NetworkMapping entity by its id.
func (c *NetworkMappingClient) Get(ctx context.Context, id uuid.UUID) (*NetworkMapping, error) {
	return c.Query().Where(networkmapping.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkMappingClient) GetX(ctx context.Context, id uuid.UUID) *NetworkMapping {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NetworkMappingClient) Hooks() []Hook {
	return c.hooks.NetworkMapping
}

// Interceptors returns the client interceptors.
func (c *NetworkMappingClient) Interceptors() []Interceptor {
	return c.inters.NetworkMapping
}

func (c *NetworkMappingClient) mutate(ctx context.Context, m *NetworkMappingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkMappingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkMappingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkMappingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkMappingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetworkMapping mutation op: %q", m.Op())
	}
}

// S3BucketClient is a client for the S3Bucket schema.
type S3BucketClient struct {
	config
}

// NewS3BucketClient returns a client for the S3Bucket from the given config.
func NewS3BucketClient(c config) *S3BucketClient {
	return &S3BucketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3bucket.Hooks(f(g(h())))`.
func (c *S3BucketClient) Use(hooks ...Hook) {
	c.hooks.S3Bucket = append(c.hooks.S3Bucket, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3bucket.Intercept(f(g(h())))`.
func (c *S3BucketClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3Bucket = append(c.inters.S3Bucket, interceptors...)
}

// Create returns a builder for creating a S3Bucket entity.
func (c *S3BucketClient) Create() *S3BucketCreate {
	mutation := newS3BucketMutation(c.config, OpCreate)
	return &S3BucketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3Bucket entities.
func (c *S3BucketClient) CreateBulk(builders ...*S3BucketCreate) *S3BucketCreateBulk {
	return &S3BucketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3Bucket.
func (c *S3BucketClient) Update() *S3BucketUpdate {
	mutation := newS3BucketMutation(c.config, OpUpdate)
	return &S3BucketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3BucketClient) UpdateOne(s *S3Bucket) *S3BucketUpdateOne {
	mutation := newS3BucketMutation(c.config, OpUpdateOne, withS3Bucket(s))
	return &S3BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3BucketClient) UpdateOneID(id uuid.UUID) *S3BucketUpdateOne {
	mutation := newS3BucketMutation(c.config, OpUpdateOne, withS3BucketID(id))
	return &S3BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3Bucket.
func (c *S3BucketClient) Delete() *S3BucketDelete {
	mutation := newS3BucketMutation(c.config, OpDelete)
	return &S3BucketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3BucketClient) DeleteOne(s *S3Bucket) *S3BucketDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3BucketClient) DeleteOneID(id uuid.UUID) *S3BucketDeleteOne {
	builder := c.Delete().Where(s3bucket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3BucketDeleteOne{builder}
}

// Query returns a query builder for S3Bucket.
func (c *S3BucketClient) Query() *S3BucketQuery {
	return &S3BucketQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3Bucket},
		inters: c.Interceptors(),
	}
}

// Get returns a S3Bucket entity by its id.
func (c *S3BucketClient) Get(ctx context.Context, id uuid.UUID) (*S3Bucket, error) {
	return c.Query().Where(s3bucket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3BucketClient) GetX(ctx context.Context, id uuid.UUID) *S3Bucket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *S3BucketClient) Hooks() []Hook {
	return c.hooks.S3Bucket
}

// Interceptors returns the client interceptors.
func (c *S3BucketClient) Interceptors() []Interceptor {
	return c.inters.S3Bucket
}

func (c *S3BucketClient) mutate(ctx context.Context, m *S3BucketMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3BucketCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3BucketUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3BucketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3BucketDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3Bucket mutation op: %q", m.Op())
	}
}

// S3UserClient is a client for the S3User schema.
type S3UserClient struct {
	config
}

// NewS3UserClient returns a client for the S3User from the given config.
func NewS3UserClient(c config) *S3UserClient {
	return &S3UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3user.Hooks(f(g(h())))`.
func (c *S3UserClient) Use(hooks ...Hook) {
	c.hooks.S3User = append(c.hooks.S3User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3user.Intercept(f(g(h())))`.
func (c *S3UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3User = append(c.inters.S3User, interceptors...)
}

// Create returns a builder for creating a S3User entity.
func (c *S3UserClient) Create() *S3UserCreate {
	mutation := newS3UserMutation(c.config, OpCreate)
	return &S3UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3User entities.
func (c *S3UserClient) CreateBulk(builders ...*S3UserCreate) *S3UserCreateBulk {
	return &S3UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3User.
func (c *S3UserClient) Update() *S3UserUpdate {
	mutation := newS3UserMutation(c.config, OpUpdate)
	return &S3UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3UserClient) UpdateOne(s *S3User) *S3UserUpdateOne {
	mutation := newS3UserMutation(c.config, OpUpdateOne, withS3User(s))
	return &S3UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3UserClient) UpdateOneID(id uuid.UUID) *S3UserUpdateOne {
	mutation := newS3UserMutation(c.config, OpUpdateOne, withS3UserID(id))
	return &S3UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3User.
func (c *S3UserClient) Delete() *S3UserDelete {
	mutation := newS3UserMutation(c.config, OpDelete)
	return &S3UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3UserClient) DeleteOne(s *S3User) *S3UserDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3UserClient) DeleteOneID(id uuid.UUID) *S3UserDeleteOne {
	builder := c.Delete().Where(s3user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3UserDeleteOne{builder}
}

// Query returns a query builder for S3User.
func (c *S3UserClient) Query() *S3UserQuery {
	return &S3UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3User},
		inters: c.Interceptors(),
	}
}

// Get returns a S3User entity by its id.
func (c *S3UserClient) Get(ctx context.Context, id uuid.UUID) (*S3User, error) {
	return c.Query().Where(s3user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3UserClient) GetX(ctx context.Context, id uuid.UUID) *S3User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *S3UserClient) Hooks() []Hook {
	return c.hooks.S3User
}

// Interceptors returns the client interceptors.
func (c *S3UserClient) Interceptors() []Interceptor {
	return c.inters.S3User
}

func (c *S3UserClient) mutate(ctx context.Context, m *S3UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3User mutation op: %q", m.Op())
	}
}

// ScriptClient is a client for the Script schema.
type ScriptClient struct {
	config
}

// NewScriptClient returns a client for the Script from the given config.
func NewScriptClient(c config) *ScriptClient {
	return &ScriptClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `script.Hooks(f(g(h())))`.
func (c *ScriptClient) Use(hooks ...Hook) {
	c.hooks.Script = append(c.hooks.Script, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `script.Intercept(f(g(h())))`.
func (c *ScriptClient) Intercept(interceptors ...Interceptor) {
	c.inters.Script = append(c.inters.Script, interceptors...)
}

// Create returns a builder for creating a Script entity.
func (c *ScriptClient) Create() *ScriptCreate {
	mutation := newScriptMutation(c.config, OpCreate)
	return &ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Script entities.
func (c *ScriptClient) CreateBulk(builders ...*ScriptCreate) *ScriptCreateBulk {
	return &ScriptCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Script.
func (c *ScriptClient) Update() *ScriptUpdate {
	mutation := newScriptMutation(c.config, OpUpdate)
	return &ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptClient) UpdateOne(s *Script) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScript(s))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptClient) UpdateOneID(id int32) *ScriptUpdateOne {
	mutation := newScriptMutation(c.config, OpUpdateOne, withScriptID(id))
	return &ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Script.
func (c *ScriptClient) Delete() *ScriptDelete {
	mutation := newScriptMutation(c.config, OpDelete)
	return &ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptClient) DeleteOne(s *Script) *ScriptDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptClient) DeleteOneID(id int32) *ScriptDeleteOne {
	builder := c.Delete().Where(script.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptDeleteOne{builder}
}

// Query returns a query builder for Script.
func (c *ScriptClient) Query() *ScriptQuery {
	return &ScriptQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScript},
		inters: c.Interceptors(),
	}
}

// Get returns a Script entity by its id.
func (c *ScriptClient) Get(ctx context.Context, id int32) (*Script, error) {
	return c.Query().Where(script.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptClient) GetX(ctx context.Context, id int32) *Script {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScriptExecutionRecords queries the scriptExecutionRecords edge of a Script.
func (c *ScriptClient) QueryScriptExecutionRecords(s *Script) *ScriptExecutionRecordQuery {
	query := (&ScriptExecutionRecordClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(script.Table, script.FieldID, id),
			sqlgraph.To(scriptexecutionrecord.Table, scriptexecutionrecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, script.ScriptExecutionRecordsTable, script.ScriptExecutionRecordsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScriptClient) Hooks() []Hook {
	return c.hooks.Script
}

// Interceptors returns the client interceptors.
func (c *ScriptClient) Interceptors() []Interceptor {
	return c.inters.Script
}

func (c *ScriptClient) mutate(ctx context.Context, m *ScriptMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Script mutation op: %q", m.Op())
	}
}

// ScriptExecutionRecordClient is a client for the ScriptExecutionRecord schema.
type ScriptExecutionRecordClient struct {
	config
}

// NewScriptExecutionRecordClient returns a client for the ScriptExecutionRecord from the given config.
func NewScriptExecutionRecordClient(c config) *ScriptExecutionRecordClient {
	return &ScriptExecutionRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scriptexecutionrecord.Hooks(f(g(h())))`.
func (c *ScriptExecutionRecordClient) Use(hooks ...Hook) {
	c.hooks.ScriptExecutionRecord = append(c.hooks.ScriptExecutionRecord, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `scriptexecutionrecord.Intercept(f(g(h())))`.
func (c *ScriptExecutionRecordClient) Intercept(interceptors ...Interceptor) {
	c.inters.ScriptExecutionRecord = append(c.inters.ScriptExecutionRecord, interceptors...)
}

// Create returns a builder for creating a ScriptExecutionRecord entity.
func (c *ScriptExecutionRecordClient) Create() *ScriptExecutionRecordCreate {
	mutation := newScriptExecutionRecordMutation(c.config, OpCreate)
	return &ScriptExecutionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ScriptExecutionRecord entities.
func (c *ScriptExecutionRecordClient) CreateBulk(builders ...*ScriptExecutionRecordCreate) *ScriptExecutionRecordCreateBulk {
	return &ScriptExecutionRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Update() *ScriptExecutionRecordUpdate {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdate)
	return &ScriptExecutionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScriptExecutionRecordClient) UpdateOne(ser *ScriptExecutionRecord) *ScriptExecutionRecordUpdateOne {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdateOne, withScriptExecutionRecord(ser))
	return &ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScriptExecutionRecordClient) UpdateOneID(id int32) *ScriptExecutionRecordUpdateOne {
	mutation := newScriptExecutionRecordMutation(c.config, OpUpdateOne, withScriptExecutionRecordID(id))
	return &ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Delete() *ScriptExecutionRecordDelete {
	mutation := newScriptExecutionRecordMutation(c.config, OpDelete)
	return &ScriptExecutionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ScriptExecutionRecordClient) DeleteOne(ser *ScriptExecutionRecord) *ScriptExecutionRecordDeleteOne {
	return c.DeleteOneID(ser.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ScriptExecutionRecordClient) DeleteOneID(id int32) *ScriptExecutionRecordDeleteOne {
	builder := c.Delete().Where(scriptexecutionrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScriptExecutionRecordDeleteOne{builder}
}

// Query returns a query builder for ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) Query() *ScriptExecutionRecordQuery {
	return &ScriptExecutionRecordQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeScriptExecutionRecord},
		inters: c.Interceptors(),
	}
}

// Get returns a ScriptExecutionRecord entity by its id.
func (c *ScriptExecutionRecordClient) Get(ctx context.Context, id int32) (*ScriptExecutionRecord, error) {
	return c.Query().Where(scriptexecutionrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScriptExecutionRecordClient) GetX(ctx context.Context, id int32) *ScriptExecutionRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryScript queries the script edge of a ScriptExecutionRecord.
func (c *ScriptExecutionRecordClient) QueryScript(ser *ScriptExecutionRecord) *ScriptQuery {
	query := (&ScriptClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ser.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scriptexecutionrecord.Table, scriptexecutionrecord.FieldID, id),
			sqlgraph.To(script.Table, script.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, scriptexecutionrecord.ScriptTable, scriptexecutionrecord.ScriptColumn),
		)
		fromV = sqlgraph.Neighbors(ser.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScriptExecutionRecordClient) Hooks() []Hook {
	return c.hooks.ScriptExecutionRecord
}

// Interceptors returns the client interceptors.
func (c *ScriptExecutionRecordClient) Interceptors() []Interceptor {
	return c.inters.ScriptExecutionRecord
}

func (c *ScriptExecutionRecordClient) mutate(ctx context.Context, m *ScriptExecutionRecordMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ScriptExecutionRecordCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ScriptExecutionRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ScriptExecutionRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ScriptExecutionRecordDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ScriptExecutionRecord mutation op: %q", m.Op())
	}
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storage.Intercept(f(g(h())))`.
func (c *StorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Storage = append(c.inters.Storage, interceptors...)
}

// Create returns a builder for creating a Storage entity.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id uuid.UUID) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StorageClient) DeleteOneID(id uuid.UUID) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id uuid.UUID) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id uuid.UUID) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	return c.hooks.Storage
}

// Interceptors returns the client interceptors.
func (c *StorageClient) Interceptors() []Interceptor {
	return c.inters.Storage
}

func (c *StorageClient) mutate(ctx context.Context, m *StorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Storage mutation op: %q", m.Op())
	}
}

// StorageProviderClient is a client for the StorageProvider schema.
type StorageProviderClient struct {
	config
}

// NewStorageProviderClient returns a client for the StorageProvider from the given config.
func NewStorageProviderClient(c config) *StorageProviderClient {
	return &StorageProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storageprovider.Hooks(f(g(h())))`.
func (c *StorageProviderClient) Use(hooks ...Hook) {
	c.hooks.StorageProvider = append(c.hooks.StorageProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storageprovider.Intercept(f(g(h())))`.
func (c *StorageProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.StorageProvider = append(c.inters.StorageProvider, interceptors...)
}

// Create returns a builder for creating a StorageProvider entity.
func (c *StorageProviderClient) Create() *StorageProviderCreate {
	mutation := newStorageProviderMutation(c.config, OpCreate)
	return &StorageProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StorageProvider entities.
func (c *StorageProviderClient) CreateBulk(builders ...*StorageProviderCreate) *StorageProviderCreateBulk {
	return &StorageProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StorageProvider.
func (c *StorageProviderClient) Update() *StorageProviderUpdate {
	mutation := newStorageProviderMutation(c.config, OpUpdate)
	return &StorageProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageProviderClient) UpdateOne(sp *StorageProvider) *StorageProviderUpdateOne {
	mutation := newStorageProviderMutation(c.config, OpUpdateOne, withStorageProvider(sp))
	return &StorageProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageProviderClient) UpdateOneID(id uuid.UUID) *StorageProviderUpdateOne {
	mutation := newStorageProviderMutation(c.config, OpUpdateOne, withStorageProviderID(id))
	return &StorageProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StorageProvider.
func (c *StorageProviderClient) Delete() *StorageProviderDelete {
	mutation := newStorageProviderMutation(c.config, OpDelete)
	return &StorageProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StorageProviderClient) DeleteOne(sp *StorageProvider) *StorageProviderDeleteOne {
	return c.DeleteOneID(sp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StorageProviderClient) DeleteOneID(id uuid.UUID) *StorageProviderDeleteOne {
	builder := c.Delete().Where(storageprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageProviderDeleteOne{builder}
}

// Query returns a query builder for StorageProvider.
func (c *StorageProviderClient) Query() *StorageProviderQuery {
	return &StorageProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStorageProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a StorageProvider entity by its id.
func (c *StorageProviderClient) Get(ctx context.Context, id uuid.UUID) (*StorageProvider, error) {
	return c.Query().Where(storageprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageProviderClient) GetX(ctx context.Context, id uuid.UUID) *StorageProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *StorageProviderClient) Hooks() []Hook {
	return c.hooks.StorageProvider
}

// Interceptors returns the client interceptors.
func (c *StorageProviderClient) Interceptors() []Interceptor {
	return c.inters.StorageProvider
}

func (c *StorageProviderClient) mutate(ctx context.Context, m *StorageProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StorageProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StorageProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StorageProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StorageProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StorageProvider mutation op: %q", m.Op())
	}
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `task.Intercept(f(g(h())))`.
func (c *TaskClient) Intercept(interceptors ...Interceptor) {
	c.inters.Task = append(c.inters.Task, interceptors...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uuid.UUID) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id uuid.UUID) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTask},
		inters: c.Interceptors(),
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uuid.UUID) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uuid.UUID) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}

// Interceptors returns the client interceptors.
func (c *TaskClient) Interceptors() []Interceptor {
	return c.inters.Task
}

func (c *TaskClient) mutate(ctx context.Context, m *TaskMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TaskCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TaskDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Task mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// UserResourceLimitClient is a client for the UserResourceLimit schema.
type UserResourceLimitClient struct {
	config
}

// NewUserResourceLimitClient returns a client for the UserResourceLimit from the given config.
func NewUserResourceLimitClient(c config) *UserResourceLimitClient {
	return &UserResourceLimitClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userresourcelimit.Hooks(f(g(h())))`.
func (c *UserResourceLimitClient) Use(hooks ...Hook) {
	c.hooks.UserResourceLimit = append(c.hooks.UserResourceLimit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userresourcelimit.Intercept(f(g(h())))`.
func (c *UserResourceLimitClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserResourceLimit = append(c.inters.UserResourceLimit, interceptors...)
}

// Create returns a builder for creating a UserResourceLimit entity.
func (c *UserResourceLimitClient) Create() *UserResourceLimitCreate {
	mutation := newUserResourceLimitMutation(c.config, OpCreate)
	return &UserResourceLimitCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserResourceLimit entities.
func (c *UserResourceLimitClient) CreateBulk(builders ...*UserResourceLimitCreate) *UserResourceLimitCreateBulk {
	return &UserResourceLimitCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserResourceLimit.
func (c *UserResourceLimitClient) Update() *UserResourceLimitUpdate {
	mutation := newUserResourceLimitMutation(c.config, OpUpdate)
	return &UserResourceLimitUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserResourceLimitClient) UpdateOne(url *UserResourceLimit) *UserResourceLimitUpdateOne {
	mutation := newUserResourceLimitMutation(c.config, OpUpdateOne, withUserResourceLimit(url))
	return &UserResourceLimitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserResourceLimitClient) UpdateOneID(id uuid.UUID) *UserResourceLimitUpdateOne {
	mutation := newUserResourceLimitMutation(c.config, OpUpdateOne, withUserResourceLimitID(id))
	return &UserResourceLimitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserResourceLimit.
func (c *UserResourceLimitClient) Delete() *UserResourceLimitDelete {
	mutation := newUserResourceLimitMutation(c.config, OpDelete)
	return &UserResourceLimitDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserResourceLimitClient) DeleteOne(url *UserResourceLimit) *UserResourceLimitDeleteOne {
	return c.DeleteOneID(url.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserResourceLimitClient) DeleteOneID(id uuid.UUID) *UserResourceLimitDeleteOne {
	builder := c.Delete().Where(userresourcelimit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserResourceLimitDeleteOne{builder}
}

// Query returns a query builder for UserResourceLimit.
func (c *UserResourceLimitClient) Query() *UserResourceLimitQuery {
	return &UserResourceLimitQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserResourceLimit},
		inters: c.Interceptors(),
	}
}

// Get returns a UserResourceLimit entity by its id.
func (c *UserResourceLimitClient) Get(ctx context.Context, id uuid.UUID) (*UserResourceLimit, error) {
	return c.Query().Where(userresourcelimit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserResourceLimitClient) GetX(ctx context.Context, id uuid.UUID) *UserResourceLimit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserResourceLimitClient) Hooks() []Hook {
	return c.hooks.UserResourceLimit
}

// Interceptors returns the client interceptors.
func (c *UserResourceLimitClient) Interceptors() []Interceptor {
	return c.inters.UserResourceLimit
}

func (c *UserResourceLimitClient) mutate(ctx context.Context, m *UserResourceLimitMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserResourceLimitCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserResourceLimitUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserResourceLimitUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserResourceLimitDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UserResourceLimit mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Agent, AlipayOrderRollback, ComputeImage, ComputeInstance, ComputeSpec,
		ComputeSpecPrice, Cycle, CycleOrder, CycleRecharge, CycleRedeemCode,
		CycleRenewal, CycleTransaction, DomainBinding, Employee, Gateway, GatewayPort,
		NetworkMapping, S3Bucket, S3User, Script, ScriptExecutionRecord, Storage,
		StorageProvider, Task, User, UserResourceLimit []ent.Hook
	}
	inters struct {
		Agent, AlipayOrderRollback, ComputeImage, ComputeInstance, ComputeSpec,
		ComputeSpecPrice, Cycle, CycleOrder, CycleRecharge, CycleRedeemCode,
		CycleRenewal, CycleTransaction, DomainBinding, Employee, Gateway, GatewayPort,
		NetworkMapping, S3Bucket, S3User, Script, ScriptExecutionRecord, Storage,
		StorageProvider, Task, User, UserResourceLimit []ent.Interceptor
	}
)
