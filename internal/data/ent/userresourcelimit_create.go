// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/userresourcelimit"
)

// UserResourceLimitCreate is the builder for creating a UserResourceLimit entity.
type UserResourceLimitCreate struct {
	config
	mutation *UserResourceLimitMutation
	hooks    []Hook
}

// SetFkUserID sets the "fk_user_id" field.
func (urlc *UserResourceLimitCreate) SetFkUserID(u uuid.UUID) *UserResourceLimitCreate {
	urlc.mutation.SetFkUserID(u)
	return urlc
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (urlc *UserResourceLimitCreate) SetNillableFkUserID(u *uuid.UUID) *UserResourceLimitCreate {
	if u != nil {
		urlc.SetFkUserID(*u)
	}
	return urlc
}

// SetMaxCPU sets the "max_cpu" field.
func (urlc *UserResourceLimitCreate) SetMaxCPU(i int32) *UserResourceLimitCreate {
	urlc.mutation.SetMaxCPU(i)
	return urlc
}

// SetNillableMaxCPU sets the "max_cpu" field if the given value is not nil.
func (urlc *UserResourceLimitCreate) SetNillableMaxCPU(i *int32) *UserResourceLimitCreate {
	if i != nil {
		urlc.SetMaxCPU(*i)
	}
	return urlc
}

// SetMaxMemory sets the "max_memory" field.
func (urlc *UserResourceLimitCreate) SetMaxMemory(i int32) *UserResourceLimitCreate {
	urlc.mutation.SetMaxMemory(i)
	return urlc
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (urlc *UserResourceLimitCreate) SetNillableMaxMemory(i *int32) *UserResourceLimitCreate {
	if i != nil {
		urlc.SetMaxMemory(*i)
	}
	return urlc
}

// SetMaxNetworkMapping sets the "max_network_mapping" field.
func (urlc *UserResourceLimitCreate) SetMaxNetworkMapping(i int32) *UserResourceLimitCreate {
	urlc.mutation.SetMaxNetworkMapping(i)
	return urlc
}

// SetNillableMaxNetworkMapping sets the "max_network_mapping" field if the given value is not nil.
func (urlc *UserResourceLimitCreate) SetNillableMaxNetworkMapping(i *int32) *UserResourceLimitCreate {
	if i != nil {
		urlc.SetMaxNetworkMapping(*i)
	}
	return urlc
}

// SetID sets the "id" field.
func (urlc *UserResourceLimitCreate) SetID(u uuid.UUID) *UserResourceLimitCreate {
	urlc.mutation.SetID(u)
	return urlc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (urlc *UserResourceLimitCreate) SetNillableID(u *uuid.UUID) *UserResourceLimitCreate {
	if u != nil {
		urlc.SetID(*u)
	}
	return urlc
}

// Mutation returns the UserResourceLimitMutation object of the builder.
func (urlc *UserResourceLimitCreate) Mutation() *UserResourceLimitMutation {
	return urlc.mutation
}

// Save creates the UserResourceLimit in the database.
func (urlc *UserResourceLimitCreate) Save(ctx context.Context) (*UserResourceLimit, error) {
	urlc.defaults()
	return withHooks(ctx, urlc.sqlSave, urlc.mutation, urlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (urlc *UserResourceLimitCreate) SaveX(ctx context.Context) *UserResourceLimit {
	v, err := urlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urlc *UserResourceLimitCreate) Exec(ctx context.Context) error {
	_, err := urlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urlc *UserResourceLimitCreate) ExecX(ctx context.Context) {
	if err := urlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (urlc *UserResourceLimitCreate) defaults() {
	if _, ok := urlc.mutation.FkUserID(); !ok {
		v := userresourcelimit.DefaultFkUserID()
		urlc.mutation.SetFkUserID(v)
	}
	if _, ok := urlc.mutation.MaxCPU(); !ok {
		v := userresourcelimit.DefaultMaxCPU
		urlc.mutation.SetMaxCPU(v)
	}
	if _, ok := urlc.mutation.MaxMemory(); !ok {
		v := userresourcelimit.DefaultMaxMemory
		urlc.mutation.SetMaxMemory(v)
	}
	if _, ok := urlc.mutation.MaxNetworkMapping(); !ok {
		v := userresourcelimit.DefaultMaxNetworkMapping
		urlc.mutation.SetMaxNetworkMapping(v)
	}
	if _, ok := urlc.mutation.ID(); !ok {
		v := userresourcelimit.DefaultID()
		urlc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (urlc *UserResourceLimitCreate) check() error {
	if _, ok := urlc.mutation.FkUserID(); !ok {
		return &ValidationError{Name: "fk_user_id", err: errors.New(`ent: missing required field "UserResourceLimit.fk_user_id"`)}
	}
	if _, ok := urlc.mutation.MaxCPU(); !ok {
		return &ValidationError{Name: "max_cpu", err: errors.New(`ent: missing required field "UserResourceLimit.max_cpu"`)}
	}
	if _, ok := urlc.mutation.MaxMemory(); !ok {
		return &ValidationError{Name: "max_memory", err: errors.New(`ent: missing required field "UserResourceLimit.max_memory"`)}
	}
	if _, ok := urlc.mutation.MaxNetworkMapping(); !ok {
		return &ValidationError{Name: "max_network_mapping", err: errors.New(`ent: missing required field "UserResourceLimit.max_network_mapping"`)}
	}
	return nil
}

func (urlc *UserResourceLimitCreate) sqlSave(ctx context.Context) (*UserResourceLimit, error) {
	if err := urlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := urlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, urlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	urlc.mutation.id = &_node.ID
	urlc.mutation.done = true
	return _node, nil
}

func (urlc *UserResourceLimitCreate) createSpec() (*UserResourceLimit, *sqlgraph.CreateSpec) {
	var (
		_node = &UserResourceLimit{config: urlc.config}
		_spec = sqlgraph.NewCreateSpec(userresourcelimit.Table, sqlgraph.NewFieldSpec(userresourcelimit.FieldID, field.TypeUUID))
	)
	if id, ok := urlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := urlc.mutation.FkUserID(); ok {
		_spec.SetField(userresourcelimit.FieldFkUserID, field.TypeUUID, value)
		_node.FkUserID = value
	}
	if value, ok := urlc.mutation.MaxCPU(); ok {
		_spec.SetField(userresourcelimit.FieldMaxCPU, field.TypeInt32, value)
		_node.MaxCPU = value
	}
	if value, ok := urlc.mutation.MaxMemory(); ok {
		_spec.SetField(userresourcelimit.FieldMaxMemory, field.TypeInt32, value)
		_node.MaxMemory = value
	}
	if value, ok := urlc.mutation.MaxNetworkMapping(); ok {
		_spec.SetField(userresourcelimit.FieldMaxNetworkMapping, field.TypeInt32, value)
		_node.MaxNetworkMapping = value
	}
	return _node, _spec
}

// UserResourceLimitCreateBulk is the builder for creating many UserResourceLimit entities in bulk.
type UserResourceLimitCreateBulk struct {
	config
	builders []*UserResourceLimitCreate
}

// Save creates the UserResourceLimit entities in the database.
func (urlcb *UserResourceLimitCreateBulk) Save(ctx context.Context) ([]*UserResourceLimit, error) {
	specs := make([]*sqlgraph.CreateSpec, len(urlcb.builders))
	nodes := make([]*UserResourceLimit, len(urlcb.builders))
	mutators := make([]Mutator, len(urlcb.builders))
	for i := range urlcb.builders {
		func(i int, root context.Context) {
			builder := urlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserResourceLimitMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, urlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, urlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, urlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (urlcb *UserResourceLimitCreateBulk) SaveX(ctx context.Context) []*UserResourceLimit {
	v, err := urlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (urlcb *UserResourceLimitCreateBulk) Exec(ctx context.Context) error {
	_, err := urlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urlcb *UserResourceLimitCreateBulk) ExecX(ctx context.Context) {
	if err := urlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
