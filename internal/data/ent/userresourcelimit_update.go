// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/predicate"
	"github.com/mohaijiang/computeshare-server/internal/data/ent/userresourcelimit"
)

// UserResourceLimitUpdate is the builder for updating UserResourceLimit entities.
type UserResourceLimitUpdate struct {
	config
	hooks    []Hook
	mutation *UserResourceLimitMutation
}

// Where appends a list predicates to the UserResourceLimitUpdate builder.
func (urlu *UserResourceLimitUpdate) Where(ps ...predicate.UserResourceLimit) *UserResourceLimitUpdate {
	urlu.mutation.Where(ps...)
	return urlu
}

// SetFkUserID sets the "fk_user_id" field.
func (urlu *UserResourceLimitUpdate) SetFkUserID(u uuid.UUID) *UserResourceLimitUpdate {
	urlu.mutation.SetFkUserID(u)
	return urlu
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (urlu *UserResourceLimitUpdate) SetNillableFkUserID(u *uuid.UUID) *UserResourceLimitUpdate {
	if u != nil {
		urlu.SetFkUserID(*u)
	}
	return urlu
}

// SetMaxCPU sets the "max_cpu" field.
func (urlu *UserResourceLimitUpdate) SetMaxCPU(i int32) *UserResourceLimitUpdate {
	urlu.mutation.ResetMaxCPU()
	urlu.mutation.SetMaxCPU(i)
	return urlu
}

// SetNillableMaxCPU sets the "max_cpu" field if the given value is not nil.
func (urlu *UserResourceLimitUpdate) SetNillableMaxCPU(i *int32) *UserResourceLimitUpdate {
	if i != nil {
		urlu.SetMaxCPU(*i)
	}
	return urlu
}

// AddMaxCPU adds i to the "max_cpu" field.
func (urlu *UserResourceLimitUpdate) AddMaxCPU(i int32) *UserResourceLimitUpdate {
	urlu.mutation.AddMaxCPU(i)
	return urlu
}

// SetMaxMemory sets the "max_memory" field.
func (urlu *UserResourceLimitUpdate) SetMaxMemory(i int32) *UserResourceLimitUpdate {
	urlu.mutation.ResetMaxMemory()
	urlu.mutation.SetMaxMemory(i)
	return urlu
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (urlu *UserResourceLimitUpdate) SetNillableMaxMemory(i *int32) *UserResourceLimitUpdate {
	if i != nil {
		urlu.SetMaxMemory(*i)
	}
	return urlu
}

// AddMaxMemory adds i to the "max_memory" field.
func (urlu *UserResourceLimitUpdate) AddMaxMemory(i int32) *UserResourceLimitUpdate {
	urlu.mutation.AddMaxMemory(i)
	return urlu
}

// SetMaxNetworkMapping sets the "max_network_mapping" field.
func (urlu *UserResourceLimitUpdate) SetMaxNetworkMapping(i int32) *UserResourceLimitUpdate {
	urlu.mutation.ResetMaxNetworkMapping()
	urlu.mutation.SetMaxNetworkMapping(i)
	return urlu
}

// SetNillableMaxNetworkMapping sets the "max_network_mapping" field if the given value is not nil.
func (urlu *UserResourceLimitUpdate) SetNillableMaxNetworkMapping(i *int32) *UserResourceLimitUpdate {
	if i != nil {
		urlu.SetMaxNetworkMapping(*i)
	}
	return urlu
}

// AddMaxNetworkMapping adds i to the "max_network_mapping" field.
func (urlu *UserResourceLimitUpdate) AddMaxNetworkMapping(i int32) *UserResourceLimitUpdate {
	urlu.mutation.AddMaxNetworkMapping(i)
	return urlu
}

// Mutation returns the UserResourceLimitMutation object of the builder.
func (urlu *UserResourceLimitUpdate) Mutation() *UserResourceLimitMutation {
	return urlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (urlu *UserResourceLimitUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, urlu.sqlSave, urlu.mutation, urlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (urlu *UserResourceLimitUpdate) SaveX(ctx context.Context) int {
	affected, err := urlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (urlu *UserResourceLimitUpdate) Exec(ctx context.Context) error {
	_, err := urlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urlu *UserResourceLimitUpdate) ExecX(ctx context.Context) {
	if err := urlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (urlu *UserResourceLimitUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userresourcelimit.Table, userresourcelimit.Columns, sqlgraph.NewFieldSpec(userresourcelimit.FieldID, field.TypeUUID))
	if ps := urlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := urlu.mutation.FkUserID(); ok {
		_spec.SetField(userresourcelimit.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := urlu.mutation.MaxCPU(); ok {
		_spec.SetField(userresourcelimit.FieldMaxCPU, field.TypeInt32, value)
	}
	if value, ok := urlu.mutation.AddedMaxCPU(); ok {
		_spec.AddField(userresourcelimit.FieldMaxCPU, field.TypeInt32, value)
	}
	if value, ok := urlu.mutation.MaxMemory(); ok {
		_spec.SetField(userresourcelimit.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := urlu.mutation.AddedMaxMemory(); ok {
		_spec.AddField(userresourcelimit.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := urlu.mutation.MaxNetworkMapping(); ok {
		_spec.SetField(userresourcelimit.FieldMaxNetworkMapping, field.TypeInt32, value)
	}
	if value, ok := urlu.mutation.AddedMaxNetworkMapping(); ok {
		_spec.AddField(userresourcelimit.FieldMaxNetworkMapping, field.TypeInt32, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, urlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresourcelimit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	urlu.mutation.done = true
	return n, nil
}

// UserResourceLimitUpdateOne is the builder for updating a single UserResourceLimit entity.
type UserResourceLimitUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserResourceLimitMutation
}

// SetFkUserID sets the "fk_user_id" field.
func (urluo *UserResourceLimitUpdateOne) SetFkUserID(u uuid.UUID) *UserResourceLimitUpdateOne {
	urluo.mutation.SetFkUserID(u)
	return urluo
}

// SetNillableFkUserID sets the "fk_user_id" field if the given value is not nil.
func (urluo *UserResourceLimitUpdateOne) SetNillableFkUserID(u *uuid.UUID) *UserResourceLimitUpdateOne {
	if u != nil {
		urluo.SetFkUserID(*u)
	}
	return urluo
}

// SetMaxCPU sets the "max_cpu" field.
func (urluo *UserResourceLimitUpdateOne) SetMaxCPU(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.ResetMaxCPU()
	urluo.mutation.SetMaxCPU(i)
	return urluo
}

// SetNillableMaxCPU sets the "max_cpu" field if the given value is not nil.
func (urluo *UserResourceLimitUpdateOne) SetNillableMaxCPU(i *int32) *UserResourceLimitUpdateOne {
	if i != nil {
		urluo.SetMaxCPU(*i)
	}
	return urluo
}

// AddMaxCPU adds i to the "max_cpu" field.
func (urluo *UserResourceLimitUpdateOne) AddMaxCPU(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.AddMaxCPU(i)
	return urluo
}

// SetMaxMemory sets the "max_memory" field.
func (urluo *UserResourceLimitUpdateOne) SetMaxMemory(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.ResetMaxMemory()
	urluo.mutation.SetMaxMemory(i)
	return urluo
}

// SetNillableMaxMemory sets the "max_memory" field if the given value is not nil.
func (urluo *UserResourceLimitUpdateOne) SetNillableMaxMemory(i *int32) *UserResourceLimitUpdateOne {
	if i != nil {
		urluo.SetMaxMemory(*i)
	}
	return urluo
}

// AddMaxMemory adds i to the "max_memory" field.
func (urluo *UserResourceLimitUpdateOne) AddMaxMemory(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.AddMaxMemory(i)
	return urluo
}

// SetMaxNetworkMapping sets the "max_network_mapping" field.
func (urluo *UserResourceLimitUpdateOne) SetMaxNetworkMapping(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.ResetMaxNetworkMapping()
	urluo.mutation.SetMaxNetworkMapping(i)
	return urluo
}

// SetNillableMaxNetworkMapping sets the "max_network_mapping" field if the given value is not nil.
func (urluo *UserResourceLimitUpdateOne) SetNillableMaxNetworkMapping(i *int32) *UserResourceLimitUpdateOne {
	if i != nil {
		urluo.SetMaxNetworkMapping(*i)
	}
	return urluo
}

// AddMaxNetworkMapping adds i to the "max_network_mapping" field.
func (urluo *UserResourceLimitUpdateOne) AddMaxNetworkMapping(i int32) *UserResourceLimitUpdateOne {
	urluo.mutation.AddMaxNetworkMapping(i)
	return urluo
}

// Mutation returns the UserResourceLimitMutation object of the builder.
func (urluo *UserResourceLimitUpdateOne) Mutation() *UserResourceLimitMutation {
	return urluo.mutation
}

// Where appends a list predicates to the UserResourceLimitUpdate builder.
func (urluo *UserResourceLimitUpdateOne) Where(ps ...predicate.UserResourceLimit) *UserResourceLimitUpdateOne {
	urluo.mutation.Where(ps...)
	return urluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (urluo *UserResourceLimitUpdateOne) Select(field string, fields ...string) *UserResourceLimitUpdateOne {
	urluo.fields = append([]string{field}, fields...)
	return urluo
}

// Save executes the query and returns the updated UserResourceLimit entity.
func (urluo *UserResourceLimitUpdateOne) Save(ctx context.Context) (*UserResourceLimit, error) {
	return withHooks(ctx, urluo.sqlSave, urluo.mutation, urluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (urluo *UserResourceLimitUpdateOne) SaveX(ctx context.Context) *UserResourceLimit {
	node, err := urluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (urluo *UserResourceLimitUpdateOne) Exec(ctx context.Context) error {
	_, err := urluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (urluo *UserResourceLimitUpdateOne) ExecX(ctx context.Context) {
	if err := urluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (urluo *UserResourceLimitUpdateOne) sqlSave(ctx context.Context) (_node *UserResourceLimit, err error) {
	_spec := sqlgraph.NewUpdateSpec(userresourcelimit.Table, userresourcelimit.Columns, sqlgraph.NewFieldSpec(userresourcelimit.FieldID, field.TypeUUID))
	id, ok := urluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserResourceLimit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := urluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userresourcelimit.FieldID)
		for _, f := range fields {
			if !userresourcelimit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userresourcelimit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := urluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := urluo.mutation.FkUserID(); ok {
		_spec.SetField(userresourcelimit.FieldFkUserID, field.TypeUUID, value)
	}
	if value, ok := urluo.mutation.MaxCPU(); ok {
		_spec.SetField(userresourcelimit.FieldMaxCPU, field.TypeInt32, value)
	}
	if value, ok := urluo.mutation.AddedMaxCPU(); ok {
		_spec.AddField(userresourcelimit.FieldMaxCPU, field.TypeInt32, value)
	}
	if value, ok := urluo.mutation.MaxMemory(); ok {
		_spec.SetField(userresourcelimit.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := urluo.mutation.AddedMaxMemory(); ok {
		_spec.AddField(userresourcelimit.FieldMaxMemory, field.TypeInt32, value)
	}
	if value, ok := urluo.mutation.MaxNetworkMapping(); ok {
		_spec.SetField(userresourcelimit.FieldMaxNetworkMapping, field.TypeInt32, value)
	}
	if value, ok := urluo.mutation.AddedMaxNetworkMapping(); ok {
		_spec.AddField(userresourcelimit.FieldMaxNetworkMapping, field.TypeInt32, value)
	}
	_node = &UserResourceLimit{config: urluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, urluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userresourcelimit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	urluo.mutation.done = true
	return _node, nil
}
