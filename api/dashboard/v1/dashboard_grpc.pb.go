// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/dashboard/v1/dashboard.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dashboard_ProvidersCount_FullMethodName = "/api.server.dashboard.v1.Dashboard/ProvidersCount"
	Dashboard_GatewaysCount_FullMethodName  = "/api.server.dashboard.v1.Dashboard/GatewaysCount"
	Dashboard_StoragesCount_FullMethodName  = "/api.server.dashboard.v1.Dashboard/StoragesCount"
	Dashboard_ProvidersList_FullMethodName  = "/api.server.dashboard.v1.Dashboard/ProvidersList"
	Dashboard_GatewaysList_FullMethodName   = "/api.server.dashboard.v1.Dashboard/GatewaysList"
	Dashboard_CyclesCount_FullMethodName    = "/api.server.dashboard.v1.Dashboard/CyclesCount"
	Dashboard_SandboxCount_FullMethodName   = "/api.server.dashboard.v1.Dashboard/SandboxCount"
)

// DashboardClient is the client API for Dashboard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DashboardClient interface {
	// Provider总数
	ProvidersCount(ctx context.Context, in *ProvidersCountRequest, opts ...grpc.CallOption) (*ProvidersCountReply, error)
	// Gateway总数
	GatewaysCount(ctx context.Context, in *GatewaysCountRequest, opts ...grpc.CallOption) (*GatewaysCountReply, error)
	// 存储总数 已使用总数
	StoragesCount(ctx context.Context, in *StoragesCountRequest, opts ...grpc.CallOption) (*StoragesCountReply, error)
	// Provider列表 类型，总数，规格，是否存活
	ProvidersList(ctx context.Context, in *ProvidersListRequest, opts ...grpc.CallOption) (*ProvidersListReply, error)
	// Gateway列表 总端口数 已用端口数
	GatewaysList(ctx context.Context, in *GatewaysListRequest, opts ...grpc.CallOption) (*GatewaysListReply, error)
	// 已发放积分总数 回收积分总数 发放代金券总数 已充值总数
	CyclesCount(ctx context.Context, in *CyclesCountRequest, opts ...grpc.CallOption) (*CyclesCountReply, error)
	// 沙箱调用总数
	SandboxCount(ctx context.Context, in *SandboxCountRequest, opts ...grpc.CallOption) (*SandboxCountReply, error)
}

type dashboardClient struct {
	cc grpc.ClientConnInterface
}

func NewDashboardClient(cc grpc.ClientConnInterface) DashboardClient {
	return &dashboardClient{cc}
}

func (c *dashboardClient) ProvidersCount(ctx context.Context, in *ProvidersCountRequest, opts ...grpc.CallOption) (*ProvidersCountReply, error) {
	out := new(ProvidersCountReply)
	err := c.cc.Invoke(ctx, Dashboard_ProvidersCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GatewaysCount(ctx context.Context, in *GatewaysCountRequest, opts ...grpc.CallOption) (*GatewaysCountReply, error) {
	out := new(GatewaysCountReply)
	err := c.cc.Invoke(ctx, Dashboard_GatewaysCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) StoragesCount(ctx context.Context, in *StoragesCountRequest, opts ...grpc.CallOption) (*StoragesCountReply, error) {
	out := new(StoragesCountReply)
	err := c.cc.Invoke(ctx, Dashboard_StoragesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) ProvidersList(ctx context.Context, in *ProvidersListRequest, opts ...grpc.CallOption) (*ProvidersListReply, error) {
	out := new(ProvidersListReply)
	err := c.cc.Invoke(ctx, Dashboard_ProvidersList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) GatewaysList(ctx context.Context, in *GatewaysListRequest, opts ...grpc.CallOption) (*GatewaysListReply, error) {
	out := new(GatewaysListReply)
	err := c.cc.Invoke(ctx, Dashboard_GatewaysList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) CyclesCount(ctx context.Context, in *CyclesCountRequest, opts ...grpc.CallOption) (*CyclesCountReply, error) {
	out := new(CyclesCountReply)
	err := c.cc.Invoke(ctx, Dashboard_CyclesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dashboardClient) SandboxCount(ctx context.Context, in *SandboxCountRequest, opts ...grpc.CallOption) (*SandboxCountReply, error) {
	out := new(SandboxCountReply)
	err := c.cc.Invoke(ctx, Dashboard_SandboxCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DashboardServer is the server API for Dashboard service.
// All implementations must embed UnimplementedDashboardServer
// for forward compatibility
type DashboardServer interface {
	// Provider总数
	ProvidersCount(context.Context, *ProvidersCountRequest) (*ProvidersCountReply, error)
	// Gateway总数
	GatewaysCount(context.Context, *GatewaysCountRequest) (*GatewaysCountReply, error)
	// 存储总数 已使用总数
	StoragesCount(context.Context, *StoragesCountRequest) (*StoragesCountReply, error)
	// Provider列表 类型，总数，规格，是否存活
	ProvidersList(context.Context, *ProvidersListRequest) (*ProvidersListReply, error)
	// Gateway列表 总端口数 已用端口数
	GatewaysList(context.Context, *GatewaysListRequest) (*GatewaysListReply, error)
	// 已发放积分总数 回收积分总数 发放代金券总数 已充值总数
	CyclesCount(context.Context, *CyclesCountRequest) (*CyclesCountReply, error)
	// 沙箱调用总数
	SandboxCount(context.Context, *SandboxCountRequest) (*SandboxCountReply, error)
	mustEmbedUnimplementedDashboardServer()
}

// UnimplementedDashboardServer must be embedded to have forward compatible implementations.
type UnimplementedDashboardServer struct {
}

func (UnimplementedDashboardServer) ProvidersCount(context.Context, *ProvidersCountRequest) (*ProvidersCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvidersCount not implemented")
}
func (UnimplementedDashboardServer) GatewaysCount(context.Context, *GatewaysCountRequest) (*GatewaysCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewaysCount not implemented")
}
func (UnimplementedDashboardServer) StoragesCount(context.Context, *StoragesCountRequest) (*StoragesCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoragesCount not implemented")
}
func (UnimplementedDashboardServer) ProvidersList(context.Context, *ProvidersListRequest) (*ProvidersListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvidersList not implemented")
}
func (UnimplementedDashboardServer) GatewaysList(context.Context, *GatewaysListRequest) (*GatewaysListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewaysList not implemented")
}
func (UnimplementedDashboardServer) CyclesCount(context.Context, *CyclesCountRequest) (*CyclesCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CyclesCount not implemented")
}
func (UnimplementedDashboardServer) SandboxCount(context.Context, *SandboxCountRequest) (*SandboxCountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SandboxCount not implemented")
}
func (UnimplementedDashboardServer) mustEmbedUnimplementedDashboardServer() {}

// UnsafeDashboardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DashboardServer will
// result in compilation errors.
type UnsafeDashboardServer interface {
	mustEmbedUnimplementedDashboardServer()
}

func RegisterDashboardServer(s grpc.ServiceRegistrar, srv DashboardServer) {
	s.RegisterService(&Dashboard_ServiceDesc, srv)
}

func _Dashboard_ProvidersCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvidersCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ProvidersCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_ProvidersCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ProvidersCount(ctx, req.(*ProvidersCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GatewaysCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaysCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GatewaysCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GatewaysCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GatewaysCount(ctx, req.(*GatewaysCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_StoragesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoragesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).StoragesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_StoragesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).StoragesCount(ctx, req.(*StoragesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_ProvidersList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvidersListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).ProvidersList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_ProvidersList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).ProvidersList(ctx, req.(*ProvidersListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_GatewaysList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewaysListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).GatewaysList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_GatewaysList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).GatewaysList(ctx, req.(*GatewaysListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_CyclesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CyclesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).CyclesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_CyclesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).CyclesCount(ctx, req.(*CyclesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dashboard_SandboxCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SandboxCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DashboardServer).SandboxCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dashboard_SandboxCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DashboardServer).SandboxCount(ctx, req.(*SandboxCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dashboard_ServiceDesc is the grpc.ServiceDesc for Dashboard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dashboard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.dashboard.v1.Dashboard",
	HandlerType: (*DashboardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProvidersCount",
			Handler:    _Dashboard_ProvidersCount_Handler,
		},
		{
			MethodName: "GatewaysCount",
			Handler:    _Dashboard_GatewaysCount_Handler,
		},
		{
			MethodName: "StoragesCount",
			Handler:    _Dashboard_StoragesCount_Handler,
		},
		{
			MethodName: "ProvidersList",
			Handler:    _Dashboard_ProvidersList_Handler,
		},
		{
			MethodName: "GatewaysList",
			Handler:    _Dashboard_GatewaysList_Handler,
		},
		{
			MethodName: "CyclesCount",
			Handler:    _Dashboard_CyclesCount_Handler,
		},
		{
			MethodName: "SandboxCount",
			Handler:    _Dashboard_SandboxCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/dashboard/v1/dashboard.proto",
}
