// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: api/queue/v1/task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QueueTask_GetAgentTask_FullMethodName    = "/api.server.queue.v1.QueueTask/GetAgentTask"
	QueueTask_UpdateAgentTask_FullMethodName = "/api.server.queue.v1.QueueTask/UpdateAgentTask"
)

// QueueTaskClient is the client API for QueueTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueTaskClient interface {
	// 查询队列任务
	GetAgentTask(ctx context.Context, in *QueueTaskGetRequest, opts ...grpc.CallOption) (*QueueTaskGetResponse, error)
	// 更新任务状态
	UpdateAgentTask(ctx context.Context, in *QueueTaskUpdateRequest, opts ...grpc.CallOption) (*QueueTaskUpdateResponse, error)
}

type queueTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueTaskClient(cc grpc.ClientConnInterface) QueueTaskClient {
	return &queueTaskClient{cc}
}

func (c *queueTaskClient) GetAgentTask(ctx context.Context, in *QueueTaskGetRequest, opts ...grpc.CallOption) (*QueueTaskGetResponse, error) {
	out := new(QueueTaskGetResponse)
	err := c.cc.Invoke(ctx, QueueTask_GetAgentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueTaskClient) UpdateAgentTask(ctx context.Context, in *QueueTaskUpdateRequest, opts ...grpc.CallOption) (*QueueTaskUpdateResponse, error) {
	out := new(QueueTaskUpdateResponse)
	err := c.cc.Invoke(ctx, QueueTask_UpdateAgentTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueTaskServer is the server API for QueueTask service.
// All implementations must embed UnimplementedQueueTaskServer
// for forward compatibility
type QueueTaskServer interface {
	// 查询队列任务
	GetAgentTask(context.Context, *QueueTaskGetRequest) (*QueueTaskGetResponse, error)
	// 更新任务状态
	UpdateAgentTask(context.Context, *QueueTaskUpdateRequest) (*QueueTaskUpdateResponse, error)
	mustEmbedUnimplementedQueueTaskServer()
}

// UnimplementedQueueTaskServer must be embedded to have forward compatible implementations.
type UnimplementedQueueTaskServer struct {
}

func (UnimplementedQueueTaskServer) GetAgentTask(context.Context, *QueueTaskGetRequest) (*QueueTaskGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentTask not implemented")
}
func (UnimplementedQueueTaskServer) UpdateAgentTask(context.Context, *QueueTaskUpdateRequest) (*QueueTaskUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgentTask not implemented")
}
func (UnimplementedQueueTaskServer) mustEmbedUnimplementedQueueTaskServer() {}

// UnsafeQueueTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueTaskServer will
// result in compilation errors.
type UnsafeQueueTaskServer interface {
	mustEmbedUnimplementedQueueTaskServer()
}

func RegisterQueueTaskServer(s grpc.ServiceRegistrar, srv QueueTaskServer) {
	s.RegisterService(&QueueTask_ServiceDesc, srv)
}

func _QueueTask_GetAgentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueTaskGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueTaskServer).GetAgentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueTask_GetAgentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueTaskServer).GetAgentTask(ctx, req.(*QueueTaskGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueTask_UpdateAgentTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueTaskUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueTaskServer).UpdateAgentTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueTask_UpdateAgentTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueTaskServer).UpdateAgentTask(ctx, req.(*QueueTaskUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueTask_ServiceDesc is the grpc.ServiceDesc for QueueTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.server.queue.v1.QueueTask",
	HandlerType: (*QueueTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgentTask",
			Handler:    _QueueTask_GetAgentTask_Handler,
		},
		{
			MethodName: "UpdateAgentTask",
			Handler:    _QueueTask_UpdateAgentTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/queue/v1/task.proto",
}
