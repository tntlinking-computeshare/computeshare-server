// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.2
// source: api/queue/v1/task.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQueueTaskGetAgentTask = "/api.server.queue.v1.QueueTask/GetAgentTask"
const OperationQueueTaskUpdateAgentTask = "/api.server.queue.v1.QueueTask/UpdateAgentTask"

type QueueTaskHTTPServer interface {
	// GetAgentTask 查询队列任务
	GetAgentTask(context.Context, *QueueTaskGetRequest) (*QueueTaskGetResponse, error)
	// UpdateAgentTask 更新任务状态
	UpdateAgentTask(context.Context, *QueueTaskUpdateRequest) (*QueueTaskUpdateResponse, error)
}

func RegisterQueueTaskHTTPServer(s *http.Server, srv QueueTaskHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/queue/task", _QueueTask_GetAgentTask0_HTTP_Handler(srv))
	r.PUT("/v1/queue/task", _QueueTask_UpdateAgentTask0_HTTP_Handler(srv))
}

func _QueueTask_GetAgentTask0_HTTP_Handler(srv QueueTaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueueTaskGetRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQueueTaskGetAgentTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAgentTask(ctx, req.(*QueueTaskGetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueueTaskGetResponse)
		return ctx.Result(200, reply)
	}
}

func _QueueTask_UpdateAgentTask0_HTTP_Handler(srv QueueTaskHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in QueueTaskUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQueueTaskUpdateAgentTask)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAgentTask(ctx, req.(*QueueTaskUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*QueueTaskUpdateResponse)
		return ctx.Result(200, reply)
	}
}

type QueueTaskHTTPClient interface {
	GetAgentTask(ctx context.Context, req *QueueTaskGetRequest, opts ...http.CallOption) (rsp *QueueTaskGetResponse, err error)
	UpdateAgentTask(ctx context.Context, req *QueueTaskUpdateRequest, opts ...http.CallOption) (rsp *QueueTaskUpdateResponse, err error)
}

type QueueTaskHTTPClientImpl struct {
	cc *http.Client
}

func NewQueueTaskHTTPClient(client *http.Client) QueueTaskHTTPClient {
	return &QueueTaskHTTPClientImpl{client}
}

func (c *QueueTaskHTTPClientImpl) GetAgentTask(ctx context.Context, in *QueueTaskGetRequest, opts ...http.CallOption) (*QueueTaskGetResponse, error) {
	var out QueueTaskGetResponse
	pattern := "/v1/queue/task"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQueueTaskGetAgentTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QueueTaskHTTPClientImpl) UpdateAgentTask(ctx context.Context, in *QueueTaskUpdateRequest, opts ...http.CallOption) (*QueueTaskUpdateResponse, error) {
	var out QueueTaskUpdateResponse
	pattern := "/v1/queue/task"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQueueTaskUpdateAgentTask))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
